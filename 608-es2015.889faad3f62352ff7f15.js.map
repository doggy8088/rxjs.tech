{"version":3,"mappings":"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","names":["_","constructor","n","getDecisionTree$","this","http","get","e","t","factory","error","O","previousBranchIds","currentBranchId","Z","initialState","dataService","pipe","o","x","tree$","state$","v","includes","length","c","map","s","label","join","trim","options","u","initial","$","getValue","selectOption","next","snapShot","back","slice","startOver","A","transform","pure","Y","operatorDecisionTreeService","currentSentence$","options$","isBeyondInitialQuestion$","hasError$","scrollService","scrollToTop","ngOnDestroy","selectors","a","j","T","imports","p","m","d","f"],"sources":["webpack:///src/app/custom-elements/operator-decision-tree/operator-decision-tree-data.service.ts","webpack:///src/app/custom-elements/operator-decision-tree/utils.ts","webpack:///src/app/custom-elements/operator-decision-tree/operator-decision-tree.service.ts","webpack:///src/app/custom-elements/operator-decision-tree/doc-type-name.pipe.ts","webpack:///src/app/custom-elements/operator-decision-tree/operator-decision-tree.component.html","webpack:///src/app/custom-elements/operator-decision-tree/operator-decision-tree.component.ts","webpack:///src/app/custom-elements/operator-decision-tree/operator-decision-tree.module.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OperatorDecisionTree } from './interfaces';\n\n@Injectable()\nexport class OperatorDecisionTreeDataService {\n  constructor(private http: HttpClient) {}\n\n  getDecisionTree$(): Observable<OperatorDecisionTree> {\n    return this.http.get<OperatorDecisionTree>(\n      '/generated/docs/app/decision-tree-data.json'\n    );\n  }\n}\n","import { OperatorTreeNodeWithOptions } from './interfaces';\n\nexport function isInitialDecision(previousBranchIds: string[]): boolean {\n  return (\n    previousBranchIds.includes('initial') && previousBranchIds.length === 1\n  );\n}\n\nexport function treeIsErrorFree(tree): boolean {\n  return !tree.error;\n}\n\nexport function nodeHasOptions(node): node is OperatorTreeNodeWithOptions {\n  return !!node.options;\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { catchError, filter, map, mapTo, shareReplay } from 'rxjs/operators';\nimport { OperatorDecisionTree, OperatorTreeNode, State } from './interfaces';\nimport { OperatorDecisionTreeDataService } from './operator-decision-tree-data.service';\nimport { isInitialDecision, nodeHasOptions, treeIsErrorFree } from './utils';\n\n@Injectable()\nexport class OperatorDecisionTreeService {\n  private initialState: State = {\n    previousBranchIds: ['initial'],\n    currentBranchId: 'initial'\n  };\n  private state$ = new BehaviorSubject<State>(this.initialState);\n  private tree$: Observable<\n    OperatorDecisionTree\n  > = this.dataService.getDecisionTree$().pipe(\n    catchError(error => of(error)), // This helps if the JSON for some reason fails to get fetched\n    shareReplay()\n  );\n\n  currentSentence$: Observable<string> = combineLatest(\n    this.tree$,\n    this.state$\n  ).pipe(\n    filter(([tree]) => treeIsErrorFree(tree)),\n    map(([tree, { previousBranchIds }]) =>\n        isInitialDecision(previousBranchIds)\n            ? '從下表中選擇一個選項，以開始決策'\n            : `${previousBranchIds\n                .map(entityId => {\n                  return tree[entityId].label;\n                })\n                .join(' ')}...`.trim()\n    )\n  );\n\n  options$: Observable<(OperatorTreeNode)[]> = combineLatest(\n    this.tree$,\n    this.state$\n  ).pipe(\n    filter(([tree, state]) => {\n      return (\n        treeIsErrorFree(tree) &&\n        !!tree[state.currentBranchId] &&\n        !!tree[state.currentBranchId].options\n      );\n    }),\n    map(([tree, state]) => {\n      // Project is currently using TypeScript 2.9.2\n      // With TS 3.1+ this can be done better if we map to [tree, node] and typeguard with a tuple in a filter\n      // filter((a): a is [OperatorDecisionTree, OperatorTreeNodeWithOptions] => !a[0].error && !!a[1].options)\n      const node = tree[state.currentBranchId];\n      return nodeHasOptions(node)\n        ? node.options.map(option => tree[option])\n        : tree['initial'].options.map(option => tree[option]);\n    })\n  );\n\n  isBeyondInitialQuestion$: Observable<boolean> = this.state$.pipe(\n    map(({ currentBranchId }) => currentBranchId !== 'initial')\n  );\n\n  // This helps if the JSON for some reason fails to get fetched\n  hasError$ = this.tree$.pipe(\n    filter(tree => !!tree.error),\n    mapTo(true)\n  );\n\n  constructor(private dataService: OperatorDecisionTreeDataService) {}\n\n  private get snapShot(): State {\n    return this.state$.getValue();\n  }\n\n  selectOption(optionId: string): void {\n    this.state$.next({\n      previousBranchIds: [...this.snapShot.previousBranchIds, optionId],\n      currentBranchId: optionId\n    });\n  }\n\n  back(): void {\n    const previousOptionId = this.snapShot.previousBranchIds[\n      this.snapShot.previousBranchIds.length - 2\n    ];\n\n    if (previousOptionId) {\n      this.state$.next({\n        previousBranchIds: [\n          ...this.snapShot.previousBranchIds.slice(\n            0,\n            this.snapShot.previousBranchIds.length - 1\n          )\n        ],\n        currentBranchId: previousOptionId\n      });\n    }\n  }\n\n  startOver(): void {\n    this.state$.next(this.initialState);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'docTypeName',\n})\nexport class DocTypeNamePipe implements PipeTransform {\n\n  transform(value: string): string {\n    switch (value) {\n      case 'class':\n        return '類';\n      case 'function':\n        return '函式';\n      default:\n        return value;\n    }\n  }\n\n}\n","<h1 class=\"mat-heading\" tabindex=\"0\">\n  運算子決策樹\n</h1>\n<ng-container *ngIf=\"!(hasError$ | async); else hasErrorTemplate\">\n  <h2 class=\"mat-subheading-2\" tabindex=\"0\">\n    {{currentSentence$ | async}}\n  </h2>\n  <ng-container *ngIf=\"isBeyondInitialQuestion$ | async\">\n    <section>\n      <button\n              (click)=\"back()\"\n              mat-button\n              class=\"back\"\n      >後退\n      </button>\n      <button\n              (click)=\"startOver()\"\n              mat-button\n              color=\"warn\"\n              class=\"start-over\"\n      >重新開始\n      </button>\n    </section>\n  </ng-container>\n  <div>\n    <ng-container *ngFor=\"let option of options$ | async\">\n      <ng-container *ngIf=\"option.options; else operatorTempalte\">\n        <button\n                class=\"option mat-body-1\"\n                (click)=\"selectOption(option.id, $event)\"\n                [@flyIn]\n        >\n          <mat-card matRipple>\n            {{option.label}}\n          </mat-card>\n        </button>\n      </ng-container>\n      <ng-template #operatorTempalte>\n        <p *ngIf=\"option.method\" class=\"mat-body-1\">\n          你需要\n          <a href=\"{{option.path}}#{{option.method}}\">{{option.label}}</a>  {{option.docType|docTypeName}}\n          中的 {{option.method}} 方法。\n        </p>\n        <p *ngIf=\"!option.method\" class=\"mat-body-1\">\n          你需要\n          <a href=\"{{option.path}}\">{{option.label}} {{option.docType | docTypeName}}</a>。\n        </p>\n      </ng-template>\n    </ng-container>\n  </div>\n</ng-container>\n\n<ng-template #hasErrorTemplate>\n  <div class=\"mat-body-1 error\">\n    <p translation-result=\"on\">啊哦！載入決策樹時出了點問題……非常抱歉。請嘗試重新整理本頁面。</p>\n    <p translation-origin=\"off\">Oops! There was an issue loading the decision tree.. we're real sorry about that. Please\n      try reloading the page.</p>\n    <p translation-result=\"on\">你還可以試試<a href=\"https://github.com/ReactiveX/rxjs/issues/new?template=documentation.md\"\n                                        target=\"_blank\">在 Github\n      送出一個 Issue</a>。</p>\n    <p translation-origin=\"off\">You can also try <a\n            href=\"https://github.com/ReactiveX/rxjs/issues/new?template=documentation.md\" target=\"_blank\">submitting an\n      issue on Github</a>.</p>\n  </div>\n</ng-template>\n","import {\n  animate,\n  state,\n  style,\n  transition,\n  trigger\n} from '@angular/animations';\nimport { Component, OnDestroy } from '@angular/core';\nimport { ScrollService } from 'app/shared/scroll.service';\nimport { Observable } from 'rxjs';\nimport { OperatorTreeNode } from './interfaces';\nimport { OperatorDecisionTreeService } from './operator-decision-tree.service';\n\n@Component({\n  selector: 'aio-operator-decision-tree',\n  templateUrl: './operator-decision-tree.component.html',\n  styleUrls: ['./operator-decision-tree.component.scss'],\n  animations: [\n    trigger('flyIn', [\n      state('in', style({ transform: 'translateX(0)' })),\n      transition(':enter', [\n        style({ transform: 'translateX(-100%)' }),\n        animate(250)\n      ])\n    ])\n  ]\n})\nexport class OperatorDecisionTreeComponent implements OnDestroy {\n  currentSentence$: Observable<string> = this.operatorDecisionTreeService.currentSentence$;\n  options$: Observable<OperatorTreeNode[]> = this.operatorDecisionTreeService.options$;\n  isBeyondInitialQuestion$: Observable<boolean> = this.operatorDecisionTreeService.isBeyondInitialQuestion$;\n  hasError$: Observable<boolean> = this.operatorDecisionTreeService.hasError$;\n\n  constructor(\n    private operatorDecisionTreeService: OperatorDecisionTreeService,\n    private scrollService: ScrollService\n  ) {}\n\n  selectOption(optionId: string): void {\n    this.operatorDecisionTreeService.selectOption(optionId);\n    this.scrollService.scrollToTop();\n  }\n\n  back(): void {\n    this.operatorDecisionTreeService.back();\n  }\n\n  startOver(): void {\n    this.operatorDecisionTreeService.startOver();\n  }\n\n  ngOnDestroy(): void {\n    this.startOver();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatRippleModule } from '@angular/material/core';\nimport { ScrollService } from 'app/shared/scroll.service';\nimport { WithCustomElementComponent } from '../element-registry';\nimport { DocTypeNamePipe } from './doc-type-name.pipe';\nimport { OperatorDecisionTreeDataService } from './operator-decision-tree-data.service';\nimport { OperatorDecisionTreeComponent } from './operator-decision-tree.component';\nimport { OperatorDecisionTreeService } from './operator-decision-tree.service';\n\n@NgModule({\n  imports: [CommonModule, MatButtonModule, MatCardModule, MatRippleModule],\n  declarations: [\n    DocTypeNamePipe,\n    OperatorDecisionTreeComponent,\n  ],\n  providers: [\n    OperatorDecisionTreeDataService,\n    OperatorDecisionTreeService,\n    ScrollService,\n  ],\n})\nexport class OperatorDecisionTreeModule implements WithCustomElementComponent {\n  customElementComponent: Type<OperatorDecisionTreeComponent> = OperatorDecisionTreeComponent;\n}\n"]}