{"version":3,"mappings":"whDAEEA,iBACEA,0BACFA,+CAEAA,oBAA4DA,+DAK1DA,0BACAA,sBACFA,+BAHEA,qCAE+DA,oEAK7DA,oBAEEA,gBACFA,+DAFEA,eAAsBA,kEAAoE,4BAD/EA,uBAERA,oCAAiB,uDAHxBA,SACEA,wBAIFA,2CAJsCA,kGAOxCA,qBAA4DA,6DAK5DA,+BAJiDA,iCAG/CA,+DA5BJA,iBAEEA,uBAIAA,0BASAA,gBACEA,gCAMFA,QAEAA,0BAMFA,4BA9BwDA,iCAEhDA,iDAIGA,qDASYA,+CACWA,oCAQvBA,sDCVJ,IAADC,EAAOC,IAAPD,EAAN,WAWEE,WACUC,EACRC,EACQC,aAFAC,qBAEAA,kBAZVA,iBAA6B,KAC7BA,UAAgB,OAChBA,oBACAA,mBAEQA,eAAY,IAAIC,IAChBD,gBAAa,EAOnBA,KAAKE,YAAwE,IAA3DJ,EAAWK,cAAcC,UAAUC,QAAQ,sBAfjE,qCAkBEC,sBACEN,KAAKO,WAAWC,QACXC,QAAKC,KAAUV,KAAKW,YACpBC,UAAUf,YACTG,EAAKQ,QAAUX,EACf,IAAMC,EAsDhB,SAAkBJ,EAAYmB,GAC5B,OAAOnB,EAAMoB,OAAO,SAACjB,EAAQC,GAAT,MAvDiD,OAuD5BA,EAvDkBiB,MAuDVlB,EAAS,EAAIA,GAAQ,GADxE,CAtDkCG,EAAKQ,SAE7BR,EAAKgB,KAAQlB,EAAY,EACXE,EAAKE,WACFJ,EAAYE,EAAKiB,WAChB,qBACF,iBACF,WACF,WA/BtB,6BAmCEC,sBACOlB,KAAKE,eAIRiB,KAAcnB,KAAKO,WAAWa,gBAAgBX,KCrD7C,SAAqBY,EAAWC,GACnC,gBAAIA,IAAoBA,EAAQ,MACzBC,KAAQ,SAAUC,EAAQC,GAC7BA,EAAWC,IAAIL,EAAUM,SAAS,WAAc,OAAOH,EAAOZ,UAAUa,IAAgBH,MAHzF,CDqD8DM,MAAQ5B,KAAK6B,MAAMC,QAAQrB,QAAKsB,KAAU/B,KAAK6B,SACzGpB,QAAKC,KAAUV,KAAKW,YACpBC,UAAU,YAASd,aAAPD,EAAOC,YAElB,GADAE,EAAKgC,YAAcnC,IACL,OAAVA,GAAkBA,GAASC,EAAMmC,QAArC,CAIA,IAAMlC,EAAID,EAAMoC,UAAUrC,GAAOM,cAC3BgC,EAAIpC,EAAEqC,aAENC,EAAQtC,EAAEuC,wBACVC,EAAQJ,EAAEG,wBAIXD,EAFuBG,KAAOD,EAAMC,KAASH,EAAMI,QAAUF,EAAME,SAGtEN,EAAEO,WAAcL,EAAMG,IAAMD,EAAMC,IAAQL,EAAEQ,aAAe,QAzDzE,yBA+DEC,WACE5C,KAAKW,UAAUkC,KAAK,QAhExB,oBAmEEC,WAAmB,IAAZjD,IAAYkD,yDACjB/C,KAAKgD,aAAehD,KAAKgD,YACrBnD,GAAaG,KAAKgD,aAAehD,KAAKiD,UArE9C,mBAwEEA,WACEjD,KAAKkD,cAAcC,8CAzEvBzD,MAyEuByD,oCAzEVzD,GAAYD,6DAAZC,EAAY0D,qsCDdzB3D,4BAAMA,6ECcOC,GEJA2D,EAAb,eAAM3D,EAJNE,uBAKEI,4BAAoCL,gDADzBD,4DAHF,CAAE4D,KAAcC,SAGd7D,EAAb","names":["t","o","N","constructor","e","n","c","this","f","isEmbedded","nativeElement","className","indexOf","ngOnInit","tocService","tocList","pipe","m","onDestroy","subscribe","i","reduce","level","type","primaryMax","ngAfterViewInit","g","activeItemIndex","scheduler","delay","operate","source","subscriber","add","schedule","v","items","changes","x","activeIndex","length","toArray","l","offsetParent","d","getBoundingClientRect","a","top","bottom","scrollTop","clientHeight","ngOnDestroy","next","toggle","arguments","isCollapsed","toTop","scrollService","scrollToTop","selectors","S","u","p"],"sources":["webpack:///src/app/custom-elements/toc/toc.component.html","webpack:///src/app/custom-elements/toc/toc.component.ts","webpack:///node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js","webpack:///src/app/custom-elements/toc/toc.module.ts"],"sourcesContent":["<div *ngIf=\"type !== 'None'\" class=\"toc-inner no-print\" [class.collapsed]=\"isCollapsed\">\n\n  <div *ngIf=\"type === 'EmbeddedSimple'\" class=\"toc-heading embedded\">\n    目录\n  </div>\n\n  <button *ngIf=\"type === 'EmbeddedExpandable'\" type=\"button\" (click)=\"toggle(false)\"\n    class=\"toc-heading embedded secondary\"\n    title=\"展开/折叠目录\"\n    aria-label=\"展开/折叠目录\"\n    [attr.aria-pressed]=\"!isCollapsed\">\n    目录\n    <mat-icon class=\"rotating-icon\" svgIcon=\"keyboard_arrow_right\" [class.collapsed]=\"isCollapsed\"></mat-icon>\n  </button>\n\n  <ul class=\"toc-list\" [class.embedded]=\"type !== 'Floating'\">\n    <ng-container *ngFor=\"let toc of tocList; let i = index\">\n      <li #tocItem title=\"{{toc.title}}\" *ngIf=\"type === 'Floating' || toc.level !== 'h1'\"\n        class=\"{{toc.level}}\" [class.secondary]=\"type === 'EmbeddedExpandable' && i >= primaryMax\" [class.active]=\"i === activeIndex\">\n        <a [href]=\"toc.href\" [innerHTML]=\"toc.content\"></a>\n      </li>\n    </ng-container>\n  </ul>\n\n  <button *ngIf=\"type === 'EmbeddedExpandable'\" type=\"button\" (click)=\"toggle()\"\n    class=\"toc-more-items embedded material-icons\" [class.collapsed]=\"isCollapsed\"\n    title=\"展开/折叠目录\"\n    aria-label=\"展开/折叠目录\"\n    [attr.aria-pressed]=\"!isCollapsed\">\n  </button>\n</div>\n","import { AfterViewInit, Component, ElementRef, OnDestroy, OnInit, QueryList, ViewChildren } from '@angular/core';\nimport { asapScheduler as asap, combineLatest, Subject } from 'rxjs';\nimport { startWith, subscribeOn, takeUntil } from 'rxjs/operators';\n\nimport { ScrollService } from 'app/shared/scroll.service';\nimport { TocItem, TocService } from 'app/shared/toc.service';\n\ntype TocType = 'None' | 'Floating' | 'EmbeddedSimple' | 'EmbeddedExpandable';\n\n@Component({\n  selector: 'aio-toc',\n  templateUrl: 'toc.component.html',\n  styles: []\n})\nexport class TocComponent implements OnInit, AfterViewInit, OnDestroy {\n\n  activeIndex: number | null = null;\n  type: TocType = 'None';\n  isCollapsed = true;\n  isEmbedded = false;\n  @ViewChildren('tocItem') private items: QueryList<ElementRef>;\n  private onDestroy = new Subject();\n  private primaryMax = 4;\n  tocList: TocItem[];\n\n  constructor(\n    private scrollService: ScrollService,\n    elementRef: ElementRef,\n    private tocService: TocService) {\n    this.isEmbedded = elementRef.nativeElement.className.indexOf('embedded') !== -1;\n  }\n\n  ngOnInit() {\n    this.tocService.tocList\n        .pipe(takeUntil(this.onDestroy))\n        .subscribe(tocList => {\n          this.tocList = tocList;\n          const itemCount = count(this.tocList, item => item.level !== 'h1');\n\n          this.type = (itemCount > 0) ?\n                        this.isEmbedded ?\n                          (itemCount > this.primaryMax) ?\n                            'EmbeddedExpandable' :\n                          'EmbeddedSimple' :\n                        'Floating' :\n                      'None';\n        });\n  }\n\n  ngAfterViewInit() {\n    if (!this.isEmbedded) {\n      // We use the `asap` scheduler because updates to `activeItemIndex` are triggered by DOM changes,\n      // which, in turn, are caused by the rendering that happened due to a ChangeDetection.\n      // Without asap, we would be updating the model while still in a ChangeDetection handler, which is disallowed by Angular.\n      combineLatest(this.tocService.activeItemIndex.pipe(subscribeOn(asap)), this.items.changes.pipe(startWith(this.items)))\n          .pipe(takeUntil(this.onDestroy))\n          .subscribe(([index, items]) => {\n            this.activeIndex = index;\n            if (index === null || index >= items.length) {\n              return;\n            }\n\n            const e = items.toArray()[index].nativeElement;\n            const p = e.offsetParent;\n\n            const eRect = e.getBoundingClientRect();\n            const pRect = p.getBoundingClientRect();\n\n            const isInViewport = (eRect.top >= pRect.top) && (eRect.bottom <= pRect.bottom);\n\n            if (!isInViewport) {\n              p.scrollTop += (eRect.top - pRect.top) - (p.clientHeight / 2);\n            }\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this.onDestroy.next(null);\n  }\n\n  toggle(canScroll = true) {\n    this.isCollapsed = !this.isCollapsed;\n    if (canScroll && this.isCollapsed) { this.toTop(); }\n  }\n\n  toTop() {\n    this.scrollService.scrollToTop();\n  }\n}\n\nfunction count<T>(array: T[], fn: (item: T) => boolean) {\n  return array.reduce((result, item) => fn(item) ? result + 1 : result, 0);\n}\n","import { operate } from '../util/lift';\nexport function subscribeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return operate(function (source, subscriber) {\n        subscriber.add(scheduler.schedule(function () { return source.subscribe(subscriber); }, delay));\n    });\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { WithCustomElementComponent } from '../element-registry';\nimport { TocComponent } from './toc.component';\n\n@NgModule({\n  imports: [ CommonModule, MatIconModule ],\n  declarations: [ TocComponent ]\n})\nexport class TocModule implements WithCustomElementComponent {\n  customElementComponent: Type<any> = TocComponent;\n}\n"]}