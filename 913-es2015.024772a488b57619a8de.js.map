{"version":3,"mappings":"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","names":["scrollBehaviorSupported","supportsScrollBehavior","constructor","_viewportRuler","document","this","_previousHTMLStyles","top","left","_isEnabled","_document","attach","enable","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","coerceCssPixelValue","classList","add","disable","html","htmlStyle","bodyStyle","body","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","hasAttached","run","detach","overlayRef","stream","scrolled","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","unsubscribe","element","scrollContainers","some","containerBounds","bottom","right","scrollContainerRect","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","isElementScrolledOutsideView","ScrollStrategyOptions","noop","NoopScrollStrategy","close","config","CloseScrollStrategy","block","BlockScrollStrategy","reposition","RepositionScrollStrategy","ɵfac","t","ɵngcc0","ɵngcc1","DOCUMENT","ɵprov","i0","factory","i1","i1$1","token","providedIn","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","Object","keys","key","undefined","origin","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","connectionPair","scrollableViewProperties","BaseOverlayDispatcher","_attachedOverlays","ngOnDestroy","push","index","indexOf","splice","length","OverlayKeyboardDispatcher","super","_keydownListener","event","overlays","i","_keydownEvents","observers","next","_isAttached","addEventListener","removeEventListener","OverlayOutsideClickDispatcher","_platform","_cursorStyleIsSet","_clickListener","target","_getEventTarget","slice","_outsidePointerEvents","IOS","_cursorOriginalValue","cursor","ɵngcc2","i2","globalsForTest","isTestEnvironment","__karma__","jasmine","jest","Mocha","OverlayContainer","container","_containerElement","parentNode","removeChild","getContainerElement","_createContainer","containerClass","isBrowser","oppositePlatformContainers","querySelectorAll","createElement","st","setAttribute","appendChild","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_locationChanges","Subscription","_backdropClickHandler","_scrollStrategy","_positionStrategy","positionStrategy","portal","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","pipe","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","complete","backdropClick","attachments","detachments","keydownEvents","outsidePointerEvents","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","assign","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","value","updateScrollStrategy","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId","finishDetach","clearTimeout","setTimeout","cssClasses","isAdd","coerceArray","forEach","cssClass","subscription","takeUntil","merge","children","boundingBoxClass","cssUnitPattern","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","hostElement","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","originRect","viewportRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","positions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","y","startX","_isRtl","endX","overlayStartX","overlayStartY","point","rawOverlayRect","getRoundedBoundingClientRect","_getOffset","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","horizontalFit","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","s","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","ConnectedOverlayPositionChange","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","previousWidth","styles","_hasExactPosition","e","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","trim","virtualKeyboardOffset","clientHeight","horizontalStyleProperty","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","scrollable","getElementRef","nativeElement","isOriginClipped","isElementClippedByScrolling","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","ElementRef","Element","destination","source","hasOwnProperty","input","units","split","parseFloat","clientRect","floor","originPos","overlayPos","viewportRuler","platform","overlayContainer","FlexibleConnectedPositionStrategy","withFallbackPosition","onPositionChange","_direction","recalculateLastPosition","ConnectionPositionPair","withDirection","withOffsetX","withOffsetY","wrapperClass","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","_","parent","OverlayPositionBuilder","global","GlobalPositionStrategy","elementRef","ConnectedPositionStrategy","flexibleConnectedTo","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","create","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","OverlayConfig","OverlayRef","id","_appRef","get","ApplicationRef","DomPortalOutlet","ɵngcc3","ɵngcc4","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","InjectionToken","deps","useFactory","OverlayModule","ɵmod","type","ɵinj","providers","imports","BidiModule","PortalModule","ScrollingModule","mediaQueriesForWebkitCompatibility","Set","mediaQueryStyleNode","MediaMatcher","_matchMedia","matchMedia","bind","noopMatchMedia","query","WEBKIT","has","head","sheet","insertRule","console","error","matches","media","addListener","removeListener","BreakpointObserver","_mediaMatcher","_zone","_queries","Map","_destroySubject","isMatched","queries","mediaQuery","_registerQuery","mql","observe","observables","splitQueries","observable","stateObservable","combineLatest","concat","skip","debounceTime","breakpointStates","response","breakpoints","output","Observable","observer","handler","startWith","set","a1","a2","rf","ctx","_r2","action","ctx_r0","data","MAT_SNACK_BAR_DATA","politeness","announcementMessage","duration","horizontalPosition","verticalPosition","MAX_TIMEOUT","pow","containerInstance","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","_open","dismissedByAction","afterDismissed","afterOpened","_onEnter","SimpleSnackBar","snackBarRef","MatSnackBarRef","ɵcmp","selectors","hostAttrs","decls","vars","consts","template","SimpleSnackBar_div_2_Template","message","hasAction","directives","encapsulation","changeDetection","matSnackBarAnimations","snackBarState","trigger","state","opacity","transition","animate","MatSnackBarContainer","BasePortalOutlet","_elementRef","_changeDetectorRef","snackBarConfig","_announceDelay","_destroyed","_onAnnounce","_animationState","attachDomPortal","_assertNotAttached","_applySnackBarClasses","_live","c","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","onAnimationEnd","fromState","toState","_completeExit","onEnter","enter","detectChanges","_screenReaderAnnounce","_announceTimeoutId","onMicrotaskEmpty","panelClasses","Array","isArray","inertElement","querySelector","liveElement","focusedElement","activeElement","HTMLElement","removeAttribute","focus","MatSnackBarConfig","viewQuery","CdkPortalOutlet","_t","first","hostVars","hostBindings","$event","features","MatSnackBarContainer_ng_template_1_Template","animation","MatSnackBarModule","CommonModule","MatButtonModule","MatCommonModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MatSnackBar","_overlay","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","simpleSnackBarComponent","snackBarContainerComponent","handsetCssClass","_openedSnackBarRef","openFromComponent","component","_attach","openFromTemplate","open","_attachSnackBarContainer","injector","Injector","viewContainerRef","useValue","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","TemplateRef","TemplatePortal","$implicit","_createInjector","contentRef","announce","_animateSnackBar","clear","isLeft","isRight","ɵngcc5","ɵngcc6","ɵngcc7","i3","module","random","toString","substring","forceEmbedLayout","clickToLoad","openFile","view","theme","hideExplorer","hideNavigation","hideDevTools","initialPath","encodeURIComponent","devToolsHeight","n","Error","replaceChild","getElementById","newWindow","pending","port","onmessage","payload","__reqid","__success","o","resolve","reject","prototype","request","Promise","postMessage","l","rdc","preview","defineProperty","previewOrigin","writable","editor","path","applyFsDiff","getFsSnapshot","getDependencies","p","vm","ports","r","contentWindow","clearInterval","d","a","setInterval","h","name","warn","join","method","f","title","description","tags","dependencies","JSON","stringify","settings","files","connect","find","openGithubProject","openProject","m","submit","openProjectId","embedGithubProject","src","embedProject","outerHTML","contentDocument","write","embedProjectId","pt","at","ts","typescript","language","code","compile","clearConsole","D","g","O","F","_code","formatDisplayedCode","showMissingCodeMessage","_header","ariaLabelCopy","header","ariaLabelEdit","ngOnChanges","Number","MAX_VALUE","search","substr","setCodeHtml","codeText","getCodeText","pretty","formatCode","getLinenums","codeFormatted","emit","region","codeContainer","innerHTML","textContent","getHtmlFromCode","RegExp","match","doCopy","copier","copyText","logger","log","snackbar","editInStackBlitz","stackblitz","rxjs","M","linenums","parseInt","isNaN","w","b","prettyPrintOne","getPrettyPrintOne","then","R","E","H","z","Y","C","v","createFake","getAttribute","fakeElem","fontSize","border","padding","pageYOffset","scrollTop","select","setSelectionRange","removeFake","execCommand"],"sources":["webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/overlay.js","webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/layout.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/snack-bar.js","webpack:///tools/stackblitz/rxjs.version.js","webpack:///node_modules/@stackblitz/sdk/bundles/sdk.m.js","webpack:///src/app/shared/stackblitz.service.ts","webpack:///src/app/custom-elements/code/code.component.ts","webpack:///src/app/custom-elements/code/code.module.ts","webpack:///src/app/custom-elements/code/pretty-printer.service.ts","webpack:///src/app/shared/copier.service.ts"],"sourcesContent":["import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollDispatcher, ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i1$1 from '@angular/common';\nimport { DOCUMENT, Location } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, NgZone, Inject, Optional, ElementRef, ApplicationRef, ComponentFactoryResolver, Injector, InjectionToken, Directive, EventEmitter, TemplateRef, ViewContainerRef, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _getEventTarget, Platform } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) { return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nScrollStrategyOptions.ɵprov = i0.ɵɵdefineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(i0.ɵɵinject(i1.ScrollDispatcher), i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1$1.DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\nScrollStrategyOptions.ctorParameters = () => [\n    { type: ScrollDispatcher },\n    { type: ViewportRuler },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\nConnectedOverlayPositionChange.ctorParameters = () => [\n    { type: ConnectionPositionPair },\n    { type: ScrollingVisibility, decorators: [{ type: Optional }] }\n];\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = function BaseOverlayDispatcher_Factory(t) { return new (t || BaseOverlayDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nBaseOverlayDispatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function BaseOverlayDispatcher_Factory() { return new BaseOverlayDispatcher(i0.ɵɵinject(i1$1.DOCUMENT)); }, token: BaseOverlayDispatcher, providedIn: \"root\" });\nBaseOverlayDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseOverlayDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document) {\n        super(document);\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener);\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) { return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nOverlayKeyboardDispatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(i0.ɵɵinject(i1$1.DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\nOverlayKeyboardDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform) {\n        super(document);\n        this._platform = _platform;\n        this._cursorStyleIsSet = false;\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click dispatch the mouse event, and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target)) {\n                    break;\n                }\n                overlayRef._outsidePointerEvents.next(event);\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            body.addEventListener('click', this._clickListener, true);\n            body.addEventListener('auxclick', this._clickListener, true);\n            body.addEventListener('contextmenu', this._clickListener, true);\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = function OverlayOutsideClickDispatcher_Factory(t) { return new (t || OverlayOutsideClickDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nOverlayOutsideClickDispatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayOutsideClickDispatcher_Factory() { return new OverlayOutsideClickDispatcher(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: OverlayOutsideClickDispatcher, providedIn: \"root\" });\nOverlayOutsideClickDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayOutsideClickDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst globalsForTest = (typeof window !== 'undefined' ? window : {});\n/**\n * Whether we're in a testing environment.\n * TODO(crisbeto): remove this once we have an overlay testing module or Angular starts tearing\n * down the testing `NgModule` (see https://github.com/angular/angular/issues/18831).\n */\nconst isTestEnvironment = (typeof globalsForTest.__karma__ !== 'undefined' && !!globalsForTest.__karma__) ||\n    (typeof globalsForTest.jasmine !== 'undefined' && !!globalsForTest.jasmine) ||\n    (typeof globalsForTest.jest !== 'undefined' && !!globalsForTest.jest) ||\n    (typeof globalsForTest.Mocha !== 'undefined' && !!globalsForTest.Mocha);\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        const container = this._containerElement;\n        if (container && container.parentNode) {\n            container.parentNode.removeChild(container);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        if (this._platform.isBrowser || isTestEnvironment) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` +\n                `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].parentNode.removeChild(oppositePlatformContainers[i]);\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (isTestEnvironment) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) { return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nOverlayContainer.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: OverlayContainer, providedIn: \"root\" });\nOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        let attachResult = this._portalOutlet.attach(portal);\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .pipe(take(1))\n            .subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this.detachBackdrop();\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = null;\n        }\n        this._previousHostParent = this._pane = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = Object.assign(Object.assign({}, this._config), { direction: dir });\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        let backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        let timeoutId;\n        let finishDetach = () => {\n            // It may not be attached to anything in certain cases (e.g. unit tests).\n            if (backdropToDetach) {\n                backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n                backdropToDetach.removeEventListener('transitionend', finishDetach);\n                if (backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n            }\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement == backdropToDetach) {\n                this._backdropElement = null;\n            }\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n            clearTimeout(timeoutId);\n        };\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', finishDetach);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classList = element.classList;\n        coerceArray(cssClasses).forEach(cssClass => {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            // Also trying to add an empty string to a DOMTokenList will throw.\n            if (cssClass) {\n                isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n            }\n        });\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._previousHostParent.removeChild(this._host);\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = (x + overlay.width) - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = (y + overlay.height) - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlat at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param overlay Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        let virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return (!units || units === 'px') ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height)\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 8.0.0\n */\nclass ConnectedPositionStrategy {\n    constructor(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer)\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n        this.onPositionChange = this._positionStrategy.positionChanges;\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attach this position strategy to an overlay. */\n    attach(overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    }\n    /** Disposes all resources used by the position strategy. */\n    dispose() {\n        this._positionStrategy.dispose();\n    }\n    /** @docs-private */\n    detach() {\n        this._positionStrategy.detach();\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * @docs-private\n     */\n    apply() {\n        this._positionStrategy.apply();\n    }\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    recalculateLastPosition() {\n        this._positionStrategy.reapplyLastPosition();\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    }\n    /**\n     * Adds a new preferred fallback position.\n     * @param originPos\n     * @param overlayPos\n     */\n    withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n        const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        this._preferredPositions.push(position);\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param dir New layout direction.\n     */\n    withDirection(dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if (this._overlayRef) {\n            this._overlayRef.setDirection(dir);\n        }\n        else {\n            this._direction = dir;\n        }\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param offset New offset in the X axis.\n     */\n    withOffsetX(offset) {\n        this._positionStrategy.withDefaultOffsetX(offset);\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param  offset New offset in the Y axis.\n     */\n    withOffsetY(offset) {\n        this._positionStrategy.withDefaultOffsetY(offset);\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked) {\n        this._positionStrategy.withLockedPosition(isLocked);\n        return this;\n    }\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param positions Position pairs to be set on the strategy.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions.slice();\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    setOrigin(origin) {\n        this._positionStrategy.setOrigin(origin);\n        return this;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (shouldBeFlushHorizontally) {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n            styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a relative position strategy.\n     * @param elementRef\n     * @param originPos\n     * @param overlayPos\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * @breaking-change 8.0.0\n     */\n    connectedTo(elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) { return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform), ɵngcc0.ɵɵinject(OverlayContainer)); };\nOverlayPositionBuilder.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform), i0.ɵɵinject(OverlayContainer)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\nOverlayPositionBuilder.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform },\n    { type: OverlayContainer }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }, { type: OverlayContainer }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = function Overlay_Factory(t) { return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location), ɵngcc0.ɵɵinject(OverlayOutsideClickDispatcher)); };\nOverlay.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Overlay, factory: Overlay.ɵfac });\nOverlay.ctorParameters = () => [\n    { type: ScrollStrategyOptions },\n    { type: OverlayContainer },\n    { type: ComponentFactoryResolver },\n    { type: OverlayPositionBuilder },\n    { type: OverlayKeyboardDispatcher },\n    { type: Injector },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Directionality },\n    { type: Location },\n    { type: OverlayOutsideClickDispatcher }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Overlay, [{\n        type: Injectable\n    }], function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: ɵngcc0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: ɵngcc0.Injector }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc3.Directionality }, { type: ɵngcc4.Location }, { type: OverlayOutsideClickDispatcher }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) { return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkOverlayOrigin.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkOverlayOrigin, selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]], exportAs: [\"cdkOverlayOrigin\"] });\nCdkOverlayOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                exportAs: 'cdkOverlayOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() { return this._offsetX; }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() { return this._offsetY; }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() { return this._hasBackdrop; }\n    set hasBackdrop(value) { this._hasBackdrop = coerceBooleanProperty(value); }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() { return this._lockPosition; }\n    set lockPosition(value) { this._lockPosition = coerceBooleanProperty(value); }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() { return this._flexibleDimensions; }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() { return this._growAfterOpen; }\n    set growAfterOpen(value) { this._growAfterOpen = coerceBooleanProperty(value); }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() { return this._push; }\n    set push(value) { this._push = coerceBooleanProperty(value); }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = this._position =\n            this.positionStrategy || this._createPositionStrategy();\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this.origin.elementRef)\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) { return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8)); };\nCdkConnectedOverlay.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkConnectedOverlay, selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]], inputs: { viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkConnectedOverlay.ctorParameters = () => [\n    { type: Overlay },\n    { type: TemplateRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkConnectedOverlay.propDecorators = {\n    origin: [{ type: Input, args: ['cdkConnectedOverlayOrigin',] }],\n    positions: [{ type: Input, args: ['cdkConnectedOverlayPositions',] }],\n    positionStrategy: [{ type: Input, args: ['cdkConnectedOverlayPositionStrategy',] }],\n    offsetX: [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] }],\n    offsetY: [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] }],\n    width: [{ type: Input, args: ['cdkConnectedOverlayWidth',] }],\n    height: [{ type: Input, args: ['cdkConnectedOverlayHeight',] }],\n    minWidth: [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] }],\n    minHeight: [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] }],\n    backdropClass: [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n    panelClass: [{ type: Input, args: ['cdkConnectedOverlayPanelClass',] }],\n    viewportMargin: [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n    scrollStrategy: [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n    open: [{ type: Input, args: ['cdkConnectedOverlayOpen',] }],\n    disableClose: [{ type: Input, args: ['cdkConnectedOverlayDisableClose',] }],\n    transformOriginSelector: [{ type: Input, args: ['cdkConnectedOverlayTransformOriginOn',] }],\n    hasBackdrop: [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n    lockPosition: [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] }],\n    flexibleDimensions: [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n    growAfterOpen: [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n    push: [{ type: Input, args: ['cdkConnectedOverlayPush',] }],\n    backdropClick: [{ type: Output }],\n    positionChange: [{ type: Output }],\n    attach: [{ type: Output }],\n    detach: [{ type: Output }],\n    overlayKeydown: [{ type: Output }],\n    overlayOutsideClick: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                exportAs: 'cdkConnectedOverlay'\n            }]\n    }], function () { return [{ type: Overlay }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { viewportMargin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayViewportMargin']\n        }], open: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOpen']\n        }], disableClose: [{\n            type: Input,\n            args: ['cdkConnectedOverlayDisableClose']\n        }], backdropClick: [{\n            type: Output\n        }], positionChange: [{\n            type: Output\n        }], attach: [{\n            type: Output\n        }], detach: [{\n            type: Output\n        }], overlayKeydown: [{\n            type: Output\n        }], overlayOutsideClick: [{\n            type: Output\n        }], scrollStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayScrollStrategy']\n        }], offsetX: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetX']\n        }], offsetY: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetY']\n        }], hasBackdrop: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHasBackdrop']\n        }], lockPosition: [{\n            type: Input,\n            args: ['cdkConnectedOverlayLockPosition']\n        }], flexibleDimensions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayFlexibleDimensions']\n        }], growAfterOpen: [{\n            type: Input,\n            args: ['cdkConnectedOverlayGrowAfterOpen']\n        }], push: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPush']\n        }], positions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositions']\n        }], origin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOrigin']\n        }], positionStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositionStrategy']\n        }], width: [{\n            type: Input,\n            args: ['cdkConnectedOverlayWidth']\n        }], height: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHeight']\n        }], minWidth: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinWidth']\n        }], minHeight: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinHeight']\n        }], backdropClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayBackdropClass']\n        }], panelClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPanelClass']\n        }], transformOriginSelector: [{\n            type: Input,\n            args: ['cdkConnectedOverlayTransformOriginOn']\n        }] }); })();\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = function OverlayModule_Factory(t) { return new (t || OverlayModule)(); };\nOverlayModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: OverlayModule });\nOverlayModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        Overlay,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[BidiModule, PortalModule, ScrollingModule],\n        ScrollingModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule, PortalModule, ScrollingModule],\n                exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                providers: [\n                    Overlay,\n                    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, { declarations: function () { return [CdkConnectedOverlay,\n        CdkOverlayOrigin]; }, imports: function () { return [BidiModule, PortalModule, ScrollingModule]; }, exports: function () { return [CdkConnectedOverlay,\n        CdkOverlayOrigin,\n        ScrollingModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return _document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null;\n    }\n}\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) { return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nFullscreenOverlayContainer.ɵprov = i0.ɵɵdefineInjectable({ factory: function FullscreenOverlayContainer_Factory() { return new FullscreenOverlayContainer(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: FullscreenOverlayContainer, providedIn: \"root\" });\nFullscreenOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectedPositionStrategy, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵangular_material_src_cdk_overlay_overlay_a, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_b, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_c, BaseOverlayDispatcher as ɵangular_material_src_cdk_overlay_overlay_d };\n\n","import * as i0 from '@angular/core';\nimport { NgModule, Injectable, NgZone } from '@angular/core';\nimport { coerceArray } from '@angular/cdk/coercion';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nimport { Platform } from '@angular/cdk/platform';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nclass LayoutModule {\n}\nLayoutModule.ɵfac = function LayoutModule_Factory(t) { return new (t || LayoutModule)(); };\nLayoutModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: LayoutModule });\nLayoutModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LayoutModule, [{\n        type: NgModule,\n        args: [{}]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode;\n/** A utility for calling matchMedia queries. */\nclass MediaMatcher {\n    constructor(_platform) {\n        this._platform = _platform;\n        this._matchMedia = this._platform.isBrowser && window.matchMedia ?\n            // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n            // call it from a different scope.\n            window.matchMedia.bind(window) :\n            noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n    matchMedia(query) {\n        if (this._platform.WEBKIT) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    }\n}\nMediaMatcher.ɵfac = function MediaMatcher_Factory(t) { return new (t || MediaMatcher)(ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\nMediaMatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function MediaMatcher_Factory() { return new MediaMatcher(i0.ɵɵinject(i1.Platform)); }, token: MediaMatcher, providedIn: \"root\" });\nMediaMatcher.ctorParameters = () => [\n    { type: Platform }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MediaMatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }]; }, null); })();\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            document.head.appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            mediaQueryStyleNode.sheet\n                .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return {\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: () => { },\n        removeListener: () => { }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Utility for checking the matching state of @media queries. */\nclass BreakpointObserver {\n    constructor(_mediaMatcher, _zone) {\n        this._mediaMatcher = _mediaMatcher;\n        this._zone = _zone;\n        /**  A map of all media queries currently being listened for. */\n        this._queries = new Map();\n        /** A subject for all other observables to takeUntil based on. */\n        this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n    ngOnDestroy() {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param value One or more media queries to check.\n     * @returns Whether any of the media queries match.\n     */\n    isMatched(value) {\n        const queries = splitQueries(coerceArray(value));\n        return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param value One or more media queries to check.\n     * @returns A stream of matches for the given queries.\n     */\n    observe(value) {\n        const queries = splitQueries(coerceArray(value));\n        const observables = queries.map(query => this._registerQuery(query).observable);\n        let stateObservable = combineLatest(observables);\n        // Emit the first state immediately, and then debounce the subsequent emissions.\n        stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n        return stateObservable.pipe(map(breakpointStates => {\n            const response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach(({ matches, query }) => {\n                response.matches = response.matches || matches;\n                response.breakpoints[query] = matches;\n            });\n            return response;\n        }));\n    }\n    /** Registers a specific query to be listened for. */\n    _registerQuery(query) {\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return this._queries.get(query);\n        }\n        const mql = this._mediaMatcher.matchMedia(query);\n        // Create callback for match changes and add it is as a listener.\n        const queryObservable = new Observable((observer) => {\n            // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n            // back into the zone because matchMedia is only included in Zone.js by loading the\n            // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n            // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n            // patches it.\n            const handler = (e) => this._zone.run(() => observer.next(e));\n            mql.addListener(handler);\n            return () => {\n                mql.removeListener(handler);\n            };\n        }).pipe(startWith(mql), map(({ matches }) => ({ query, matches })), takeUntil(this._destroySubject));\n        // Add the MediaQueryList to the set of queries.\n        const output = { observable: queryObservable, mql };\n        this._queries.set(query, output);\n        return output;\n    }\n}\nBreakpointObserver.ɵfac = function BreakpointObserver_Factory(t) { return new (t || BreakpointObserver)(ɵngcc0.ɵɵinject(MediaMatcher), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nBreakpointObserver.ɵprov = i0.ɵɵdefineInjectable({ factory: function BreakpointObserver_Factory() { return new BreakpointObserver(i0.ɵɵinject(MediaMatcher), i0.ɵɵinject(i0.NgZone)); }, token: BreakpointObserver, providedIn: \"root\" });\nBreakpointObserver.ctorParameters = () => [\n    { type: MediaMatcher },\n    { type: NgZone }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BreakpointObserver, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: MediaMatcher }, { type: ɵngcc0.NgZone }]; }, null); })();\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n    return queries.map(query => query.split(','))\n        .reduce((a1, a2) => a1.concat(a2))\n        .map(query => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nconst Breakpoints = {\n    XSmall: '(max-width: 599.98px)',\n    Small: '(min-width: 600px) and (max-width: 959.98px)',\n    Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n    Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599.98px) and (orientation: portrait), ' +\n        '(max-width: 959.98px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };\n\n","import * as i1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { Platform } from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2 from '@angular/cdk/a11y';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/layout';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/portal';\nimport * as ɵngcc5 from '@angular/cdk/overlay';\nimport * as ɵngcc6 from '@angular/cdk/a11y';\nimport * as ɵngcc7 from '@angular/cdk/layout';\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) { if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.action(); });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\n} }\nfunction MatSnackBarContainer_ng_template_1_Template(rf, ctx) { }\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(() => this.dismiss());\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) { return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA)); };\nSimpleSnackBar.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SimpleSnackBar, selectors: [[\"simple-snack-bar\"]], hostAttrs: [1, \"mat-simple-snackbar\"], decls: 3, vars: 2, consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]], template: function SimpleSnackBar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\");\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MatButton], styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"], encapsulation: 2, changeDetection: 0 });\nSimpleSnackBar.ctorParameters = () => [\n    { type: MatSnackBarRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n        type: Component,\n        args: [{\n                selector: 'simple-snack-bar',\n                template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-simple-snackbar'\n                },\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"]\n            }]\n    }], function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DATA]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        // Mark this element with an 'exit' attribute to indicate that the snackbar has\n        // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n        // test harness.\n        this._elementRef.nativeElement.setAttribute('mat-exit', '');\n        // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n        // long enough to visually read it either, so clear the timeout for announcing.\n        clearTimeout(this._announceTimeoutId);\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._onExit.next();\n            this._onExit.complete();\n        });\n    }\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    _applySnackBarClasses() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) { return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig)); };\nMatSnackBarContainer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSnackBarContainer, selectors: [[\"snack-bar-container\"]], viewQuery: function MatSnackBarContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [1, \"mat-snack-bar-container\"], hostVars: 1, hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) { return ctx.onAnimationEnd($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 2, consts: [[\"aria-hidden\", \"true\"], [\"cdkPortalOutlet\", \"\"]], template: function MatSnackBarContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatSnackBarContainer_ng_template_1_Template, 0, 0, \"ng-template\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(2, \"div\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"aria-live\", ctx._live)(\"role\", ctx._role);\n    } }, directives: [ɵngcc4.CdkPortalOutlet], styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"], encapsulation: 2, data: { animation: [matSnackBarAnimations.snackBarState] } });\nMatSnackBarContainer.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Platform },\n    { type: MatSnackBarConfig }\n];\nMatSnackBarContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n        type: Component,\n        args: [{\n                selector: 'snack-bar-container',\n                template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\",\n                // In Ivy embedded views will be change detected from their declaration place, rather than\n                // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n                // because it might cause snack bars that were opened from a template not to be out of date.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                animations: [matSnackBarAnimations.snackBarState],\n                host: {\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                },\n                styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc3.Platform }, { type: MatSnackBarConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) { return new (t || MatSnackBarModule)(); };\nMatSnackBarModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSnackBarModule });\nMatSnackBarModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            OverlayModule,\n            PortalModule,\n            CommonModule,\n            MatButtonModule,\n            MatCommonModule,\n        ],\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, { declarations: function () { return [MatSnackBarContainer,\n        SimpleSnackBar]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        CommonModule,\n        MatButtonModule,\n        MatCommonModule]; }, exports: function () { return [MatSnackBarContainer,\n        MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n        /** The component that should be rendered as the snack bar's simple component. */\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        /** The container component that attaches the provided template or component. */\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        /** The CSS class to apply for handset mode. */\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = Object.assign(Object.assign({}, this._defaultConfig), config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }]\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(state => {\n            const classList = overlayRef.overlayElement.classList;\n            state.matches ? classList.add(this.handsetCssClass) : classList.remove(this.handsetCssClass);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data }\n            ]\n        });\n    }\n}\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) { return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc5.Overlay), ɵngcc0.ɵɵinject(ɵngcc6.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc7.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); };\nMatSnackBar.ɵprov = i0.ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i2.LiveAnnouncer), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i3.BreakpointObserver), i0.ɵɵinject(MatSnackBar, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\nMatSnackBar.ctorParameters = () => [\n    { type: Overlay },\n    { type: LiveAnnouncer },\n    { type: Injector },\n    { type: BreakpointObserver },\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n        type: Injectable,\n        args: [{ providedIn: MatSnackBarModule }]\n    }], function () { return [{ type: ɵngcc5.Overlay }, { type: ɵngcc6.LiveAnnouncer }, { type: ɵngcc0.Injector }, { type: ɵngcc7.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: MatSnackBarConfig, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n\n","// Exposes the current RxJS version number from the library's package.json\n// for usage in TypeScript files.\n// (Since said package.json is outside of this TypeScript project, it's not\n// available for a direct TypeScript import).\n\nmodule.exports = require('../../../package.json').version;\n","function e(e){return e&&e.origin?e.origin:\"https://stackblitz.com\"}var t=\"300\";function n(){return Math.random().toString(36).substring(7)}function i(e){var t=\"\";return e?(e.forceEmbedLayout&&(t+=\"embed=1\"),e.clickToLoad&&(t+=(t.length?\"&\":\"\")+\"ctl=1\"),e.openFile&&(t+=(t.length?\"&\":\"\")+\"file=\"+e.openFile),!e.view||\"preview\"!==e.view&&\"editor\"!==e.view||(t+=(t.length?\"&\":\"\")+\"view=\"+e.view),e.theme&&(t+=(t.length?\"&\":\"\")+\"theme=\"+e.theme),e.hideExplorer&&(t+=(t.length?\"&\":\"\")+\"hideExplorer=1\"),e.hideNavigation&&(t+=(t.length?\"&\":\"\")+\"hideNavigation=1;\"),e.hideDevTools&&(t+=(t.length?\"&\":\"\")+\"hidedevtools=1\"),e.initialPath&&(t+=(t.length?\"&\":\"\")+\"initialpath=\"+encodeURIComponent(e.initialPath)),\"number\"==typeof e.devToolsHeight&&e.devToolsHeight>0&&e.devToolsHeight<100&&(t+=(t.length?\"&\":\"\")+\"devtoolsheight=\"+e.devToolsHeight),t.length?\"?\"+t:t):t}function o(e,t,n){if(null===e.parentNode)throw new Error(\"Invalid Element\");t.id=e.id,d(t,n),e.parentNode.replaceChild(t,e)}function r(e){if(\"string\"==typeof e){var t=document.getElementById(e);if(null!==t)return t}else if(e instanceof HTMLElement)return e;throw new Error(\"Invalid Element\")}function a(e){return e&&!1===e.newWindow?\"_self\":\"_blank\"}function d(e,n){n&&(n.hasOwnProperty(\"height\")&&(e.height=\"\"+n.height),n.hasOwnProperty(\"width\")&&(e.width=\"\"+n.width)),e.height||(e.height=t),e.width||e.setAttribute(\"style\",\"width:100%;\")}var c=function(e){var t=this;this.pending={},this.port=e,this.port.onmessage=function(e){if(e.data.payload.__reqid){var n=e.data.payload.__reqid,i=e.data.payload.__success;if(t.pending[n]){if(delete e.data.payload.__reqid,delete e.data.payload.__success,i){var o=0===Object.keys(e.data.payload).length&&e.data.payload.constructor===Object?null:e.data.payload;t.pending[n].resolve(o)}else{var r=e.data.payload.error?e.data.type+\": \"+e.data.payload.error:e.data.type;t.pending[n].reject(r)}delete t.pending[n]}}}};c.prototype.request=function(e){var t=this,i=n();return new Promise(function(n,o){t.pending[i]={resolve:n,reject:o},e.payload.__reqid=i,t.port.postMessage(e)})};var l=function(e,t){var n=this;this.rdc=new c(e),this.preview={},Object.defineProperty(this.preview,\"origin\",{value:t.previewOrigin,writable:!1}),this.editor={openFile:function(e){return n.rdc.request({type:\"SDK_OPEN_FILE\",payload:{path:e}})}}};l.prototype.applyFsDiff=function(e){return this.rdc.request({type:\"SDK_APPLY_FS_DIFF\",payload:e})},l.prototype.getFsSnapshot=function(){return this.rdc.request({type:\"SDK_GET_FS_SNAPSHOT\",payload:{}})},l.prototype.getDependencies=function(){return this.rdc.request({type:\"SDK_GET_DEPS_SNAPSHOT\",payload:{}})};var p=[],s=function(e){var t=this;this.id=n(),this.element=e,this.pending=new Promise(function(e,n){var i=function(n){n.data.action&&\"SDK_INIT_SUCCESS\"===n.data.action&&n.data.id===t.id&&(t.vm=new l(n.ports[0],n.data.payload),e(t.vm),r())},o=function(){t.element.contentWindow&&t.element.contentWindow.postMessage({action:\"SDK_INIT\",id:t.id},\"*\")};function r(){window.clearInterval(d),window.removeEventListener(\"message\",i)}window.addEventListener(\"message\",i),o();var a=0,d=window.setInterval(function(){if(t.vm)r();else{if(a>=20)return r(),n(\"Timeout: Unable to establish a connection with the StackBlitz VM\"),void p.forEach(function(e,n){e.id===t.id&&p.splice(n,1)});a++,o()}},500)}),p.push(this)},u=function(e){var t=e instanceof Element?\"element\":\"id\",n=p.find(function(n){return n[t]===e});return n||null},h=[\"typescript\",\"create-react-app\",\"angular-cli\",\"javascript\",\"polymer\",\"vue\"];function f(e,t){var n=document.createElement(\"input\");return n.type=\"hidden\",n.name=e,n.value=t,n}function m(e){-1===h.indexOf(e.template)&&console.warn(\"Unsupported project template, must be one of: \"+h.join(\", \"));var t=document.createElement(\"form\");return t.method=\"POST\",t.setAttribute(\"style\",\"display:none;\"),t.appendChild(f(\"project[title]\",e.title)),t.appendChild(f(\"project[description]\",e.description)),t.appendChild(f(\"project[template]\",e.template)),e.tags&&e.tags.forEach(function(e){t.appendChild(f(\"project[tags][]\",e))}),e.dependencies&&t.appendChild(f(\"project[dependencies]\",JSON.stringify(e.dependencies))),e.settings&&t.appendChild(f(\"project[settings]\",JSON.stringify(e.settings))),Object.keys(e.files).forEach(function(n){t.appendChild(f(\"project[files][\"+n+\"]\",e.files[n]))}),t}function v(t,n){var o=m(t);return o.action=e(n)+\"/run\"+i(n),o.id=\"sb\",\"<html><head><title></title></head><body>\"+o.outerHTML+\"<script>document.getElementById('sb').submit();<\\/script></body></html>\"}function g(t,n){var o=m(t);o.action=e(n)+\"/run\"+i(n),o.target=a(n),document.body.appendChild(o),o.submit(),document.body.removeChild(o)}var y={connect:function(e){if(!e||!e.contentWindow)return Promise.reject(\"Provided element is not an iframe.\");var t=u(e);return t?t.pending:new s(e).pending},openGithubProject:function(t,n){window.open(e(n)+\"/github/\"+t+i(n),a(n))},openProject:function(e,t){g(e,t)},openProjectId:function(t,n){window.open(e(n)+\"/edit/\"+t+i(n),a(n))},embedGithubProject:function(t,n,a){var d=r(t),c=document.createElement(\"iframe\");return c.src=e(a)+\"/github/\"+n+i(a),o(d,c,a),y.connect(c)},embedProject:function(e,t,n){var i=r(e),a=v(t,n),d=document.createElement(\"iframe\");return o(i,d,n),d.contentDocument&&d.contentDocument.write(a),y.connect(d)},embedProjectId:function(t,n,a){var d=r(t),c=document.createElement(\"iframe\");return c.src=e(a)+\"/edit/\"+n+i(a),o(d,c,a),y.connect(c)}};export default y;\n","import StackBlitzkSDK from '@stackblitz/sdk';\nimport { Injectable } from '@angular/core';\nimport { Project } from '@stackblitz/sdk/typings/interfaces';\n\ninterface StackBlitzExampleConfig {\n  code: string;\n  language: string;\n  html?: string;\n  dependencies: {\n    [name: string]: string;\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StackblitzService {\n  openProject(config: StackBlitzExampleConfig) {\n    const codeExtension: 'js' | string= {\n      'ts': 'ts',\n      'typescript': 'ts'\n    }[config.language] || 'js';\n\n    const template: Project['template'] = codeExtension === 'ts'\n      ? 'typescript'\n      : 'javascript';\n\n    StackBlitzkSDK.openProject({\n      files: {\n        'index.html': config.html || '',\n        [`index.${codeExtension}`]: config.code\n      },\n      title: 'RxJS example',\n      description: 'RxJS example',\n      template,\n      tags: ['rxjs', 'demo'],\n      dependencies: config.dependencies,\n      settings: {\n        compile: {\n          trigger: 'auto',\n          action: 'refresh',\n          clearConsole: true,\n        },\n      }\n    }, {\n        devToolsHeight: 50\n    });\n  }\n}\n","import { Component, ElementRef, EventEmitter, Input, OnChanges, Output, ViewChild } from '@angular/core';\nimport { Logger } from 'app/shared/logger.service';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { tap } from 'rxjs/operators';\nimport { StackblitzService } from 'app/shared/stackblitz.service';\nimport version from '../../../../tools/stackblitz/rxjs.version';\n\n/**\n * If linenums is not set, this is the default maximum number of lines that\n * an example can display without line numbers.\n */\nconst DEFAULT_LINE_NUMS_COUNT = 10;\n\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\n@Component({\n  selector: 'aio-code',\n  template: `\n    <pre class=\"prettyprint lang-{{language}}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabelCopy\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <button *ngIf=\"!hideCopy\" class=\"material-icons edit-button no-print\"\n        title=\"Edit in StackBlitz\"\n        [attr.aria-label]=\"ariaLabelEdit\"\n        (click)=\"editInStackBlitz()\">\n        <span aria-hidden=\"true\">open_in_new</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n    `\n})\nexport class CodeComponent implements OnChanges {\n  ariaLabelCopy = '';\n  ariaLabelEdit = '';\n\n  /** The code to be copied when clicking the copy button, this should not be HTML encoded */\n  private codeText: string;\n\n  /** Code that should be formatted with current inputs and displayed in the view. */\n  set code(code: string) {\n    this._code = code;\n\n    if (!this._code || !this._code.trim()) {\n      this.showMissingCodeMessage();\n    } else {\n      this.formatDisplayedCode();\n    }\n  }\n  get code(): string { return this._code; }\n  _code: string;\n\n  /** Whether the copy button should be shown. */\n  @Input() hideCopy: boolean;\n\n  /** Language to render the code (e.g. javascript, dart, typescript). */\n  @Input() language: string;\n\n  /**\n   * Whether to display line numbers:\n   *  - If false: hide\n   *  - If true: show\n   *  - If number: show but start at that number\n   */\n  @Input() linenums: boolean | number | string;\n\n  /** Path to the source of the code. */\n  @Input() path: string;\n\n  /** Region of the source of the code being displayed. */\n  @Input() region: string;\n\n  /** Optional header to be displayed above the code. */\n  @Input()\n  set header(header: string) {\n    this._header = header;\n    this.ariaLabelCopy = this.header ? `Copy code snippet from ${this.header}` : '';\n    this.ariaLabelEdit = this.header ? `Edit code snippet from ${this.header} in StackBlitz` : '';\n  }\n  get header(): string { return this._header; }\n  private _header: string;\n\n  @Output() codeFormatted = new EventEmitter<void>();\n\n  /** The element in the template that will display the formatted code. */\n  @ViewChild('codeContainer', { static: true }) codeContainer: ElementRef;\n\n  constructor(\n    private snackbar: MatSnackBar,\n    private pretty: PrettyPrinter,\n    private copier: CopierService,\n    private logger: Logger,\n    private stackblitz: StackblitzService) { }\n\n  ngOnChanges() {\n    // If some inputs have changed and there is code displayed, update the view with the latest\n    // formatted code.\n    if (this.code) {\n      this.formatDisplayedCode();\n    }\n  }\n\n  private formatDisplayedCode() {\n    const leftAlignedCode = leftAlign(this.code);\n    this.setCodeHtml(leftAlignedCode); // start with unformatted code\n    this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n\n    this.pretty\n        .formatCode(leftAlignedCode, this.language, this.getLinenums(leftAlignedCode))\n        .pipe(tap(() => this.codeFormatted.emit()))\n        .subscribe(c => this.setCodeHtml(c), err => { /* ignore failure to format */ }\n    );\n  }\n\n  /** Sets the message showing that the code could not be found. */\n  private showMissingCodeMessage() {\n    const src = this.path ? this.path + (this.region ? '#' + this.region : '') : '';\n    const srcMsg = src ? ` for\\n${src}` : '.';\n    this.setCodeHtml(`<p class=\"code-missing\">The code sample is missing${srcMsg}</p>`);\n  }\n\n  /** Sets the innerHTML of the code container to the provided code string. */\n  private setCodeHtml(formattedCode: string) {\n    // **Security:** Code example content is provided by docs authors and as such its considered to\n    // be safe for innerHTML purposes.\n    this.codeContainer.nativeElement.innerHTML = formattedCode;\n  }\n\n  /** Gets the textContent of the displayed code element. */\n  private getCodeText() {\n    // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n    // container as text, before prettifying it.\n    // We take the textContent because we don't want it to be HTML encoded.\n    return this.codeContainer.nativeElement.textContent;\n  }\n\n  /** Extracts html placed in the `// html: ` comment in the code.  */\n  private getHtmlFromCode(code: string): string {\n    const pattern = new RegExp('// html: (.*)');\n    const matches = code.match(pattern);\n\n    return matches\n      ? matches[1]\n      : '';\n  }\n\n  /** Copies the code snippet to the user's clipboard. */\n  doCopy() {\n    const code = this.codeText;\n    const successfullyCopied = this.copier.copyText(code);\n\n    if (successfullyCopied) {\n      this.logger.log('Copied code to clipboard:', code);\n      this.snackbar.open('Code Copied', '', { duration: 800 });\n    } else {\n      this.logger.error(new Error(`ERROR copying code to clipboard: \"${code}\"`));\n      this.snackbar.open('Copy failed. Please try again!', '', { duration: 800 });\n    }\n  }\n\n  editInStackBlitz() {\n    this.stackblitz.openProject({\n      code: this.codeText,\n      language: this.language,\n      dependencies: {\n        rxjs: version\n      },\n      html: this.getHtmlFromCode(this.codeText)\n    });\n  }\n\n  /** Gets the calculated value of linenums (boolean/number). */\n  getLinenums(code: string) {\n    const linenums =\n      typeof this.linenums === 'boolean' ? this.linenums :\n      this.linenums === 'true' ? true :\n      this.linenums === 'false' ? false :\n      typeof this.linenums === 'string' ? parseInt(this.linenums, 10) :\n      this.linenums;\n\n    // if no linenums, enable line numbers if more than one line\n    return linenums == null || isNaN(linenums as number) ?\n        (code.match(/\\n/g) || []).length > DEFAULT_LINE_NUMS_COUNT : linenums;\n  }\n}\n\nfunction leftAlign(text: string): string {\n  let indent = Number.MAX_VALUE;\n\n  const lines = text.split('\\n');\n  lines.forEach(line => {\n    const lineIndent = line.search(/\\S/);\n    if (lineIndent !== -1) {\n      indent = Math.min(lineIndent, indent);\n    }\n  });\n\n  return lines.map(line => line.substr(indent)).join('\\n').trim();\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeComponent } from './code.component';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\n\n@NgModule({\n  imports: [ CommonModule, MatSnackBarModule ],\n  declarations: [ CodeComponent ],\n  exports: [ CodeComponent ],\n  providers: [ PrettyPrinter, CopierService ]\n})\nexport class CodeModule { }\n","import { Injectable } from '@angular/core';\n\nimport { from as fromPromise, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\ntype PrettyPrintOne = (code: string, language?: string, linenums?: number | boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n  private prettyPrintOne: Observable<PrettyPrintOne>;\n\n  constructor(private logger: Logger) {\n    this.prettyPrintOne = fromPromise(this.getPrettyPrintOne()).pipe(share());\n  }\n\n  private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n    const ppo = (window as any).prettyPrintOne;\n    return ppo ? Promise.resolve(ppo) :\n      // `prettyPrintOne` is not on `window`, which means `prettify.js` has not been loaded yet.\n      // Import it; as a side-effect it will add `prettyPrintOne` on `window`.\n      import('assets/js/prettify.js' as any)\n        .then(\n          () => (window as any).prettyPrintOne,\n          err => {\n            const msg = `Cannot get prettify.js from server: ${err.message}`;\n            this.logger.error(new Error(msg));\n            // return a pretty print fn that always fails.\n            return () => { throw new Error(msg); };\n          });\n  }\n\n  /**\n   * Format code snippet as HTML\n   * @param {string} code - the code snippet to format; should already be HTML encoded\n   * @param {string} [language] - The language of the code to render (could be javascript, html, typescript, etc)\n   * @param {string|number} [linenums] - Whether to display line numbers:\n   *  - false: don't display\n   *  - true: do display\n   *  - number: do display but start at the given number\n   * @returns Observable<string> - Observable of formatted code\n   */\n  formatCode(code: string, language?: string, linenums?: number | boolean) {\n    return this.prettyPrintOne.pipe(\n      map(ppo => {\n        try {\n          return ppo(code, language, linenums);\n        } catch (err) {\n          const msg = `Could not format code that begins '${code.substr(0, 50)}...'.`;\n          console.error(msg, err);\n          throw new Error(msg);\n        }\n      }),\n      first(),  // complete immediately\n    );\n  }\n}\n","import { Injectable } from \"@angular/core\";\n/**\n * This class is based on the code in the following projects:\n *\n * - https://github.com/zenorocha/select\n * - https://github.com/zenorocha/clipboard.js/\n *\n * Both released under MIT license - © Zeno Rocha\n */\n\n\n@Injectable()\nexport class CopierService {\n    private fakeElem: HTMLTextAreaElement|null;\n\n    /**\n     * Creates a fake textarea element, sets its value from `text` property,\n     * and makes a selection on it.\n     */\n    createFake(text: string) {\n      const isRTL = document.documentElement.getAttribute('dir') === 'rtl';\n\n      // Create a fake element to hold the contents to copy\n      this.fakeElem = document.createElement('textarea');\n\n      // Prevent zooming on iOS\n      this.fakeElem.style.fontSize = '12pt';\n\n      // Reset box model\n      this.fakeElem.style.border = '0';\n      this.fakeElem.style.padding = '0';\n      this.fakeElem.style.margin = '0';\n\n      // Move element out of screen horizontally\n      this.fakeElem.style.position = 'absolute';\n      this.fakeElem.style[ isRTL ? 'right' : 'left' ] = '-9999px';\n\n      // Move element to the same position vertically\n      const yPosition = window.pageYOffset || document.documentElement.scrollTop;\n      this.fakeElem.style.top = yPosition + 'px';\n\n      this.fakeElem.setAttribute('readonly', '');\n      this.fakeElem.value = text;\n\n      document.body.appendChild(this.fakeElem);\n\n      this.fakeElem.select();\n      this.fakeElem.setSelectionRange(0, this.fakeElem.value.length);\n    }\n\n    removeFake() {\n      if (this.fakeElem) {\n        document.body.removeChild(this.fakeElem);\n        this.fakeElem = null;\n      }\n    }\n\n    copyText(text: string) {\n      try {\n        this.createFake(text);\n        return document.execCommand('copy');\n      } catch (err) {\n        return false;\n      } finally {\n        this.removeFake();\n      }\n    }\n}\n"]}