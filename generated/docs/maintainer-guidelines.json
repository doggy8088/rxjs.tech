{
  "id": "maintainer-guidelines",
  "title": "",
  "contents": "\n<div class=\"content\">\n<h1 id=\"maintainer-guidelines\" translation-result=\"on\">維護者指南<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"maintainer-guidelines#maintainer-guidelines\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"maintainer-guidelines\">Maintainer Guidelines<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"maintainer-guidelines#maintainer-guidelines\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">這些是此儲存庫維護者的指南，（大部分）<a href=\"https://github.com/ReactiveX/RxJS/issues/121#issue-97747542\">由 His Beardliness @jeffbcross 贈送給我們</a>。對於那些負責審查和合並拉取請求以及以其他方式引導社群的人來說，它們是可以生存的詞。隨著值得信賴的維護者名單的增長，我們希望這些指南幾乎保持不變（但總是歡迎提出建議）。</p><p translation-origin=\"off\">These are guidelines for maintainers of this repository as (mostly) <a href=\"https://github.com/ReactiveX/RxJS/issues/121#issue-97747542\">gifted to us by</a>\nHis Beardliness, @jeffbcross. They are words to live by for those that are tasked with reviewing and merging pull requests and otherwise shepherding the community. As the roster of trusted maintainers grows, we'll expect these guidelines to stay pretty much the same (but suggestions are always welcome).</p>\n\n<h3 id=\"the-10-6-commandments\" translation-result=\"on\">這<del>10</del> 6 誡命<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"maintainer-guidelines#the-10-6-commandments\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"the-10-6-commandments\">The <del>10</del> 6 Commandments<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"maintainer-guidelines#the-10-6-commandments\"><i class=\"material-icons\">link</i></a></h3>\n\n<ul>\n<li>\n<p translation-result=\"on\"><strong><a href=\"../CODE_OF_CONDUCT.md\">行為準則</a></strong>。我們應該樹立一個好榜樣，歡迎所有人。我們應該聽取社群中每個人的所有反饋，並尊重他們的觀點和意見。</p><p translation-origin=\"off\"><strong><a href=\"../CODE_OF_CONDUCT.md\">Code of Conduct</a></strong>. We should be setting a good example and be welcoming to all. We should be listening to all feedback from everyone in our community and respect their viewpoints and opinions.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><strong> 確保 PR 符合<a href=\"../CONTRIBUTING.md\">貢獻指南</a></strong>。保持我們的程式碼庫和儲存庫一致是很重要的。做到這一點的最好方法是瞭解並執行貢獻指南。</p><p translation-origin=\"off\"><strong>Be sure PRs meet <a href=\"../CONTRIBUTING.md\">Contribution Guidelines</a></strong>. It's important we keep our code base and repository consistent. The best way to do this is to know and enforce the contribution guidelines.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><strong> 乾淨、平坦的送出歷史 </strong>。我們從不點選 PR 上的綠色合併按鈕，而是拉下 PR 分支並將其重新定位為 master，然後將 master 替換為 PR 分支。請參閱<a href=\"https://gist.github.com/jeffbcross/307c6da45d26e29030ef\">範例要點</a>。這減少了送出歷史中的噪音，刪除了所有合併送出，並保持歷史平坦。平坦的歷史有利於分析送出祖先的工具/指令碼。</p><p translation-origin=\"off\"><strong>Clean, flat commit history</strong>. We never click the green merge button on PRs, but instead we pull down the PR branch and rebase it against master then replace master with the PR branch. See\n<a href=\"https://gist.github.com/jeffbcross/307c6da45d26e29030ef\">example gist</a>. This reduces noise in the commit history, removing all of the merge commits, and keeps history flat. The flat history is beneficial to tools/scripts that analyze commit ancestry.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><strong> 永遠的綠色大師 </strong>。失敗的 master 建立往往會級聯到其他損壞的建立，並且其他貢獻者對損壞的 master 進行重新定位會感到沮喪。我們的大部分部署和其他基礎設施都基於 master 始終為綠色的假設，在 Travis 確認 PR 為綠色之前不應合併任何內容，即使對於看似微不足道的更改也是如此。任何東西都不應該合併到一個紅色的主人身上，誰打破它就應該放下所有東西並立即修復它。修復應該作為 PR 送出並驗證為綠色，而不是立即合併到 master。</p><p translation-origin=\"off\"><strong>Always green master</strong>. Failing master builds tend to cascade into other broken builds, and frustration among other contributors who have rebased against a broken master. Much of our deployment and other infrastructure is based on the assumption that master is always green, nothing should be merged before Travis has confirmed that a PR is green, even for seemingly insignificant changes. Nothing should be merged into a red master, and whomever broke it should drop everything and fix it right away. Fixes\nshould be submitted as a PR and verified as green instead of immediately merging to master.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><strong> 沒有力量推動掌握 </strong>。只有在極少數情況下才會強制推送到 master，並且應該提前通知其他維護者。合理強制推送的最常見情況是送出帶有無效訊息的推送。應儘快用力推動，以減少副作用。</p><p translation-origin=\"off\"><strong>No force pushes to master</strong>. Only in rare circumstances should a force push to master be made, and other maintainers should be notified beforehand. The most common situation for a justified force push is when a commit has been pushed with an invalid message. The force push should be made as soon as possible to reduce side effects.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><strong> 小而合乎邏輯的送出 </strong>。PR 應該專注於單個問題，儘管將問題分解為幾個邏輯送出可能是合理的。例如，全域重新命名可能最好分解為重命名所有檔案的單個送出，然後是重新命名檔案中的符號的送出。這使得審查過程更簡單，因此可以很容易地理解大量送出（符號被重新命名）的差異，而不是兩者都在同一個送出中完成，在這種情況下，github 只會顯示一個已刪除的檔案和一個新增的檔案。</p><p translation-origin=\"off\"><strong>Small, logical commits</strong>. A PR should be focused on a single problem, though that problem may be reasonable to be broken into a few logical commits. For example, a global renaming may be best to be broken into a single commit that renames all files, and then a commit that renames symbols within files. This makes the review process simpler easier, so the diff of the meaty commit (where symbols are renamed) can be easily understood than if both were done in the same commit, in which case github would just\nshow a deleted file and an added file.</p>\n\n</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - ../CODE_OF_CONDUCT.md\n - ../CONTRIBUTING.md\n - maintainer-guidelines#maintainer-guidelines\n - maintainer-guidelines#the-10-6-commandments\n - https://gist.github.com/jeffbcross/307c6da45d26e29030ef\n - https://github.com/ReactiveX/RxJS/issues/121#issue-97747542\n-->"
}