{
  "id": "guide/operators",
  "title": "",
  "contents": "\n<div class=\"content\">\n<h1 id=\"rxjs-operators\" translation-result=\"on\">RxJS 運算子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#rxjs-operators\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"rxjs-operators\">RxJS Operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#rxjs-operators\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">儘管 Observable 是基礎，但 RxJS 的<em>運算子</em>是最有用的。運算子是能讓你以宣告方式輕鬆組合複雜非同步程式碼的基本構造塊。</p><p translation-origin=\"off\">RxJS is mostly useful for its <em>operators</em>, even though the Observable is the foundation. Operators are the essential pieces that allow complex asynchronous code to be easily composed in a declarative manner.</p>\n\n<h2 id=\"what-are-operators\" translation-result=\"on\">什麼是運算子？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#what-are-operators\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"what-are-operators\">What are operators?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#what-are-operators\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">運算子是<strong>函式</strong>。有兩種運算子：</p><p translation-origin=\"off\">Operators are <strong>functions</strong>. There are two kinds of operators:</p>\n\n<p translation-result=\"on\">可聯入通道的<strong>運算子</strong>是可以使用語法 <code>observableInstance.pipe(operator())</code> 聯入 Observables 通道的型別。其中包括 <a href=\"/api/operators/filter\"><code>filter(...)</code></a> 和 <a href=\"/api/operators/mergeMap\"><code>mergeMap(...)</code></a>。呼叫時，它們不會<em>更改</em>現有的 Observable 實例。相反，它們回傳一個<em>新</em>的 Observable，其訂閱邏輯是基於第一個 Observable 的。</p><p translation-origin=\"off\"><strong>Pipeable Operators</strong> are the kind that can be piped to Observables using the syntax <code>observableInstance.pipe(operator())</code>. These include, <a href=\"/api/operators/filter\"><code>filter(...)</code></a>, and <a href=\"/api/operators/mergeMap\"><code>mergeMap(...)</code></a>. When called, they do not <em>change</em> the existing Observable instance. Instead, they return a <em>new</em> Observable, whose subscription logic is based on the first Observable.</p>\n\n<p translation-result=\"on\"><span class=\"informal\">可聯入通道的運算子是一個以 Observable 作為輸入並回傳另一個 Observable 的函式。這是一個純操作：之前的 Observable 保持不變。</span></p><p translation-origin=\"off\"><span class=\"informal\">A Pipeable Operator is a function that takes an Observable as its input and returns another Observable. It is a pure operation: the previous Observable stays unmodified.</span></p>\n\n<p translation-result=\"on\">可聯入通道的運算子本質上是一個純函式，它將一個 Observable 作為輸入並生成另一個 Observable 作為輸出。訂閱此輸出 Observable 也會同時訂閱其輸入 Observable。</p><p translation-origin=\"off\">A Pipeable Operator is essentially a pure function which takes one Observable as input and generates another Observable as output. Subscribing to the output Observable will also subscribe to the input Observable.</p>\n\n<p translation-result=\"on\"><strong>建立運算子</strong>是另一種運算子，可以作為獨立函式呼叫以建立新的 Observable。例如： <code><a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1, 2, 3)</code> 建立一個 observable，它將一個接一個地發出 1、2 和 3。建立運算子將在後麵的部分中更詳細地討論。</p><p translation-origin=\"off\"><strong>Creation Operators</strong> are the other kind of operator, which can be called as standalone functions to create a new Observable. For example: <code><a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1, 2, 3)</code> creates an observable that will emit 1, 2, and 3, one right after another. Creation operators will be discussed in more detail in a later section.</p>\n\n<p translation-result=\"on\">例如，名為 <a href=\"/api/operators/map\"><code>map</code></a> 的運算子類似於同名的 Array 方法。正如 <code>[1, 2, 3].map(x => x * x)</code> 將產生 <code>[1, 4, 9]</code> 一樣，它建立的 Observable 如下：</p><p translation-origin=\"off\">For example, the operator called <a href=\"/api/operators/map\"><code>map</code></a> is analogous to the Array method of the same name. Just as <code>[1, 2, 3].map(x => x * x)</code> will yield <code>[1, 4, 9]</code>, the Observable created like this:</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/map\" class=\"code-anchor\">map</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\n<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1, 2, 3)\n  .pipe(<a href=\"api/index/function/map\" class=\"code-anchor\">map</a>((x) => x * x))\n  .subscribe((v) => console.log(`value: ${v}`));\n\n// Logs:\n// value: 1\n// value: 4\n// value: 9\n</code-example>\n<p translation-result=\"on\">這將發出 <code>1</code>、<code>4</code>、<code>9</code>。另一個有用的運算子是 <a href=\"/api/operators/first\"><code>first</code></a> ：</p><p translation-origin=\"off\">will emit <code>1</code>, <code>4</code>, <code>9</code>. Another useful operator is <a href=\"/api/operators/first\"><code>first</code></a>:</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/first\" class=\"code-anchor\">first</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\n<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1, 2, 3)\n  .pipe(<a href=\"api/index/function/first\" class=\"code-anchor\">first</a>())\n  .subscribe((v) => console.log(`value: ${v}`));\n\n// Logs:\n// value: 1\n</code-example>\n<p translation-result=\"on\">請注意，<code><a href=\"api/index/function/map\" class=\"code-anchor\">map</a></code> 在邏輯上看必須動態建立，因為它必須給出對映函式。作為對比，<code><a href=\"api/index/function/first\" class=\"code-anchor\">first</a></code> 可能是一個常數，但仍然是動態建立的。作為一般性的實踐，所有運算子都是構造出來的，無論它們是否需要引數。</p><p translation-origin=\"off\">Note that <code><a href=\"api/index/function/map\" class=\"code-anchor\">map</a></code> logically must be constructed on the fly, since it must be given the mapping function to. By contrast, <code><a href=\"api/index/function/first\" class=\"code-anchor\">first</a></code> could be a constant, but is nonetheless constructed on the fly. As a general practice, all operators are constructed, whether they need arguments or not.</p>\n\n<h2 id=\"piping\" translation-result=\"on\">通道<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#piping\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"piping\">Piping<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#piping\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">可聯入通道的運算子都是函式，因此它們<em>可以</em>像普通函式一樣使用： <code>op()(obs)</code> — 但實際上，它們中的大多數往往會糾纏在一起，很快就會變得不可讀： <code>op4()(op3()(op2()(op1()(obs))))</code>。出於這個原因，Observables 有一個名為 <code>.pipe()</code> 的方法，它完成了同樣的事情，同時更容易閱讀：</p><p translation-origin=\"off\">Pipeable operators are functions, so they <em>could</em> be used like ordinary functions: <code>op()(obs)</code> — but in practice, there tend to be many of them convolved together, and quickly become unreadable: <code>op4()(op3()(op2()(op1()(obs))))</code>. For that reason, Observables have a method called <code>.pipe()</code> that accomplishes the same thing while being much easier to read:</p>\n\n<code-example language=\"ts\">\nobs.pipe(op1(), op2(), op3(), op4());\n</code-example>\n<p translation-result=\"on\">作為一種風格，即使只有一個運算子，也從不使用 <code>op()(obs)</code>；<code>obs.pipe(op())</code> 是普遍的首選項。</p><p translation-origin=\"off\">As a stylistic matter, <code>op()(obs)</code> is never used, even if there is only one operator; <code>obs.pipe(op())</code> is universally preferred.</p>\n\n<h2 id=\"creation-operators\" translation-result=\"on\">建立運算子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#creation-operators\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"creation-operators\">Creation Operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#creation-operators\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><strong>什麼是建立運算子？</strong>與可聯入通道的運算子不同，建立運算子一種函式，可用於根據一些常見預定義行為或聯合其它 Observable 來建立一個 Observable。</p><p translation-origin=\"off\"><strong>What are creation operators?</strong> Distinct from pipeable operators, creation operators are functions that can be used to create an Observable with some common predefined behavior or by joining other Observables.</p>\n\n<p translation-result=\"on\">建立運算子的典型範例是 <code><a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a></code> 函式。它將一個數字（而不是 Observable）作為輸入引數，併產生一個 Observable 作為輸出：</p><p translation-origin=\"off\">A typical example of a creation operator would be the <code><a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a></code> function. It takes a number (not an Observable) as input argument, and produces an Observable as output:</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst <a href=\"api/index/const/observable\" class=\"code-anchor\">observable</a> = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000 /* number <a href=\"api/index/function/of\" class=\"code-anchor\">of</a> milliseconds */);\n</code-example>\n<p translation-result=\"on\">在<a href=\"guide/operators#creation-operators-list\">此處</a>檢視所有靜態建立運算子的清單。</p><p translation-origin=\"off\">See the list of all static creation operators <a href=\"guide/operators#creation-operators-list\">here</a>.</p>\n\n<h2 id=\"higher-order-observables\" translation-result=\"on\">高階 Observables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#higher-order-observables\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"higher-order-observables\">Higher-order Observables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#higher-order-observables\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Observables 最常發出的是普通值，如字串和數字，但令人驚訝的是，它還經常需要處理 Observables <em>的</em> Observables，即所謂的高階 Observables。例如，假設你有一個 Observable 發出字串，這些字串是你想要檢視的檔案的 URL。其程式碼可能如下所示：</p><p translation-origin=\"off\">Observables most commonly emit ordinary values like strings and numbers, but surprisingly often, it is necessary to handle Observables <em>of</em> Observables, so-called higher-order Observables. For example, imagine you had an Observable emitting strings that were the URLs of files you wanted to see. The code might look like this:</p>\n\n<code-example language=\"ts\">\nconst fileObservable = urlObservable.pipe(<a href=\"api/index/function/map\" class=\"code-anchor\">map</a>((url) => http.get(url)));\n</code-example>\n<p translation-result=\"on\"><code>http.get()</code> 會為每個單獨的 URL 回傳一個 Observable（可能是字串或字串陣列）。現在你有了一個 Observable <em>的</em> Observable，即一個高階 Observable。</p><p translation-origin=\"off\"><code>http.get()</code> returns an Observable (of string or string arrays probably) for each individual URL. Now you have an Observable <em>of</em> Observables, a higher-order Observable.</p>\n\n<p translation-result=\"on\">但是你如何使用高階 Observable 呢？通常，透過<em>展平</em>處理：（以某種方式）將高階 Observable 轉換為普通 Observable。例如：</p><p translation-origin=\"off\">But how do you work with a higher-order Observable? Typically, by <em>flattening</em>: by (somehow) converting a higher-order Observable into an ordinary Observable. For example:</p>\n\n<code-example language=\"ts\">\nconst fileObservable = urlObservable.pipe(\n  <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>((url) => http.get(url)),\n  <a href=\"api/index/function/concatAll\" class=\"code-anchor\">concatAll</a>()\n);\n</code-example>\n<p translation-result=\"on\"><a href=\"/api/operators/concatAll\"><code>concatAll()</code></a> 運算子訂閱從『外部』 Observable 出來的每個『內部』 Observable，並複製所有發出的值，直到該 Observable 完成，然後繼續處理下一個。所有值都以這種方式連線。其他有用的展平運算子（稱為<a href=\"guide/operators#join-operators\"><em>聯結運算子</em></a>）有</p><p translation-origin=\"off\">The <a href=\"/api/operators/concatAll\"><code>concatAll()</code></a> operator subscribes to each \"inner\" Observable that comes out of the \"outer\" Observable, and copies all the emitted values until that Observable completes, and goes on to the next one. All of the values are in that way concatenated. Other useful flattening operators (called <a href=\"guide/operators#join-operators\"><em>join operators</em></a>) are</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"/api/operators/mergeAll\"><code>mergeAll()</code></a> — 在每個內部 Observable 抵達時訂閱它，然後在每個值抵達時發出這個值</p><p translation-origin=\"off\"><a href=\"/api/operators/mergeAll\"><code>mergeAll()</code></a> — subscribes to each inner Observable as it arrives, then emits each value as it arrives</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"/api/operators/switchAll\"><code>switchAll()</code></a> — 在第一個內部 Observable 抵達時訂閱它，並在每個值抵達時發出這個值，但是當下一個內部 Observable 抵達時，退訂前一個，並訂閱新的。</p><p translation-origin=\"off\"><a href=\"/api/operators/switchAll\"><code>switchAll()</code></a> — subscribes to the first inner Observable when it arrives, and emits each value as it arrives, but when the next inner Observable arrives, unsubscribes to the previous one, and subscribes to the new one.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"/api/operators/exhaustAll\"><code>exhaustAll()</code></a> — 在第一個內部 Observable 抵達時訂閱它，並在每個值抵達時發出這個值，丟棄所有新抵達的內部 Observable 直到第一個完成，然後等待下一個內部 Observable。</p><p translation-origin=\"off\"><a href=\"/api/operators/exhaustAll\"><code>exhaustAll()</code></a> — subscribes to the first inner Observable when it arrives, and emits each value as it arrives, discarding all newly arriving inner Observables until that first one completes, then waits for the next inner Observable.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">正如許多陣列函式庫會將 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>map()</code></a> 和 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\"><code>flat()</code></a> （或 <code>flatten()</code>） 組合成一個 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\"><code>flatMap()</code></a> 一樣，所有 RxJS 展平運算子 <a href=\"/api/operators/concatMap\"><code>concatMap()</code></a>、<a href=\"/api/operators/mergeMap\"><code>mergeMap()</code></a>、<a href=\"/api/operators/switchMap\"><code>switchMap()</code></a> 和 <a href=\"/api/operators/exhaustMap\"><code> exhaustMap()</code></a> 都有其對映等價物 <a href=\"/api/operators/exhaustMap\"><code>exhaustMap()</code></a>。</p><p translation-origin=\"off\">Just as many array libraries combine <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>map()</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\"><code>flat()</code></a> (or <code>flatten()</code>) into a single <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\"><code>flatMap()</code></a>, there are mapping equivalents of all the RxJS flattening operators <a href=\"/api/operators/concatMap\"><code>concatMap()</code></a>\n, <a href=\"/api/operators/mergeMap\"><code>mergeMap()</code></a>, <a href=\"/api/operators/switchMap\"><code>switchMap()</code></a>, and <a href=\"/api/operators/exhaustMap\"><code>exhaustMap()</code></a>.</p>\n\n<h2 id=\"marble-diagrams\" translation-result=\"on\">彈珠圖<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#marble-diagrams\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"marble-diagrams\">Marble diagrams<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#marble-diagrams\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要解釋運算子的工作原理，文字描述通常是不夠的。許多運算子都與時間有關，他們可能以不同的方式延遲、取樣、節流或防抖後發出。圖表通常是更好的工具。<em>彈珠圖</em>是運算子如何工作的視覺化表示，包括輸入 Observable、運算子及其引數以及輸出 Observable。</p><p translation-origin=\"off\">To explain how operators work, textual descriptions are often not enough. Many operators are related to time, they may for instance delay, sample, throttle, or debounce value emissions in different ways. Diagrams are often a better tool for that. <em>Marble Diagrams</em> are visual representations of how operators work, and include the input Observable(s), the operator and its parameters, and the output Observable.</p>\n\n<p translation-result=\"on\"><span class=\"informal\">在彈珠圖中，時間向右流動，該圖描述了值（『彈珠』）是如何在 Observable 執行時發出的。</span></p><p translation-origin=\"off\"><span class=\"informal\">In a marble diagram, time flows to the right, and the diagram describes how values (\"marbles\") are emitted on the Observable execution.</span></p>\n\n<p translation-result=\"on\">你可以在下面看到彈珠圖的解析。</p><p translation-origin=\"off\">Below you can see the anatomy of a marble diagram.</p>\n\n<img src=\"/assets/images/guide/marble-diagram-anatomy.svg\">\n<p translation-result=\"on\">在整個文件站中，我們廣泛使用彈珠圖來解釋運算子的工作方式。它們在其他環境中也可能非常有用，比如在白板上，甚至在我們的單元測試中（如 ASCII 圖表）。</p><p translation-origin=\"off\">Throughout this documentation site, we extensively use marble diagrams to explain how operators work. They may be really useful in other contexts too, like on a whiteboard or even in our unit tests (as ASCII diagrams).</p>\n\n<h2 id=\"categories-of-operators\" translation-result=\"on\">運算子的分類<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#categories-of-operators\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"categories-of-operators\">Categories of operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#categories-of-operators\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">有很多用於不同用途的運算子，它們可以分類為：建立、轉換、過濾、聯結、多播、錯誤處理、實用工具等。在以下清單中，你將找到按類別組織的所有運算子。</p><p translation-origin=\"off\">There are operators for different purposes, and they may be categorized as: creation, transformation, filtering, joining, multicasting, error handling, utility, etc. In the following list you will find all the operators organized in categories.</p>\n\n<p translation-result=\"on\">如需完整概述，請參閱<a href=\"/api\">參考資料頁面</a>。</p><p translation-origin=\"off\">For a complete overview, see the <a href=\"/api\">references page</a>.</p>\n\n<h3 id=\"creation-operators-1\" translation-result=\"on\">建立運算子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#creation-operators-1\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"creation-operators-1\"><a id=\"creation-operators-list\"></a>Creation Operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#creation-operators-1\"><i class=\"material-icons\">link</i></a></h3>\n\n<ul>\n<li><a href=\"/api/ajax/ajax\"><code>ajax</code></a></li>\n<li><a href=\"/api/index/function/bindCallback\"><code>bindCallback</code></a></li>\n<li><a href=\"/api/index/function/bindNodeCallback\"><code>bindNodeCallback</code></a></li>\n<li><a href=\"/api/index/function/defer\"><code>defer</code></a></li>\n<li><a href=\"/api/index/function/empty\"><code>empty</code></a></li>\n<li><a href=\"/api/index/function/from\"><code>from</code></a></li>\n<li><a href=\"/api/index/function/fromEvent\"><code>fromEvent</code></a></li>\n<li><a href=\"/api/index/function/fromEventPattern\"><code>fromEventPattern</code></a></li>\n<li><a href=\"/api/index/function/generate\"><code>generate</code></a></li>\n<li><a href=\"/api/index/function/interval\"><code>interval</code></a></li>\n<li><a href=\"/api/index/function/of\"><code>of</code></a></li>\n<li><a href=\"/api/index/function/range\"><code>range</code></a></li>\n<li><a href=\"/api/index/function/throwError\"><code>throwError</code></a></li>\n<li><a href=\"/api/index/function/timer\"><code>timer</code></a></li>\n<li><a href=\"/api/index/function/iif\"><code>iif</code></a></li>\n</ul>\n<h3 id=\"join-creation-operators\" translation-result=\"on\"><a id=\"join-creation-operators\"></a>聯結建立運算子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#join-creation-operators\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"join-creation-operators\"><a id=\"join-creation-operators\"></a>Join Creation Operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#join-creation-operators\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">這些是 Observable 的建立運算子，它們也具有聯結功能 —— 發出多個來源 Observable 的值。</p><p translation-origin=\"off\">These are Observable creation operators that also have join functionality -- emitting values of multiple source Observables.</p>\n\n<ul>\n<li><a href=\"/api/index/function/combineLatest\"><code>combineLatest</code></a></li>\n<li><a href=\"/api/index/function/concat\"><code>concat</code></a></li>\n<li><a href=\"/api/index/function/forkJoin\"><code>forkJoin</code></a></li>\n<li><a href=\"/api/index/function/merge\"><code>merge</code></a></li>\n<li><a href=\"/api/index/function/partition\"><code>partition</code></a></li>\n<li><a href=\"/api/index/function/race\"><code>race</code></a></li>\n<li><a href=\"/api/index/function/zip\"><code>zip</code></a></li>\n</ul>\n<h3 id=\"transformation-operators\" translation-result=\"on\">轉換運算子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#transformation-operators\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"transformation-operators\">Transformation Operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#transformation-operators\"><i class=\"material-icons\">link</i></a></h3>\n\n<ul>\n<li><a href=\"/api/operators/buffer\"><code>buffer</code></a></li>\n<li><a href=\"/api/operators/bufferCount\"><code>bufferCount</code></a></li>\n<li><a href=\"/api/operators/bufferTime\"><code>bufferTime</code></a></li>\n<li><a href=\"/api/operators/bufferToggle\"><code>bufferToggle</code></a></li>\n<li><a href=\"/api/operators/bufferWhen\"><code>bufferWhen</code></a></li>\n<li><a href=\"/api/operators/concatMap\"><code>concatMap</code></a></li>\n<li><a href=\"/api/operators/concatMapTo\"><code>concatMapTo</code></a></li>\n<li><a href=\"/api/operators/exhaust\"><code>exhaust</code></a></li>\n<li><a href=\"/api/operators/exhaustMap\"><code>exhaustMap</code></a></li>\n<li><a href=\"/api/operators/expand\"><code>expand</code></a></li>\n<li><a href=\"/api/operators/groupBy\"><code>groupBy</code></a></li>\n<li><a href=\"/api/operators/map\"><code>map</code></a></li>\n<li><a href=\"/api/operators/mapTo\"><code>mapTo</code></a></li>\n<li><a href=\"/api/operators/mergeMap\"><code>mergeMap</code></a></li>\n<li><a href=\"/api/operators/mergeMapTo\"><code>mergeMapTo</code></a></li>\n<li><a href=\"/api/operators/mergeScan\"><code>mergeScan</code></a></li>\n<li><a href=\"/api/operators/pairwise\"><code>pairwise</code></a></li>\n<li><a href=\"/api/operators/partition\"><code>partition</code></a></li>\n<li><a href=\"/api/operators/pluck\"><code>pluck</code></a></li>\n<li><a href=\"/api/operators/scan\"><code>scan</code></a></li>\n<li><a href=\"/api/operators/switchScan\"><code>switchScan</code></a></li>\n<li><a href=\"/api/operators/switchMap\"><code>switchMap</code></a></li>\n<li><a href=\"/api/operators/switchMapTo\"><code>switchMapTo</code></a></li>\n<li><a href=\"/api/operators/window\"><code>window</code></a></li>\n<li><a href=\"/api/operators/windowCount\"><code>windowCount</code></a></li>\n<li><a href=\"/api/operators/windowTime\"><code>windowTime</code></a></li>\n<li><a href=\"/api/operators/windowToggle\"><code>windowToggle</code></a></li>\n<li><a href=\"/api/operators/windowWhen\"><code>windowWhen</code></a></li>\n</ul>\n<h3 id=\"filtering-operators\" translation-result=\"on\">過濾運算子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#filtering-operators\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"filtering-operators\">Filtering Operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#filtering-operators\"><i class=\"material-icons\">link</i></a></h3>\n\n<ul>\n<li><a href=\"/api/operators/audit\"><code>audit</code></a></li>\n<li><a href=\"/api/operators/auditTime\"><code>auditTime</code></a></li>\n<li><a href=\"/api/operators/debounce\"><code>debounce</code></a></li>\n<li><a href=\"/api/operators/debounceTime\"><code>debounceTime</code></a></li>\n<li><a href=\"/api/operators/distinct\"><code>distinct</code></a></li>\n<li><a href=\"/api/operators/distinctUntilChanged\"><code>distinctUntilChanged</code></a></li>\n<li><a href=\"/api/operators/distinctUntilKeyChanged\"><code>distinctUntilKeyChanged</code></a></li>\n<li><a href=\"/api/operators/elementAt\"><code>elementAt</code></a></li>\n<li><a href=\"/api/operators/filter\"><code>filter</code></a></li>\n<li><a href=\"/api/operators/first\"><code>first</code></a></li>\n<li><a href=\"/api/operators/ignoreElements\"><code>ignoreElements</code></a></li>\n<li><a href=\"/api/operators/last\"><code>last</code></a></li>\n<li><a href=\"/api/operators/sample\"><code>sample</code></a></li>\n<li><a href=\"/api/operators/sampleTime\"><code>sampleTime</code></a></li>\n<li><a href=\"/api/operators/single\"><code>single</code></a></li>\n<li><a href=\"/api/operators/skip\"><code>skip</code></a></li>\n<li><a href=\"/api/operators/skipLast\"><code>skipLast</code></a></li>\n<li><a href=\"/api/operators/skipUntil\"><code>skipUntil</code></a></li>\n<li><a href=\"/api/operators/skipWhile\"><code>skipWhile</code></a></li>\n<li><a href=\"/api/operators/take\"><code>take</code></a></li>\n<li><a href=\"/api/operators/takeLast\"><code>takeLast</code></a></li>\n<li><a href=\"/api/operators/takeUntil\"><code>takeUntil</code></a></li>\n<li><a href=\"/api/operators/takeWhile\"><code>takeWhile</code></a></li>\n<li><a href=\"/api/operators/throttle\"><code>throttle</code></a></li>\n<li><a href=\"/api/operators/throttleTime\"><code>throttleTime</code></a></li>\n</ul>\n<h3 id=\"join-operators\" translation-result=\"on\"><a id=\"join-operators\"></a>聯結運算子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#join-operators\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"join-operators\"><a id=\"join-operators\"></a>Join Operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#join-operators\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">另請參閱上面的<a href=\"guide/operators#join-creation-operators\">連線建立運算子</a>部分。</p><p translation-origin=\"off\">Also see the <a href=\"guide/operators#join-creation-operators\">Join Creation Operators</a> section above.</p>\n\n<ul>\n<li><a href=\"/api/operators/combineLatestAll\"><code>combineLatestAll</code></a></li>\n<li><a href=\"/api/operators/concatAll\"><code>concatAll</code></a></li>\n<li><a href=\"/api/operators/exhaustAll\"><code>exhaustAll</code></a></li>\n<li><a href=\"/api/operators/mergeAll\"><code>mergeAll</code></a></li>\n<li><a href=\"/api/operators/switchAll\"><code>switchAll</code></a></li>\n<li><a href=\"/api/operators/startWith\"><code>startWith</code></a></li>\n<li><a href=\"/api/operators/withLatestFrom\"><code>withLatestFrom</code></a></li>\n</ul>\n<h3 id=\"multicasting-operators\" translation-result=\"on\">多播運算子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#multicasting-operators\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"multicasting-operators\">Multicasting Operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#multicasting-operators\"><i class=\"material-icons\">link</i></a></h3>\n\n<ul>\n<li><a href=\"/api/operators/multicast\"><code>multicast</code></a></li>\n<li><a href=\"/api/operators/publish\"><code>publish</code></a></li>\n<li><a href=\"/api/operators/publishBehavior\"><code>publishBehavior</code></a></li>\n<li><a href=\"/api/operators/publishLast\"><code>publishLast</code></a></li>\n<li><a href=\"/api/operators/publishReplay\"><code>publishReplay</code></a></li>\n<li><a href=\"/api/operators/share\"><code>share</code></a></li>\n</ul>\n<h3 id=\"error-handling-operators\" translation-result=\"on\">錯誤處理運算子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#error-handling-operators\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"error-handling-operators\">Error Handling Operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#error-handling-operators\"><i class=\"material-icons\">link</i></a></h3>\n\n<ul>\n<li><a href=\"/api/operators/catchError\"><code>catchError</code></a></li>\n<li><a href=\"/api/operators/retry\"><code>retry</code></a></li>\n<li><a href=\"/api/operators/retryWhen\"><code>retryWhen</code></a></li>\n</ul>\n<h3 id=\"utility-operators\" translation-result=\"on\">實用工具運算子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#utility-operators\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"utility-operators\">Utility Operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#utility-operators\"><i class=\"material-icons\">link</i></a></h3>\n\n<ul>\n<li><a href=\"/api/operators/tap\"><code>tap</code></a></li>\n<li><a href=\"/api/operators/delay\"><code>delay</code></a></li>\n<li><a href=\"/api/operators/delayWhen\"><code>delayWhen</code></a></li>\n<li><a href=\"/api/operators/dematerialize\"><code>dematerialize</code></a></li>\n<li><a href=\"/api/operators/materialize\"><code>materialize</code></a></li>\n<li><a href=\"/api/operators/observeOn\"><code>observeOn</code></a></li>\n<li><a href=\"/api/operators/subscribeOn\"><code>subscribeOn</code></a></li>\n<li><a href=\"/api/operators/timeInterval\"><code>timeInterval</code></a></li>\n<li><a href=\"/api/operators/timestamp\"><code>timestamp</code></a></li>\n<li><a href=\"/api/operators/timeout\"><code>timeout</code></a></li>\n<li><a href=\"/api/operators/timeoutWith\"><code>timeoutWith</code></a></li>\n<li><a href=\"/api/operators/toArray\"><code>toArray</code></a></li>\n</ul>\n<h3 id=\"conditional-and-boolean-operators\" translation-result=\"on\">條件和布林運算子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#conditional-and-boolean-operators\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"conditional-and-boolean-operators\">Conditional and Boolean Operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#conditional-and-boolean-operators\"><i class=\"material-icons\">link</i></a></h3>\n\n<ul>\n<li><a href=\"/api/operators/defaultIfEmpty\"><code>defaultIfEmpty</code></a></li>\n<li><a href=\"/api/operators/every\"><code>every</code></a></li>\n<li><a href=\"/api/operators/find\"><code>find</code></a></li>\n<li><a href=\"/api/operators/findIndex\"><code>findIndex</code></a></li>\n<li><a href=\"/api/operators/isEmpty\"><code>isEmpty</code></a></li>\n</ul>\n<h3 id=\"mathematical-and-aggregate-operators\" translation-result=\"on\">數學和聚合運算子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#mathematical-and-aggregate-operators\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"mathematical-and-aggregate-operators\">Mathematical and Aggregate Operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#mathematical-and-aggregate-operators\"><i class=\"material-icons\">link</i></a></h3>\n\n<ul>\n<li><a href=\"/api/operators/count\"><code>count</code></a></li>\n<li><a href=\"/api/operators/max\"><code>max</code></a></li>\n<li><a href=\"/api/operators/min\"><code>min</code></a></li>\n<li><a href=\"/api/operators/reduce\"><code>reduce</code></a></li>\n</ul>\n<h2 id=\"creating-custom-operators\" translation-result=\"on\">建立自定義運算子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#creating-custom-operators\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"creating-custom-operators\">Creating custom operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#creating-custom-operators\"><i class=\"material-icons\">link</i></a></h2>\n\n<h3 id=\"use-the-pipe-function-to-make-new-operators\" translation-result=\"on\">使用 <code><a href=\"api/index/function/pipe\" class=\"code-anchor\">pipe</a>()</code> 函式建立新的運算子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#use-the-pipe-function-to-make-new-operators\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"use-the-pipe-function-to-make-new-operators\">Use the <code><a href=\"api/index/function/pipe\" class=\"code-anchor\">pipe</a>()</code> function to make new operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#use-the-pipe-function-to-make-new-operators\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果程式碼中有常用的運算子序列，請使用 <code><a href=\"api/index/function/pipe\" class=\"code-anchor\">pipe</a>()</code> 函式將序列提取到新的運算子中。即使此序列不是那麼通用，將其分解為單個運算子也可以提高可讀性。</p><p translation-origin=\"off\">If there is a commonly used sequence of operators in your code, use the <code><a href=\"api/index/function/pipe\" class=\"code-anchor\">pipe</a>()</code> function to extract the sequence into a new operator. Even if a sequence is not that common, breaking it out into a single operator can improve readability.</p>\n\n<p translation-result=\"on\">例如，你可以建立一個丟棄奇數值並將偶數值翻倍的函式，如下所示：</p><p translation-origin=\"off\">For example, you could make a function that discarded odd values and doubled even values like this:</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/pipe\" class=\"code-anchor\">pipe</a>, <a href=\"api/index/function/filter\" class=\"code-anchor\">filter</a>, <a href=\"api/index/function/map\" class=\"code-anchor\">map</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nfunction discardOddDoubleEven() {\n  return <a href=\"api/index/function/pipe\" class=\"code-anchor\">pipe</a>(\n    <a href=\"api/index/function/filter\" class=\"code-anchor\">filter</a>((v) => !(v % 2)),\n    <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>((v) => v + v)\n  );\n}\n</code-example>\n<p translation-result=\"on\">（<code><a href=\"api/index/function/pipe\" class=\"code-anchor\">pipe</a>()</code> 函式類似於 Observable 上的 <code>.pipe()</code> 方法，但並不相同。）</p><p translation-origin=\"off\">(The <code><a href=\"api/index/function/pipe\" class=\"code-anchor\">pipe</a>()</code> function is analogous to, but not the same thing as, the <code>.pipe()</code> method on an Observable.)</p>\n\n<h3 id=\"creating-new-operators-from-scratch\" translation-result=\"on\">從頭開始建立新的運算子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#creating-new-operators-from-scratch\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"creating-new-operators-from-scratch\">Creating new operators from scratch<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/operators#creating-new-operators-from-scratch\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">它更復雜，但如果你必須編寫一個不能由現有運算子組合而成的運算子（很少發生），你可以使用 Observable 建構式函式從頭開始編寫一個運算子，如下所示：</p><p translation-origin=\"off\">It is more complicated, but if you have to write an operator that cannot be made from a combination of existing operators (a rare occurrance), you can write an operator from scratch using the Observable constructor, like this:</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>, <a href=\"api/index/function/of\" class=\"code-anchor\">of</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nfunction <a href=\"api/index/function/delay\" class=\"code-anchor\">delay</a>&#x3C;T>(delayInMillis: number) {\n  return (<a href=\"api/index/const/observable\" class=\"code-anchor\">observable</a>: <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;T>) =>\n    new <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;T>((subscriber) => {\n      // this function will be called each time this\n      // <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a> is subscribed to.\n      const allTimerIDs = new Set();\n      let hasCompleted = false;\n      const subscription = observable.subscribe({\n        next(value) {\n          // Start a <a href=\"api/index/function/timer\" class=\"code-anchor\">timer</a> to <a href=\"api/index/function/delay\" class=\"code-anchor\">delay</a> the next value\n          // <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> being pushed.\n          const timerID = setTimeout(() => {\n            subscriber.next(value);\n            // after we push the value, we need to clean up the <a href=\"api/index/function/timer\" class=\"code-anchor\">timer</a> timerID\n            allTimerIDs.delete(timerID);\n            // If the source has completed, and there are no more timers running,\n            // we can complete the resulting observable.\n            if (hasCompleted &#x26;&#x26; allTimerIDs.size === 0) {\n              subscriber.complete();\n            }\n          }, delayInMillis);\n\n          allTimerIDs.add(timerID);\n        },\n        error(err) {\n          // We need to make sure we're propagating our errors through.\n          subscriber.error(err);\n        },\n        complete() {\n          hasCompleted = true;\n          // If we still have timers running, we don't want to complete yet.\n          if (allTimerIDs.size === 0) {\n            subscriber.complete();\n          }\n        },\n      });\n\n      // Return the teardown logic. This will be invoked when\n      // the result errors, completes, or is unsubscribed.\n      return () => {\n        subscription.unsubscribe();\n        // Clean up our timers.\n        for (const timerID <a href=\"api/index/function/of\" class=\"code-anchor\">of</a> allTimerIDs) {\n          clearTimeout(timerID);\n        }\n      };\n    });\n}\n\n// Try it out!\n<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1, 2, 3).pipe(<a href=\"api/index/function/delay\" class=\"code-anchor\">delay</a>(1000)).subscribe(console.log);\n</code-example>\n<p translation-result=\"on\">請注意，你必須</p><p translation-origin=\"off\">Note that you must</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在訂閱輸入 Observable 時實現所有三個 Observer 函式，<code>next()</code>、<code>error()</code> 和 <code>complete()</code>。</p><p translation-origin=\"off\">implement all three Observer functions, <code>next()</code>, <code>error()</code>, and <code>complete()</code> when subscribing to the input Observable.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">實現一個『拆解』功能，在 Observable 完成時進行清理（在這種情況下，可以透過退訂和清除任何掛起的超時）。</p><p translation-origin=\"off\">implement a \"teardown\" function that cleans up when the Observable completes (in this case by unsubscribing and clearing any pending timeouts).</p>\n\n</li>\n<li>\n<p translation-result=\"on\">從傳遞給 Observable 建構式函式的函式中回傳該拆解函式。</p><p translation-origin=\"off\">return that teardown function from the function passed to the Observable constructor.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">當然，這只是一個例子，因為 <a href=\"/api/operators/delay\"><code>delay()</code></a> 運算子已經存在了。</p><p translation-origin=\"off\">Of course, this is only an example; the <a href=\"/api/operators/delay\"><code>delay()</code></a> operator already exists.</p>\n\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /api\n - /api/ajax/ajax\n - /api/index/function/bindCallback\n - /api/index/function/bindNodeCallback\n - /api/index/function/combineLatest\n - /api/index/function/concat\n - /api/index/function/defer\n - /api/index/function/empty\n - /api/index/function/forkJoin\n - /api/index/function/from\n - /api/index/function/fromEvent\n - /api/index/function/fromEventPattern\n - /api/index/function/generate\n - /api/index/function/iif\n - /api/index/function/interval\n - /api/index/function/merge\n - /api/index/function/of\n - /api/index/function/partition\n - /api/index/function/race\n - /api/index/function/range\n - /api/index/function/throwError\n - /api/index/function/timer\n - /api/index/function/zip\n - /api/operators/audit\n - /api/operators/auditTime\n - /api/operators/buffer\n - /api/operators/bufferCount\n - /api/operators/bufferTime\n - /api/operators/bufferToggle\n - /api/operators/bufferWhen\n - /api/operators/catchError\n - /api/operators/combineLatestAll\n - /api/operators/concatAll\n - /api/operators/concatMap\n - /api/operators/concatMapTo\n - /api/operators/count\n - /api/operators/debounce\n - /api/operators/debounceTime\n - /api/operators/defaultIfEmpty\n - /api/operators/delay\n - /api/operators/delayWhen\n - /api/operators/dematerialize\n - /api/operators/distinct\n - /api/operators/distinctUntilChanged\n - /api/operators/distinctUntilKeyChanged\n - /api/operators/elementAt\n - /api/operators/every\n - /api/operators/exhaust\n - /api/operators/exhaustAll\n - /api/operators/exhaustMap\n - /api/operators/expand\n - /api/operators/filter\n - /api/operators/find\n - /api/operators/findIndex\n - /api/operators/first\n - /api/operators/groupBy\n - /api/operators/ignoreElements\n - /api/operators/isEmpty\n - /api/operators/last\n - /api/operators/map\n - /api/operators/mapTo\n - /api/operators/materialize\n - /api/operators/max\n - /api/operators/mergeAll\n - /api/operators/mergeMap\n - /api/operators/mergeMapTo\n - /api/operators/mergeScan\n - /api/operators/min\n - /api/operators/multicast\n - /api/operators/observeOn\n - /api/operators/pairwise\n - /api/operators/partition\n - /api/operators/pluck\n - /api/operators/publish\n - /api/operators/publishBehavior\n - /api/operators/publishLast\n - /api/operators/publishReplay\n - /api/operators/reduce\n - /api/operators/retry\n - /api/operators/retryWhen\n - /api/operators/sample\n - /api/operators/sampleTime\n - /api/operators/scan\n - /api/operators/share\n - /api/operators/single\n - /api/operators/skip\n - /api/operators/skipLast\n - /api/operators/skipUntil\n - /api/operators/skipWhile\n - /api/operators/startWith\n - /api/operators/subscribeOn\n - /api/operators/switchAll\n - /api/operators/switchMap\n - /api/operators/switchMapTo\n - /api/operators/switchScan\n - /api/operators/take\n - /api/operators/takeLast\n - /api/operators/takeUntil\n - /api/operators/takeWhile\n - /api/operators/tap\n - /api/operators/throttle\n - /api/operators/throttleTime\n - /api/operators/timeInterval\n - /api/operators/timeout\n - /api/operators/timeoutWith\n - /api/operators/timestamp\n - /api/operators/toArray\n - /api/operators/window\n - /api/operators/windowCount\n - /api/operators/windowTime\n - /api/operators/windowToggle\n - /api/operators/windowWhen\n - /api/operators/withLatestFrom\n - api/index/class/Observable\n - api/index/const/observable\n - api/index/function/concatAll\n - api/index/function/delay\n - api/index/function/filter\n - api/index/function/first\n - api/index/function/from\n - api/index/function/interval\n - api/index/function/map\n - api/index/function/of\n - api/index/function/pipe\n - api/index/function/timer\n - guide/operators#categories-of-operators\n - guide/operators#conditional-and-boolean-operators\n - guide/operators#creating-custom-operators\n - guide/operators#creating-new-operators-from-scratch\n - guide/operators#creation-operators\n - guide/operators#creation-operators-1\n - guide/operators#creation-operators-list\n - guide/operators#error-handling-operators\n - guide/operators#filtering-operators\n - guide/operators#higher-order-observables\n - guide/operators#join-creation-operators\n - guide/operators#join-operators\n - guide/operators#marble-diagrams\n - guide/operators#mathematical-and-aggregate-operators\n - guide/operators#multicasting-operators\n - guide/operators#piping\n - guide/operators#rxjs-operators\n - guide/operators#transformation-operators\n - guide/operators#use-the-pipe-function-to-make-new-operators\n - guide/operators#utility-operators\n - guide/operators#what-are-operators\n - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\n - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\n - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n-->"
}