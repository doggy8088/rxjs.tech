{
  "id": "guide/observer",
  "title": "",
  "contents": "\n<div class=\"content\">\n<h1 id=\"observer\" translation-result=\"on\">觀察者（Observer）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observer#observer\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"observer\">Observer<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/observer#observer\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\"><strong>什麼是 Observer？</strong> Observer 是 Observable 傳遞的各個值的消費者。 Observer 只是一組回呼，對應於 Observable 傳遞的每種型別的通知：<code>next</code>、<code>error</code> 和 <code>complete</code>。下面是一個典型的 Observer 物件的例子：</p><p translation-origin=\"off\"><strong>What is an Observer?</strong> An Observer is a consumer of values delivered by an Observable. Observers are simply a set of callbacks, one for each type of notification delivered by the Observable: <code>next</code>, <code>error</code>, and <code>complete</code>. The following is an example of a typical Observer object:</p>\n\n<code-example language=\"ts\">\nconst observer = {\n  next: (x) => console.log('<a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a> got a next value: ' + x),\n  error: (err) => console.error('<a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a> got an error: ' + err),\n  complete: () => console.log('<a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a> got a complete notification'),\n};\n</code-example>\n<p translation-result=\"on\">要使用 Observer，請將其提供給 Observable 的 <code>subscribe</code> ：</p><p translation-origin=\"off\">To use the Observer, provide it to the <code>subscribe</code> of an Observable:</p>\n\n<code-example language=\"ts\">\nobservable.subscribe(observer);\n</code-example>\n<p translation-result=\"on\"><span class=\"informal\"> Observer 只是具有三個回呼的物件，分別用於 Observable 可能傳遞的每種型別的通知。</span></p><p translation-origin=\"off\"><span class=\"informal\">Observers are just objects with three callbacks, one for each type of notification that an Observable may deliver.</span></p>\n\n<p translation-result=\"on\">RxJS 中的 Observer 也可能是<em>部分</em>的。如果你不提供其中一個回呼，Observable 的執行仍然會正常進行，除了某些型別的通知會被忽略，因為它們在 Observer 中沒有對應的回呼。</p><p translation-origin=\"off\">Observers in RxJS may also be <em>partial</em>. If you don't provide one of the callbacks, the execution of the Observable will still happen normally, except some types of notifications will be ignored, because they don't have a corresponding callback in the Observer.</p>\n\n<p translation-result=\"on\">下面的例子是一個沒有 <code>complete</code> 回呼的 <code><a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a></code> ：</p><p translation-origin=\"off\">The example below is an <code><a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a></code> without the <code>complete</code> callback:</p>\n\n<code-example language=\"ts\">\nconst observer = {\n  next: (x) => console.log('<a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a> got a next value: ' + x),\n  error: (err) => console.error('<a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a> got an error: ' + err),\n};\n</code-example>\n<p translation-result=\"on\">訂閱 <code><a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a></code> 時，你也可以只提供下一個回呼作為引數，而不用附屬於 <code><a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a></code> 物件，例如：</p><p translation-origin=\"off\">When subscribing to an <code><a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a></code>, you may also just provide the next callback as an argument, without being attached to an <code><a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a></code> object, for instance like this:</p>\n\n<code-example language=\"ts\">\nobservable.subscribe((x) => console.log('<a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a> got a next value: ' + x));\n</code-example>\n<p translation-result=\"on\">在 <code>observable.subscribe</code> 內部，它將使用回呼引數作為 <code>next</code> <strong>處理器</strong>建立一個 <code><a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a></code> 物件。</p><p translation-origin=\"off\">Internally in <code>observable.subscribe</code>, it will create an <code><a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a></code> object using the callback argument as the <code>next</code> handler.</p>\n\n\n</div>\n<!-- links to this doc:\n - api/index/class/Observable\n-->\n<!-- links from this doc:\n - api/index/class/Observable\n - api/index/interface/Observer\n - guide/observer#observer\n-->"
}