{
  "id": "api/index/function/using",
  "title": "using",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/observable/using.ts?message=docs(index)%3A%20describe%20your%20change...#L5-L67\" aria-label=\"編輯建議\" title=\"編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/observable/using.ts#L5-L67\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/using\", \"name\": \"using\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"using\">using<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/using#using\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">穩定</label>\n    \n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p translation-result=\"on\">建立一個使用資源的 Observable，該資源將與 Observable 同時釋放。</p><p translation-origin=\"off\">Creates an Observable that uses a resource which will be disposed at the same time as the Observable.</p>\n\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/using\" class=\"code-anchor\">using</a>&#x3C;T extends <a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a>&#x3C;any>>(resourceFactory: () => void | <a href=\"api/index/interface/Unsubscribable\" class=\"code-anchor\">Unsubscribable</a>, observableFactory: (resource: void | <a href=\"api/index/interface/Unsubscribable\" class=\"code-anchor\">Unsubscribable</a>) => void | T): <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;<a href=\"api/index/type-alias/ObservedValueOf\" class=\"code-anchor\">ObservedValueOf</a>&#x3C;T>></code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>resourceFactory</td>\n      \n      <td class=\"param-description\">\n      <p translation-result=\"on\">建立任何實現了 <code>unsubscribe</code> 方法的資源物件的函式。</p><p translation-origin=\"off\">        A function which creates any resource object\nthat implements <code>unsubscribe</code> method.</p>\n\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>observableFactory</td>\n      \n      <td class=\"param-description\">\n      <p translation-result=\"on\">一個建立 Observable 的函式，它可以使用注入的資源物件。</p><p translation-origin=\"off\">        A function which\ncreates an Observable, that can use injected resource object.</p>\n\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值\">回傳值</h4>\n  <p translation-result=\"on\">一個行為與 <code>observableFactory</code> 回傳的 Observable 相同的 Observable，但是當它完成、出錯或退訂時，也會在所建立的資源物件上呼叫 <code>unsubscribe</code>。</p><p translation-origin=\"off\"><code><a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;<a href=\"api/index/type-alias/ObservedValueOf\" class=\"code-anchor\">ObservedValueOf</a>&#x3C;T>></code>: An Observable that behaves the same as Observable returned by <code>observableFactory</code>, but\nwhich - when completed, errored or unsubscribed - will also call <code>unsubscribe</code> on created resource object.</p>\n\n\n  \n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\">說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/using#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p translation-result=\"on\"><span class=\"informal\">當你發現自己要在 Observable 之後進行清理時使用它。</span></p><p translation-origin=\"off\"><span class=\"informal\">Use it when you catch yourself cleaning up after an Observable.</span></p>\n\n<p translation-result=\"on\"><code><a href=\"api/index/function/using\" class=\"code-anchor\">using</a></code> 是一個工廠運算子，它接受兩個函式。第一個函式回傳一個可釋放資源。它可以是實現了 <code>unsubscribe</code> 方法的任意物件。該物件將傳給第二個函式，並且該函式要回傳一個 Observable。該 Observable 可以在執行期間使用此資源物件。每次有人訂閱時，都將呼叫傳給 <code><a href=\"api/index/function/using\" class=\"code-anchor\">using</a></code> 的兩個函式 - Observable 和資源物件都不會在訂閱之間以任何方式共享。</p><p translation-origin=\"off\"><code><a href=\"api/index/function/using\" class=\"code-anchor\">using</a></code> is a factory operator, which accepts two functions. First function returns a disposable resource.\nIt can be an arbitrary object that implements <code>unsubscribe</code> method. Second function will be injected with\nthat object and should return an Observable. That Observable can use resource object during its execution.\nBoth functions passed to <code><a href=\"api/index/function/using\" class=\"code-anchor\">using</a></code> will be called every time someone subscribes - neither an Observable nor\nresource object will be shared in any way between subscriptions.</p>\n\n<p translation-result=\"on\">當 <code><a href=\"api/index/function/using\" class=\"code-anchor\">using</a></code> 回傳的 Observable 被訂閱時，第二個函式回傳的 Observable 也會被訂閱。它的所有通知（下一個值、完成和錯誤事件）都將由輸出 Observable 傳送而不會發生什麼變化。但是，如果有人退訂 Observable，或者來源 Observable 本身已完成或出錯，則將呼叫資源物件上的 <code>unsubscribe</code> 方法。這可用於進行任何必要的清理，否則必須手動處理。請注意，當有人透過 <code>unsubscribe</code> 退訂 Observable 時，不會傳送完成或錯誤通知，因此 <code><a href=\"api/index/function/using\" class=\"code-anchor\">using</a></code> 可以用作掛鉤，讓你可以確保在 Observable 執行期間需要存在的所有資源都能在適當的時機釋放.</p><p translation-origin=\"off\">When Observable returned by <code><a href=\"api/index/function/using\" class=\"code-anchor\">using</a></code> is subscribed, Observable returned from the second function will be subscribed\nas well. All its notifications (nexted values, completion and error events) will be emitted unchanged by the output\nObservable. If however someone unsubscribes from the Observable or source Observable completes or errors by itself,\nthe <code>unsubscribe</code> method on resource object will be called. This can be used to do any necessary clean up, which\notherwise would have to be handled by hand. Note that complete or error notifications are not emitted when someone\ncancels subscription to an Observable via <code>unsubscribe</code>, so <code><a href=\"api/index/function/using\" class=\"code-anchor\">using</a></code> can be used as a hook, allowing you to make\nsure that all resources which need to exist during an Observable execution will be disposed at appropriate time.</p>\n\n\n</section>\n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">參見<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/using#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/index/function/defer\"><code>defer</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/index\n - guide/testing/marble-testing\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/class/Observable\n - api/index/function/defer\n - api/index/function/using#description\n - api/index/function/using#see-also\n - api/index/function/using#using\n - api/index/interface/Unsubscribable\n - api/index/type-alias/ObservableInput\n - api/index/type-alias/ObservedValueOf\n - https://github.com/reactivex/rxjs/edit/master/src/internal/observable/using.ts?message=docs(index)%3A%20describe%20your%20change...#L5-L67\n - https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/observable/using.ts#L5-L67\n-->"
}