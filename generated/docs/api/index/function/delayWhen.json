{
  "id": "api/index/function/delayWhen",
  "title": "delayWhen",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/delayWhen.ts?message=docs(index)%3A%20describe%20your%20change...#L20-L110\" aria-label=\"編輯建議\" title=\"編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/delayWhen.ts#L20-L110\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/delayWhen\", \"name\": \"delayWhen\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"delaywhen\">delayWhen<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/delayWhen#delaywhen\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">穩定</label>\n    \n    <label class=\"api-status-label operator\">運算子</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p translation-result=\"on\">將來源 Observable 中項目的傳送時機延遲給定的時間跨度，該時間跨度取決於另一個 Observable 的傳送時間。</p><p translation-origin=\"off\">Delays the emission of items from the source Observable by a given time span\ndetermined by the emissions of another Observable.</p>\n\n<p translation-result=\"on\"><span class=\"informal\">類似於 <a href=\"api/index/function/delay\"><code>delay</code></a>，但延遲持續時間的時間跨度由第二個 Observable 決定。</span></p><p translation-origin=\"off\"><span class=\"informal\">It's like <a href=\"api/index/function/delay\"><code>delay</code></a>, but the time span of the\ndelay duration is determined by a second Observable.</span></p>\n\n<p><img src=\"/assets/images/marble-diagrams/delayWhen.png\" width=\"100%\" alt=\"delayWhen marble diagram\"></p>\n<p translation-result=\"on\"><code><a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a></code> 將每個從來源 Observable 傳送的值延遲一段時間，這個時間跨度由另一個 Observable 決定。當源傳送一個值時，就會以源值作為引數呼叫 <code>delayDurationSelector</code> 函式，並回傳一個 Observable，即 『duration』（持續時間） Observable。只有當持續時間 Observable 發出一個值或完成通知時，源值才會在輸出 Observable 上傳送。以通知器的完成來觸發源值的傳送是已棄用的行為，將在未來的版本中刪除。</p><p translation-origin=\"off\"><code><a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a></code> time shifts each emitted value from the source Observable by a\ntime span determined by another Observable. When the source emits a value,\nthe <code>delayDurationSelector</code> function is called with the source value as\nargument, and should return an Observable, called the \"duration\" Observable.\nThe source value is emitted on the output Observable only when the duration\nObservable emits a value or completes.\nThe completion of the notifier triggering the emission of the source value\nis deprecated behavior and will be removed in future versions.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a></code> 接受第二個可選引數 <code>subscriptionDelay</code>，它是一個 Observable。當 <code>subscriptionDelay</code> 發出它的第一個值或完成通知時，來源 Observable 就會被訂閱並開始像上一段中描述的那樣行動。如果未提供 <code>subscriptionDelay</code>，則 <code><a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a></code> 將在輸出 Observable 被訂閱後立即訂閱來源 Observable。</p><p translation-origin=\"off\">Optionally, <code><a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a></code> takes a second argument, <code>subscriptionDelay</code>, which\nis an Observable. When <code>subscriptionDelay</code> emits its first value or\ncompletes, the source Observable is subscribed to and starts behaving like\ndescribed in the previous paragraph. If <code>subscriptionDelay</code> is not provided,\n<code><a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a></code> will subscribe to the source Observable as soon as the output\nObservable is subscribed.</p>\n\n<h2 id=\"example\" translation-result=\"on\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/delayWhen#example\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/delayWhen#example\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">將每次點選延遲隨機的時間量，介於 0 到 5 秒之間</p><p translation-origin=\"off\">Delay each click by a random amount of time, between 0 and 5 seconds</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>, <a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a>, <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst clicks = <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>(document, 'click');\nconst delayedClicks = clicks.pipe(\n  <a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a>(() => <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(Math.random() * 5000))\n);\ndelayedClicks.subscribe(x => console.log(x));\n</code-example>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a>&#x3C;T>(delayDurationSelector: (value: T, index: number) => <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;any>, subscriptionDelay?: <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;any>): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>delayDurationSelector</td>\n      \n      <td class=\"param-description\">\n      <p translation-result=\"on\">一個函式，它會為來源 Observable 傳送的每個值回傳一個 Observable，然後用於推遲該項目在輸出 Observable 上的傳送，直到從該函式回傳的 Observable 傳送一個值。</p><p translation-origin=\"off\">        A function that\nreturns an Observable for each value emitted by the source Observable, which\nis then used to delay the emission of that item on the output Observable\nuntil the Observable returned from this function emits a value.</p>\n\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>subscriptionDelay</td>\n      \n      <td class=\"param-description\">\n      <p>        可選。預設值為 <code>undefined</code>。</p>\n<p translation-result=\"on\">一個 Observable，一旦它傳送任何值，就會觸發對來源 Observable 的訂閱。</p><p translation-origin=\"off\">        An Observable that triggers the\nsubscription to the source Observable once it emits any value.</p>\n\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值\">回傳值</h4>\n  <p translation-result=\"on\">一個回傳 Observable 的函式，該 Observable 會將來源 Observable 發出的值進行延遲，其時長由 <code>delayDurationSelector</code> 回傳的 Observable 決定。</p><p translation-origin=\"off\"><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code>: A function that returns an Observable that delays the emissions of\nthe source Observable by an amount of time specified by the Observable\nreturned by <code>delayDurationSelector</code>.</p>\n\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">參見<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/delayWhen#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/index/function/delay\"><code>delay</code></a>\n</li>\n    <li><a href=\"api/index/function/throttle\"><code>throttle</code></a>\n</li>\n    <li><a href=\"api/index/function/throttleTime\"><code>throttleTime</code></a>\n</li>\n    <li><a href=\"api/index/function/debounce\"><code>debounce</code></a>\n</li>\n    <li><a href=\"api/index/function/debounceTime\"><code>debounceTime</code></a>\n</li>\n    <li><a href=\"api/index/function/sample\"><code>sample</code></a>\n</li>\n    <li><a href=\"api/index/function/sampleTime\"><code>sampleTime</code></a>\n</li>\n    <li><a href=\"api/index/function/audit\"><code>audit</code></a>\n</li>\n    <li><a href=\"api/index/function/auditTime\"><code>auditTime</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - 6-to-7-change-summary\n - api/index\n - api/index/function/audit\n - api/index/function/delay\n - api/index/function/retryWhen\n - api/index/function/throttle\n - api/operators/delayWhen\n - api/operators/retryWhen\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/class/Observable\n - api/index/function/audit\n - api/index/function/auditTime\n - api/index/function/debounce\n - api/index/function/debounceTime\n - api/index/function/delay\n - api/index/function/delayWhen#delaywhen\n - api/index/function/delayWhen#example\n - api/index/function/delayWhen#see-also\n - api/index/function/from\n - api/index/function/fromEvent\n - api/index/function/interval\n - api/index/function/sample\n - api/index/function/sampleTime\n - api/index/function/throttle\n - api/index/function/throttleTime\n - api/index/interface/MonoTypeOperatorFunction\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/delayWhen.ts?message=docs(index)%3A%20describe%20your%20change...#L20-L110\n - https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/delayWhen.ts#L20-L110\n-->"
}