{
  "id": "api/index/function/windowWhen",
  "title": "windowWhen",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/windowWhen.ts?message=docs(index)%3A%20describe%20your%20change...#L8-L144\" aria-label=\"編輯建議\" title=\"編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/windowWhen.ts#L8-L144\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/windowWhen\", \"name\": \"windowWhen\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"windowwhen\">windowWhen<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/windowWhen#windowwhen\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">穩定</label>\n    \n    <label class=\"api-status-label operator\">運算子</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p translation-result=\"on\">使用能生成『關閉 Observable』（用於確定何時啟動新視窗）的工廠函式將源 Observable 的每個值分叉為巢狀 Observable。</p><p translation-origin=\"off\">Branch out the source Observable values as a nested Observable using a\nfactory function of closing Observables to determine when to start a new\nwindow.</p>\n\n<p translation-result=\"on\"><span class=\"informal\">類似於 <a href=\"api/index/function/bufferWhen\"><code>bufferWhen</code></a>，但它會發送一個巢狀 Observable 而非陣列。</span></p><p translation-origin=\"off\"><span class=\"informal\">It's like <a href=\"api/index/function/bufferWhen\"><code>bufferWhen</code></a>, but emits a nested\nObservable instead of an array.</span></p>\n\n<p><img src=\"/assets/images/marble-diagrams/windowWhen.png\" width=\"100%\" alt=\"windowWhen marble diagram\"></p>\n<p translation-result=\"on\">回傳一個 Observable，它會發出一些從源 Observable 收集來的條目的視窗。輸出 Observable 會發出一些已連線的、不重疊的視窗。每當指定的 <code>closingSelector</code> 函式生成的 Observable 發出條目時，它就會發出當前視窗並開啟一個新視窗。第一個視窗會在訂閱輸出 Observable 時立即開啟。</p><p translation-origin=\"off\">Returns an Observable that emits windows of items it collects from the source\nObservable. The output Observable emits connected, non-overlapping windows.\nIt emits the current window and opens a new one whenever the Observable\nproduced by the specified <code>closingSelector</code> function emits an item. The first\nwindow is opened immediately when subscribing to the output Observable.</p>\n\n<h2 id=\"example\" translation-result=\"on\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/windowWhen#example\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/windowWhen#example\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在 [1-5] 隨機秒數的每個視窗中只發送前兩次單擊事件</p><p translation-origin=\"off\">Emit only the first two clicks events in every window of [1-5] random seconds</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>, <a href=\"api/index/function/windowWhen\" class=\"code-anchor\">windowWhen</a>, <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>, <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>, <a href=\"api/index/function/mergeAll\" class=\"code-anchor\">mergeAll</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst clicks = <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>(document, 'click');\nconst result = clicks.pipe(\n  <a href=\"api/index/function/windowWhen\" class=\"code-anchor\">windowWhen</a>(() => <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000 + Math.random() * 4000)),\n  <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>(win => win.pipe(<a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(2))), // <a href=\"api/index/function/take\" class=\"code-anchor\">take</a> at most 2 emissions <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> each <a href=\"api/index/function/window\" class=\"code-anchor\">window</a>\n  <a href=\"api/index/function/mergeAll\" class=\"code-anchor\">mergeAll</a>()                     // flatten the Observable-of-Observables\n);\nresult.subscribe(x => console.log(x));\n</code-example>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/windowWhen\" class=\"code-anchor\">windowWhen</a>&#x3C;T>(closingSelector: () => <a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a>&#x3C;any>): <a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;T, <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;T>></code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>closingSelector</td>\n      \n      <td class=\"param-description\">\n      <p translation-result=\"on\">一個不帶引數並回傳一個 Observable 的函式，該 Observable 會發送信號（<code>next</code> 或 <code>complete</code>）以決定何時關閉前一個視窗並開始一個新視窗。</p><p translation-origin=\"off\">        A function that takes no\narguments and returns an Observable that signals (on either <code>next</code> or\n<code>complete</code>) when to close the previous window and start a new one.</p>\n\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值\">回傳值</h4>\n  <p translation-result=\"on\">一個回傳以視窗為條目的 Observable 的函式，這些視窗又都是 Observables。</p><p translation-origin=\"off\"><code><a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;T, <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;T>></code>: A function that returns an Observable of windows, which in turn are\nObservables.</p>\n\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">參見<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/windowWhen#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/index/function/window\"><code>window</code></a>\n</li>\n    <li><a href=\"api/index/function/windowCount\"><code>windowCount</code></a>\n</li>\n    <li><a href=\"api/index/function/windowTime\"><code>windowTime</code></a>\n</li>\n    <li><a href=\"api/index/function/windowToggle\"><code>windowToggle</code></a>\n</li>\n    <li><a href=\"api/index/function/bufferWhen\"><code>bufferWhen</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/index\n - api/index/function/bufferWhen\n - api/index/function/window\n - api/index/function/windowCount\n - api/index/function/windowTime\n - api/index/function/windowToggle\n - api/operators/windowWhen\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/class/Observable\n - api/index/function/bufferWhen\n - api/index/function/from\n - api/index/function/fromEvent\n - api/index/function/interval\n - api/index/function/map\n - api/index/function/mergeAll\n - api/index/function/take\n - api/index/function/window\n - api/index/function/windowCount\n - api/index/function/windowTime\n - api/index/function/windowToggle\n - api/index/function/windowWhen#example\n - api/index/function/windowWhen#see-also\n - api/index/function/windowWhen#windowwhen\n - api/index/interface/OperatorFunction\n - api/index/type-alias/ObservableInput\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/windowWhen.ts?message=docs(index)%3A%20describe%20your%20change...#L8-L144\n - https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/windowWhen.ts#L8-L144\n-->"
}