{
  "id": "api/index/function/windowCount",
  "title": "windowCount",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/windowCount.ts?message=docs(index)%3A%20describe%20your%20change...#L6-L149\" aria-label=\"編輯建議\" title=\"編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/windowCount.ts#L6-L149\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/windowCount\", \"name\": \"windowCount\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"windowcount\">windowCount<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/windowCount#windowcount\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">穩定</label>\n    \n    <label class=\"api-status-label operator\">運算子</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p translation-result=\"on\">將源 Observable 的每個值都分叉為一個巢狀 Observable，每個巢狀 Observable 最多傳送 <code>windowSize</code> 個值。</p><p translation-origin=\"off\">Branch out the source Observable values as a nested Observable with each\nnested Observable emitting at most <code>windowSize</code> values.</p>\n\n<p translation-result=\"on\"><span class=\"informal\">類似於 <a href=\"api/index/function/bufferCount\"><code>bufferCount</code></a>，但它會發送一個巢狀 Observable 而非陣列。</span></p><p translation-origin=\"off\"><span class=\"informal\">It's like <a href=\"api/index/function/bufferCount\"><code>bufferCount</code></a>, but emits a nested\nObservable instead of an array.</span></p>\n\n<p><img src=\"/assets/images/marble-diagrams/windowCount.png\" width=\"100%\" alt=\"windowCount marble diagram\"></p>\n<p translation-result=\"on\">回傳一個 Observable，它會發出一些從源 Observable 收集來的條目的視窗。輸出 Observable 會在每經過 <code>startWindowEvery</code> 個條目後傳送視窗，每個視窗包含不超過 <code>windowSize</code> 個條目。當源 Observable 完成或遇到錯誤時，輸出 Observable 會發送當前視窗並轉發來自源 Observable 的通知。如果沒有提供 <code>startWindowEvery</code>，那麼就會在源檔案的開始處以及當每個視窗按 <code>windowSize</code> 大小結束時立即啟動新視窗。</p><p translation-origin=\"off\">Returns an Observable that emits windows of items it collects from the source\nObservable. The output Observable emits windows every <code>startWindowEvery</code>\nitems, each containing no more than <code>windowSize</code> items. When the source\nObservable completes or encounters an error, the output Observable emits\nthe current window and propagates the notification from the source\nObservable. If <code>startWindowEvery</code> is not provided, then new windows are\nstarted immediately at the start of the source and when each window completes\nwith size <code>windowSize</code>.</p>\n\n<h2 id=\"examples\" translation-result=\"on\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/windowCount#examples\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"examples\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/windowCount#examples\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">從第一次之後，每三次忽略一個點選事件</p><p translation-origin=\"off\">Ignore every 3rd click event, starting from the first one</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>, <a href=\"api/index/function/windowCount\" class=\"code-anchor\">windowCount</a>, <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>, <a href=\"api/index/function/skip\" class=\"code-anchor\">skip</a>, <a href=\"api/index/function/mergeAll\" class=\"code-anchor\">mergeAll</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst clicks = <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>(document, 'click');\nconst result = clicks.pipe(\n  <a href=\"api/index/function/windowCount\" class=\"code-anchor\">windowCount</a>(3),\n  <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>(win => win.pipe(<a href=\"api/index/function/skip\" class=\"code-anchor\">skip</a>(1))), // <a href=\"api/index/function/skip\" class=\"code-anchor\">skip</a> <a href=\"api/index/function/first\" class=\"code-anchor\">first</a> <a href=\"api/index/function/of\" class=\"code-anchor\">of</a> <a href=\"api/index/function/every\" class=\"code-anchor\">every</a> 3 clicks\n  <a href=\"api/index/function/mergeAll\" class=\"code-anchor\">mergeAll</a>()                     // flatten the Observable-of-Observables\n);\nresult.subscribe(x => console.log(x));\n</code-example>\n<p translation-result=\"on\">從第三次之後，每三次忽略一個點選事件</p><p translation-origin=\"off\">Ignore every 3rd click event, starting from the third one</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>, <a href=\"api/index/function/windowCount\" class=\"code-anchor\">windowCount</a>, <a href=\"api/index/function/mergeAll\" class=\"code-anchor\">mergeAll</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst clicks = <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>(document, 'click');\nconst result = clicks.pipe(\n  <a href=\"api/index/function/windowCount\" class=\"code-anchor\">windowCount</a>(2, 3),\n  <a href=\"api/index/function/mergeAll\" class=\"code-anchor\">mergeAll</a>() // flatten the Observable-of-Observables\n);\nresult.subscribe(x => console.log(x));\n</code-example>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/windowCount\" class=\"code-anchor\">windowCount</a>&#x3C;T>(windowSize: number, startWindowEvery: number = 0): <a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;T, <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;T>></code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>windowSize</td>\n      \n      <td class=\"param-description\">\n      <p translation-result=\"on\">每個視窗要傳送的值的最大個數。</p><p translation-origin=\"off\">        The maximum number of values emitted by each\nwindow.</p>\n\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>startWindowEvery</td>\n      \n      <td class=\"param-description\">\n      <p>        可選。預設值為 <code>0</code>。</p>\n<p translation-result=\"on\">開始新視窗的時間間隔。例如，如果 <code>startWindowEvery</code> 為 <code>2</code> ，則將在源中的每個其他值上啟動一個新視窗。預設情況下，新視窗會在源的開頭啟動。</p><p translation-origin=\"off\">        Interval at which to start a new window.\nFor example if <code>startWindowEvery</code> is <code>2</code>, then a new window will be started\non every other value from the source. A new window is started at the\nbeginning of the source by default.</p>\n\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值\">回傳值</h4>\n  <p translation-result=\"on\">一個回傳以視窗為條目的 Observable 的函式，每個視窗都是一些值的 Observable。</p><p translation-origin=\"off\"><code><a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;T, <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;T>></code>: A function that returns an Observable of windows, which in turn are\nObservable of values.</p>\n\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">參見<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/windowCount#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/index/function/window\"><code>window</code></a>\n</li>\n    <li><a href=\"api/index/function/windowTime\"><code>windowTime</code></a>\n</li>\n    <li><a href=\"api/index/function/windowToggle\"><code>windowToggle</code></a>\n</li>\n    <li><a href=\"api/index/function/windowWhen\"><code>windowWhen</code></a>\n</li>\n    <li><a href=\"api/index/function/bufferCount\"><code>bufferCount</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/index\n - api/index/function/bufferCount\n - api/index/function/window\n - api/index/function/windowTime\n - api/index/function/windowToggle\n - api/index/function/windowWhen\n - api/operators/windowCount\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/class/Observable\n - api/index/function/bufferCount\n - api/index/function/every\n - api/index/function/first\n - api/index/function/from\n - api/index/function/fromEvent\n - api/index/function/map\n - api/index/function/mergeAll\n - api/index/function/of\n - api/index/function/skip\n - api/index/function/window\n - api/index/function/windowCount#examples\n - api/index/function/windowCount#see-also\n - api/index/function/windowCount#windowcount\n - api/index/function/windowTime\n - api/index/function/windowToggle\n - api/index/function/windowWhen\n - api/index/interface/OperatorFunction\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/windowCount.ts?message=docs(index)%3A%20describe%20your%20change...#L6-L149\n - https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/windowCount.ts#L6-L149\n-->"
}