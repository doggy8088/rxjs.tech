{
  "id": "api/index/function/auditTime",
  "title": "auditTime",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/auditTime.ts?message=docs(index)%3A%20describe%20your%20change...#L5-L72\" aria-label=\"編輯建議\" title=\"編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/auditTime.ts#L5-L72\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/auditTime\", \"name\": \"auditTime\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"audittime\">auditTime<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/auditTime#audittime\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">穩定</label>\n    \n    <label class=\"api-status-label operator\">運算子</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p translation-result=\"on\">在 <code>duration</code> 毫秒內忽略源值，然後從源 Observable 傳送最新值，然後重複此過程。</p><p translation-origin=\"off\">Ignores source values for <code>duration</code> milliseconds, then emits the most recent\nvalue from the source Observable, then repeats this process.</p>\n\n<p translation-result=\"on\"><span class=\"informal\">當它看到一個源值時，它會在 <code>duration</code> 毫秒內忽略這些後續值，之後它再從源中傳送最新的值。</span></p><p translation-origin=\"off\"><span class=\"informal\">When it sees a source value, it ignores that plus\nthe next ones for <code>duration</code> milliseconds, and then it emits the most recent\nvalue from the source.</span></p>\n\n<p><img src=\"/assets/images/marble-diagrams/auditTime.png\" width=\"100%\" alt=\"auditTime marble diagram\"></p>\n<p translation-result=\"on\"><code><a href=\"api/index/function/auditTime\" class=\"code-anchor\">auditTime</a></code> 類似於 <code><a href=\"api/index/function/throttleTime\" class=\"code-anchor\">throttleTime</a></code>，但它會從靜默時間視窗中傳送最後一個值，而不是第一個。<code><a href=\"api/index/function/auditTime\" class=\"code-anchor\">auditTime</a></code> 在其內部計時器被停用時會立即在輸出 Observable 上傳送來自源 Observable 的最新值，並在計時器被啟用時忽略源值。最初，定時器被停用。一旦第一個源值抵達，定時器就會被啟用。在 <code>duration</code> 毫秒（或由可選的 <code>scheduler</code> 內部確定的時間單位）過去之後，計時器被停用，然後在輸出 Observable 上傳送最近的源值，並且該過程對下一個源值重複。可以選擇使用 <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> 來管理計時器。</p><p translation-origin=\"off\"><code><a href=\"api/index/function/auditTime\" class=\"code-anchor\">auditTime</a></code> is similar to <code><a href=\"api/index/function/throttleTime\" class=\"code-anchor\">throttleTime</a></code>, but emits the last value from the\nsilenced time window, instead of the first value. <code><a href=\"api/index/function/auditTime\" class=\"code-anchor\">auditTime</a></code> emits the most\nrecent value from the source Observable on the output Observable as soon as\nits internal timer becomes disabled, and ignores source values while the\ntimer is enabled. Initially, the timer is disabled. As soon as the first\nsource value arrives, the timer is enabled. After <code>duration</code> milliseconds (or\nthe time unit determined internally by the optional <code>scheduler</code>) has passed,\nthe timer is disabled, then the most recent source value is emitted on the\noutput Observable, and this process repeats for the next source value.\nOptionally takes a <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> for managing timers.</p>\n\n<h2 id=\"example\" translation-result=\"on\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/auditTime#example\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/auditTime#example\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">以每秒最多一次的速度傳送點選事件</p><p translation-origin=\"off\">Emit clicks at a rate of at most one click per second</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>, <a href=\"api/index/function/auditTime\" class=\"code-anchor\">auditTime</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst clicks = <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>(document, 'click');\nconst result = clicks.pipe(<a href=\"api/index/function/auditTime\" class=\"code-anchor\">auditTime</a>(1000));\nresult.subscribe(x => console.log(x));\n</code-example>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/auditTime\" class=\"code-anchor\">auditTime</a>&#x3C;T>(duration: number, scheduler: <a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a> = <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>duration</td>\n      \n      <td class=\"param-description\">\n      <p translation-result=\"on\">在傳送最近的源值之前要等待的時間，其單位是毫秒或由可選 <code>scheduler</code> 內部確定的時間單位。</p><p translation-origin=\"off\">        Time to wait before emitting the most recent source\nvalue, measured in milliseconds or the time unit determined internally\nby the optional <code>scheduler</code>.</p>\n\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>scheduler</td>\n      \n      <td class=\"param-description\">\n      <p>        可選。預設值為 <code><a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a></code>。</p>\n<p translation-result=\"on\">用於管理處理限速行為的定時器。</p><p translation-origin=\"off\">        The <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> to use for\nmanaging the timers that handle the rate-limiting behavior.</p>\n\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值\">回傳值</h4>\n  <p translation-result=\"on\">一個回傳 Observable 的函式，該 Observable 會對來自源 Observable 進行傳送速率的限制。</p><p translation-origin=\"off\"><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code>: A function that returns an Observable that performs rate-limiting of\nemissions from the source Observable.</p>\n\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">參見<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/auditTime#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/index/function/audit\"><code>audit</code></a>\n</li>\n    <li><a href=\"api/index/function/debounceTime\"><code>debounceTime</code></a>\n</li>\n    <li><a href=\"api/index/function/delay\"><code>delay</code></a>\n</li>\n    <li><a href=\"api/index/function/sampleTime\"><code>sampleTime</code></a>\n</li>\n    <li><a href=\"api/index/function/throttleTime\"><code>throttleTime</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - 6-to-7-change-summary\n - api/index\n - api/index/function/audit\n - api/index/function/debounce\n - api/index/function/debounceTime\n - api/index/function/delay\n - api/index/function/delayWhen\n - api/index/function/sampleTime\n - api/index/function/throttleTime\n - api/operators/auditTime\n - guide/scheduler\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/const/asyncScheduler\n - api/index/function/audit\n - api/index/function/auditTime#audittime\n - api/index/function/auditTime#example\n - api/index/function/auditTime#see-also\n - api/index/function/debounceTime\n - api/index/function/delay\n - api/index/function/from\n - api/index/function/fromEvent\n - api/index/function/sampleTime\n - api/index/function/throttleTime\n - api/index/interface/MonoTypeOperatorFunction\n - api/index/interface/SchedulerLike\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/auditTime.ts?message=docs(index)%3A%20describe%20your%20change...#L5-L72\n - https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/auditTime.ts#L5-L72\n-->"
}