{
  "id": "api/index/function/fromEventPattern",
  "title": "fromEventPattern",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/observable/fromEventPattern.ts?message=docs(index)%3A%20describe%20your%20change...#L16-L189\" aria-label=\"編輯建議\" title=\"編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/observable/fromEventPattern.ts#L16-L189\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/fromEventPattern\", \"name\": \"fromEventPattern\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"fromeventpattern\">fromEventPattern<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/fromEventPattern#fromeventpattern\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">穩定</label>\n    \n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p translation-result=\"on\">從要註冊事件處理器的任意 API 建立一個 Observable。</p><p translation-origin=\"off\">Creates an Observable from an arbitrary API for registering event handlers.</p>\n\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a>&#x3C;T>(addHandler: (handler: NodeEventHandler) => any, removeHandler?: (handler: NodeEventHandler, signal?: any) => void, resultSelector?: (...args: any[]) => T): <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;T | T[]></code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>addHandler</td>\n      \n      <td class=\"param-description\">\n      <p translation-result=\"on\">以 <code>handler</code> 函式為引數並以某種方式將其附加到實際事件源的函式。</p><p translation-origin=\"off\">        A function that takes\na <code>handler</code> function as argument and attaches it somehow to the actual\nsource of events.</p>\n\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>removeHandler</td>\n      \n      <td class=\"param-description\">\n      <p>        可選。預設值為 <code>undefined</code>。</p>\n<p translation-result=\"on\">一個以 <code>handler</code> 函式為引數的函式，用於將其從事件源中刪除。如果 <code>addHandler</code> 回傳了某種令牌，則 <code>removeHandler</code> 函式會將它作為第二個引數。</p><p translation-origin=\"off\">        A function that\ntakes a <code>handler</code> function as an argument and removes it from the event source. If <code>addHandler</code>\nreturns some kind of token, <code>removeHandler</code> function will have it as a second parameter.</p>\n\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>resultSelector</td>\n      \n      <td class=\"param-description\">\n              <p>可選。預設值為 <code>undefined</code>。</p>\n        <p>型別：<code>(...args: any[]) => T</code>。</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值\">回傳值</h4>\n  <p translation-result=\"on\">一個 Observable，當事件發生時，它會發送第一個引數傳給註冊的事件處理器。或者，它會發送當時任何投影函式的回傳值。</p><p translation-origin=\"off\"><code><a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;T | T[]></code>: Observable which, when an event happens, emits first parameter\npassed to registered event handler. Alternatively it emits whatever project function returns\nat that moment.</p>\n\n\n  \n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\">說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/fromEventPattern#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p translation-result=\"on\"><span class=\"informal\">當要用 <a href=\"api/index/function/fromEvent\"><code>fromEvent</code></a> 尚未支援的某個方法新增事件處理器時。</span></p><p translation-origin=\"off\"><span class=\"informal\">When that method for adding event handler was something <a href=\"api/index/function/fromEvent\"><code>fromEvent</code></a>\nwas not prepared for.</span></p>\n\n<p><img src=\"/assets/images/marble-diagrams/fromEventPattern.png\" width=\"100%\" alt=\"fromEventPattern marble diagram\"></p>\n<p translation-result=\"on\"><code><a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a></code> 允許你將任何支援註冊事件處理函式的 API 轉換為 Observable。它類似於 <a href=\"api/index/function/fromEvent\"><code>fromEvent</code></a>，但更加靈活。事實上，<a href=\"api/index/function/fromEvent\"><code>fromEvent</code></a> 的所有用例都可以透過 <code><a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a></code> 輕鬆處理（儘管此方式稍微囉嗦一些）。</p><p translation-origin=\"off\"><code><a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a></code> allows you to convert into an Observable any API that supports registering handler functions\nfor events. It is similar to <a href=\"api/index/function/fromEvent\"><code>fromEvent</code></a>, but far\nmore flexible. In fact, all use cases of <a href=\"api/index/function/fromEvent\"><code>fromEvent</code></a> could be easily handled by\n<code><a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a></code> (although in slightly more verbose way).</p>\n\n<p translation-result=\"on\">該運算子會接受 <code>addHandler</code> 函式作為第一個引數，處理器的引數會傳給該函式。該處理器實際上是一個事件處理器函式，你現在可以將其傳給想要它的 API。<code>addHandler</code> 會在運算子回傳的 Observable 被訂閱時調用，因此當呼叫 <code><a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a></code> 時不一定會在 API 中註冊處理器。</p><p translation-origin=\"off\">This operator accepts as a first argument an <code>addHandler</code> function, which will be injected with\nhandler parameter. That handler is actually an event handler function that you now can pass\nto API expecting it. <code>addHandler</code> will be called whenever Observable\nreturned by the operator is subscribed, so registering handler in API will not\nnecessarily happen when <code><a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a></code> is called.</p>\n\n<p translation-result=\"on\">註冊後，每當發生了我們要監聽的事件時，<code><a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a></code> 回傳的 Observable 都會傳送事件處理函式收到的引數值。請注意，如果使用多個引數呼叫事件處理器，則第二個和後續引數將不會出現在 Observable 中。</p><p translation-origin=\"off\">After registration, every time an event that we listen to happens,\nObservable returned by <code><a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a></code> will emit value that event handler\nfunction was called with. Note that if event handler was called with more\nthan one argument, second and following arguments will not appear in the Observable.</p>\n\n<p translation-result=\"on\">如果你使用的 API 也允許取消註冊事件處理器，你可以將另一個函式 - <code>removeHandler</code> - 作為第二個引數傳給 <code><a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a></code>。它將注入到與以前相同的處理器函式中，現在你可以用此 API 取消註冊它。當結果 Observable 的消費者退訂時，就會呼叫 <code>removeHandler</code>。</p><p translation-origin=\"off\">If API you are using allows to unregister event handlers as well, you can pass to <code><a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a></code>\nanother function - <code>removeHandler</code> - as a second parameter. It will be injected\nwith the same handler function as before, which now you can use to unregister\nit from the API. <code>removeHandler</code> will be called when consumer of resulting Observable\nunsubscribes from it.</p>\n\n<p translation-result=\"on\">在某些 API 中，取消註冊的處理方式實際上有所不同。註冊事件處理器的方法回傳某種標記，該標記稍後用於識別應該取消註冊的函式，或者它本身具有取消註冊事件處理器的方法。如果你的 API 是這種情況，請確保註冊方法回傳的令牌會由 <code>addHandler</code> 回傳。然後它將作為第二個引數傳給 <code>removeHandler</code>，這樣就可以了。</p><p translation-origin=\"off\">In some APIs unregistering is actually handled differently. Method registering an event handler\nreturns some kind of token, which is later used to identify which function should\nbe unregistered or it itself has method that unregisters event handler.\nIf that is the case with your API, make sure token returned\nby registering method is returned by <code>addHandler</code>. Then it will be passed\nas a second argument to <code>removeHandler</code>, where you will be able to use it.</p>\n\n<p translation-result=\"on\">如果你需要訪問所有事件處理器引數（不僅是第一個），或者你需要以任何方式轉換它們，你可以使用可選的第三個引數呼叫 <code><a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a></code> - 投影函式，它將接受傳給事件處理器的所有引數。從投影函式回傳的任何內容都將出現在結果流上，而不是通常的事件處理器的第一個引數。這意味著可以將預設投影函式視為接受其第一個引數並忽略其餘引數的函式。</p><p translation-origin=\"off\">If you need access to all event handler parameters (not only the first one),\nor you need to transform them in any way, you can call <code><a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a></code> with optional\nthird parameter - project function which will accept all arguments passed to\nevent handler when it is called. Whatever is returned from project function will appear on\nresulting stream instead of usual event handlers first argument. This means\nthat default project can be thought of as function that takes its first parameter\nand ignores the rest.</p>\n\n<h2 id=\"examples\" translation-result=\"on\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/fromEventPattern#examples\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"examples\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/fromEventPattern#examples\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">傳送在 DOM 文件上發生的點選</p><p translation-origin=\"off\">Emits clicks happening on the DOM document</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nfunction addClickHandler(handler) {\n  document.addEventListener('click', handler);\n}\n\nfunction removeClickHandler(handler) {\n  document.removeEventListener('click', handler);\n}\n\nconst clicks = <a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a>(\n  addClickHandler,\n  removeClickHandler\n);\nclicks.subscribe(x => console.log(x));\n\n// Whenever you click anywhere in the browser, DOM MouseEvent\n// object will be logged.\n</code-example>\n<p translation-result=\"on\">與回傳取消令牌的 API 一起使用</p><p translation-origin=\"off\">Use with API that returns cancellation token</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst token = someAPI.registerEventHandler(function() {});\nsomeAPI.unregisterEventHandler(token); // this APIs cancellation method accepts\n                                       // not handler itself, but special token.\n\nconst someAPIObservable = <a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a>(\n  function(handler) { return someAPI.registerEventHandler(handler); }, // Note that we return the token here...\n  function(handler, token) { someAPI.unregisterEventHandler(token); }  // ...to then use it here.\n);\n</code-example>\n<p translation-result=\"on\">與投影函式一起使用</p><p translation-origin=\"off\">Use with project function</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nsomeAPI.registerEventHandler((eventType, eventMessage) => {\n  console.log(eventType, eventMessage); // Logs 'EVENT_TYPE' 'EVENT_MESSAGE' to console.\n});\n\nconst someAPIObservable = <a href=\"api/index/function/fromEventPattern\" class=\"code-anchor\">fromEventPattern</a>(\n  handler => someAPI.registerEventHandler(handler),\n  handler => someAPI.unregisterEventHandler(handler)\n  (eventType, eventMessage) => eventType + ' --- ' + eventMessage // without that function only 'EVENT_TYPE'\n);                                                                // would be emitted by the <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>\n\nsomeAPIObservable.subscribe(value => console.log(value));\n\n// Logs:\n// 'EVENT_TYPE --- EVENT_MESSAGE'\n</code-example>\n\n</section>\n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">參見<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/fromEventPattern#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/index/function/fromEvent\"><code>fromEvent</code></a>\n</li>\n    <li><a href=\"api/index/function/bindCallback\"><code>bindCallback</code></a>\n</li>\n    <li><a href=\"api/index/function/bindNodeCallback\"><code>bindNodeCallback</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/index\n - api/index/function/from\n - api/index/function/fromEvent\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/class/Observable\n - api/index/function/bindCallback\n - api/index/function/bindNodeCallback\n - api/index/function/from\n - api/index/function/fromEvent\n - api/index/function/fromEventPattern#description\n - api/index/function/fromEventPattern#examples\n - api/index/function/fromEventPattern#fromeventpattern\n - api/index/function/fromEventPattern#see-also\n - https://github.com/reactivex/rxjs/edit/master/src/internal/observable/fromEventPattern.ts?message=docs(index)%3A%20describe%20your%20change...#L16-L189\n - https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/observable/fromEventPattern.ts#L16-L189\n-->"
}