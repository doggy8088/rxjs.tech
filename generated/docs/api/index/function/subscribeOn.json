{
  "id": "api/index/function/subscribeOn",
  "title": "subscribeOn",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/subscribeOn.ts?message=docs(index)%3A%20describe%20your%20change...#L3-L92\" aria-label=\"編輯建議\" title=\"編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/subscribeOn.ts#L3-L92\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/subscribeOn\", \"name\": \"subscribeOn\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"subscribeon\">subscribeOn<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/subscribeOn#subscribeon\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">穩定</label>\n    \n    <label class=\"api-status-label operator\">運算子</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p translation-result=\"on\">在指定的 <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> 上非同步訂閱此 Observable 的各個 Observer。</p><p translation-origin=\"off\">Asynchronously subscribes Observers to this Observable on the specified <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a>.</p>\n\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/subscribeOn\" class=\"code-anchor\">subscribeOn</a>&#x3C;T>(scheduler: <a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a>, <a href=\"api/index/function/delay\" class=\"code-anchor\">delay</a>: number = 0): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>scheduler</td>\n      \n      <td class=\"param-description\">\n      <p translation-result=\"on\">要對其執行訂閱操作的 <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a>。</p><p translation-origin=\"off\">        The <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> to perform subscription actions on.</p>\n\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>delay</td>\n      \n      <td class=\"param-description\">\n      <p>        可選。預設值為 <code>0</code>。</p>\n<p translation-result=\"on\">一個延遲數量，用來傳給排程器以對訂閱進行延遲</p><p translation-origin=\"off\">        A delay to pass to the scheduler to delay subscriptions</p>\n\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值\">回傳值</h4>\n  <p translation-result=\"on\">一個回傳 Observable 的函式，會修改此 Observable，以便它的訂閱發生在指定的 <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> 上。</p><p translation-origin=\"off\"><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code>: A function that returns an Observable modified so that its\nsubscriptions happen on the specified <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a>.</p>\n\n\n  \n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\">說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/subscribeOn#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p translation-result=\"on\">透過 <code><a href=\"api/index/function/subscribeOn\" class=\"code-anchor\">subscribeOn</a></code>，你可以決定特定 Observable 在訂閱時要使用哪種型別的排程器。</p><p translation-origin=\"off\">With <code><a href=\"api/index/function/subscribeOn\" class=\"code-anchor\">subscribeOn</a></code> you can decide what type of scheduler a specific Observable will be using when it is subscribed to.</p>\n\n<p translation-result=\"on\">排程器負責控制從 Observable 流向 Observer 的傳送速度和順序。</p><p translation-origin=\"off\">Schedulers control the speed and order of emissions to observers from an Observable stream.</p>\n\n<p><img src=\"/assets/images/marble-diagrams/subscribeOn.png\" width=\"100%\" alt=\"subscribeOn marble diagram\"></p>\n<h2 id=\"example\" translation-result=\"on\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/subscribeOn#example\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/subscribeOn#example\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">給定以下程式碼：</p><p translation-origin=\"off\">Given the following code:</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst a = <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1, 2, 3);\nconst b = <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(4, 5, 6);\n\n<a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a>(a, b).subscribe(console.log);\n\n// Outputs\n// 1\n// 2\n// 3\n// 4\n// 5\n// 6\n</code-example>\n<p translation-result=\"on\">一旦訂閱，<code>a</code> 和 <code>b</code> 這兩個 Observable 都會直接同步傳送它們的值。</p><p translation-origin=\"off\">Both Observable <code>a</code> and <code>b</code> will emit their values directly and synchronously once they are subscribed to.</p>\n\n<p translation-result=\"on\">如果我們改為使用 <code><a href=\"api/index/function/subscribeOn\" class=\"code-anchor\">subscribeOn</a></code> 運算子來宣告我們想要使用 <a href=\"api/index/const/asyncScheduler\"><code>asyncScheduler</code></a> 來處理 Observable <code>a</code> 傳送的值：</p><p translation-origin=\"off\">If we instead use the <code><a href=\"api/index/function/subscribeOn\" class=\"code-anchor\">subscribeOn</a></code> operator declaring that we want to use the <a href=\"api/index/const/asyncScheduler\"><code>asyncScheduler</code></a> for values emitted by Observable <code>a</code>:</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/subscribeOn\" class=\"code-anchor\">subscribeOn</a>, <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>, <a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst a = <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1, 2, 3).pipe(<a href=\"api/index/function/subscribeOn\" class=\"code-anchor\">subscribeOn</a>(<a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>));\nconst b = <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(4, 5, 6);\n\n<a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a>(a, b).subscribe(console.log);\n\n// Outputs\n// 4\n// 5\n// 6\n// 1\n// 2\n// 3\n</code-example>\n<p translation-result=\"on\">這樣做的原因是 Observable <code>b</code> 像以前一樣直接和同步地傳送它的值，但是來自 <code>a</code> 的傳送是在事件迴圈上安排的，因為我們現在正在為那個特定的 Observable 使用 <a href=\"api/index/const/asyncScheduler\"><code>asyncScheduler</code></a>。</p><p translation-origin=\"off\">The reason for this is that Observable <code>b</code> emits its values directly and synchronously like before\nbut the emissions from <code>a</code> are scheduled on the event loop because we are now using the <a href=\"api/index/const/asyncScheduler\"><code>asyncScheduler</code></a> for that specific Observable.</p>\n\n\n</section>\n\n\n\n\n  \n\n  \n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/index\n - api/operators/subscribeOn\n - guide/scheduler\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/const/asyncScheduler\n - api/index/function/delay\n - api/index/function/from\n - api/index/function/merge\n - api/index/function/of\n - api/index/function/subscribeOn#description\n - api/index/function/subscribeOn#example\n - api/index/function/subscribeOn#subscribeon\n - api/index/interface/MonoTypeOperatorFunction\n - api/index/interface/SchedulerLike\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/subscribeOn.ts?message=docs(index)%3A%20describe%20your%20change...#L3-L92\n - https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/subscribeOn.ts#L3-L92\n-->"
}