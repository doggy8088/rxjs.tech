{
  "id": "api/index/function/combineLatest",
  "title": "combineLatest",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/observable/combineLatest.ts?message=docs(index)%3A%20describe%20your%20change...#L36-L36\" aria-label=\"編輯建議\" title=\"編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/observable/combineLatest.ts#L36-L36\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/combineLatest\", \"name\": \"combineLatest\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"combinelatest\">combineLatest<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/combineLatest#combinelatest\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">穩定</label>\n    \n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a>&#x3C;A extends readonly, unknown>()</code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <p>沒有引數。</p>\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n<section class=\"overloads\">\n  <h2 id=\"overloads\">過載形式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/combineLatest#overloads\"><i class=\"material-icons\">link</i></a></h2>\n  <table>\n  \n  <tbody><tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a>(arg: T): <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;unknown></code-example>\n\n\n  <div class=\"short-description\">\n    <p translation-result=\"on\">如果你在這裡傳入了 <code>any</code>，我們就無法確定它是陣列還是物件，所以要使用 <code>unknown</code>。請使用更好的型別。</p><p translation-origin=\"off\">You have passed <code>any</code> here, we can't figure out if it is\nan array or an object, so you're getting <code>unknown</code>. Use better types.</p>\n\n\n</div>\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>arg</td>\n      \n      <td class=\"param-description\">\n      <p translation-result=\"on\">型別為 <code>any</code> 的引數</p><p translation-origin=\"off\">        Something typed as <code>any</code></p>\n\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值\">回傳值</h4>\n  <p><code><a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;unknown></code></p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a>(sources: []): <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;<a href=\"api/index/function/never\" class=\"code-anchor\">never</a>></code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>sources</td>\n      \n      <td class=\"param-description\">\n              <p>型別：<code>[]</code>。</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值-1\">回傳值</h4>\n  <p><code><a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;<a href=\"api/index/function/never\" class=\"code-anchor\">never</a>></code></p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading deprecated-api-item\"> <a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a>()</code-example>\n\n\n\n  <div class=\"deprecated\">\n  <h4 id=\"deprecation-notes\">棄用說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/combineLatest#deprecation-notes\"><i class=\"material-icons\">link</i></a></h4>\n  <p translation-result=\"on\"><code>scheduler</code> 引數將在 v8 中刪除。使用 <code><a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a></code> 和 <code><a href=\"api/index/function/combineLatestAll\" class=\"code-anchor\">combineLatestAll</a></code>。詳細訊息： <a href=\"https://rxjs.dev/deprecations/scheduler-argument\">https://rxjs.dev/deprecations/scheduler-argument</a></p><p translation-origin=\"off\">The <code>scheduler</code> parameter will be removed in v8. Use <code><a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a></code> and <code><a href=\"api/index/function/combineLatestAll\" class=\"code-anchor\">combineLatestAll</a></code>. Details: <a href=\"https://rxjs.dev/deprecations/scheduler-argument\">https://rxjs.dev/deprecations/scheduler-argument</a></p>\n\n\n  </div>\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <p>沒有引數。</p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a>()</code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <p>沒有引數。</p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading deprecated-api-item\"> <a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a>()</code-example>\n\n\n\n  <div class=\"deprecated\">\n  <h4 id=\"deprecation-notes\">棄用說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/combineLatest#deprecation-notes\"><i class=\"material-icons\">link</i></a></h4>\n  <p translation-result=\"on\"><code>scheduler</code> 引數將在 v8 中刪除。使用 <code><a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a></code> 和 <code><a href=\"api/index/function/combineLatestAll\" class=\"code-anchor\">combineLatestAll</a></code>。詳細訊息： <a href=\"https://rxjs.dev/deprecations/scheduler-argument\">https://rxjs.dev/deprecations/scheduler-argument</a></p><p translation-origin=\"off\">The <code>scheduler</code> parameter will be removed in v8. Use <code><a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a></code> and <code><a href=\"api/index/function/combineLatestAll\" class=\"code-anchor\">combineLatestAll</a></code>. Details: <a href=\"https://rxjs.dev/deprecations/scheduler-argument\">https://rxjs.dev/deprecations/scheduler-argument</a></p>\n\n\n  </div>\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <p>沒有引數。</p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading deprecated-api-item\"> <a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a>()</code-example>\n\n\n\n  <div class=\"deprecated\">\n  <h4 id=\"deprecation-notes\">棄用說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/combineLatest#deprecation-notes\"><i class=\"material-icons\">link</i></a></h4>\n  <p translation-result=\"on\">改為傳遞一個源陣列。其餘引數簽名將在 v8 中刪除。詳細訊息： <a href=\"https://rxjs.dev/deprecations/array-argument\">https://rxjs.dev/deprecations/array-argument</a></p><p translation-origin=\"off\">Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: <a href=\"https://rxjs.dev/deprecations/array-argument\">https://rxjs.dev/deprecations/array-argument</a></p>\n\n\n  </div>\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <p>沒有引數。</p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading deprecated-api-item\"> <a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a>()</code-example>\n\n\n\n  <div class=\"deprecated\">\n  <h4 id=\"deprecation-notes\">棄用說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/combineLatest#deprecation-notes\"><i class=\"material-icons\">link</i></a></h4>\n  <p translation-result=\"on\"><code>scheduler</code> 引數將在 v8 中刪除。使用 <code><a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a></code> 和 <code><a href=\"api/index/function/combineLatestAll\" class=\"code-anchor\">combineLatestAll</a></code>。詳細訊息： <a href=\"https://rxjs.dev/deprecations/scheduler-argument\">https://rxjs.dev/deprecations/scheduler-argument</a></p><p translation-origin=\"off\">The <code>scheduler</code> parameter will be removed in v8. Use <code><a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a></code> and <code><a href=\"api/index/function/combineLatestAll\" class=\"code-anchor\">combineLatestAll</a></code>. Details: <a href=\"https://rxjs.dev/deprecations/scheduler-argument\">https://rxjs.dev/deprecations/scheduler-argument</a></p>\n\n\n  </div>\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <p>沒有引數。</p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading deprecated-api-item\"> <a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a>()</code-example>\n\n\n\n  <div class=\"deprecated\">\n  <h4 id=\"deprecation-notes\">棄用說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/combineLatest#deprecation-notes\"><i class=\"material-icons\">link</i></a></h4>\n  <p translation-result=\"on\">改為傳遞一個來源陣列。其餘引數簽名將在 v8 中刪除。詳細訊息： <a href=\"https://rxjs.dev/deprecations/array-argument\">https://rxjs.dev/deprecations/array-argument</a></p><p translation-origin=\"off\">Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: <a href=\"https://rxjs.dev/deprecations/array-argument\">https://rxjs.dev/deprecations/array-argument</a></p>\n\n\n  </div>\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <p>沒有引數。</p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading deprecated-api-item\"> <a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a>()</code-example>\n\n\n\n  <div class=\"deprecated\">\n  <h4 id=\"deprecation-notes\">棄用說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/combineLatest#deprecation-notes\"><i class=\"material-icons\">link</i></a></h4>\n  <p translation-result=\"on\"><code>scheduler</code> 引數將在 v8 中刪除。使用 <code><a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a></code> 和 <code><a href=\"api/index/function/combineLatestAll\" class=\"code-anchor\">combineLatestAll</a></code>。詳細訊息： <a href=\"https://rxjs.dev/deprecations/scheduler-argument\">https://rxjs.dev/deprecations/scheduler-argument</a></p><p translation-origin=\"off\">The <code>scheduler</code> parameter will be removed in v8. Use <code><a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a></code> and <code><a href=\"api/index/function/combineLatestAll\" class=\"code-anchor\">combineLatestAll</a></code>. Details: <a href=\"https://rxjs.dev/deprecations/scheduler-argument\">https://rxjs.dev/deprecations/scheduler-argument</a></p>\n\n\n  </div>\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <p>沒有引數。</p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a>(sourcesObject: { [x: string]: <a href=\"api/index/function/never\" class=\"code-anchor\">never</a>; }): <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;<a href=\"api/index/function/never\" class=\"code-anchor\">never</a>></code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>sourcesObject</td>\n      \n      <td class=\"param-description\">\n              <p>型別：<code>{ [x: string]: <a href=\"api/index/function/never\" class=\"code-anchor\">never</a>; }</code>。</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值-2\">回傳值</h4>\n  <p><code><a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;<a href=\"api/index/function/never\" class=\"code-anchor\">never</a>></code></p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a>(sourcesObject: T): <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;{\n    [K in keyof T]: <a href=\"api/index/type-alias/ObservedValueOf\" class=\"code-anchor\">ObservedValueOf</a>&#x3C;T[K]>;\n}></code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>sourcesObject</td>\n      \n      <td class=\"param-description\">\n              <p>型別：<code>T</code>。</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值-3\">回傳值</h4>\n  <p><code><a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;{     [K in keyof T]: <a href=\"api/index/type-alias/ObservedValueOf\" class=\"code-anchor\">ObservedValueOf</a>&#x3C;T[K]>; }></code></p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a>(...args: any[]): <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;R> | <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;<a href=\"api/index/type-alias/ObservedValueOf\" class=\"code-anchor\">ObservedValueOf</a>&#x3C;O>[]></code-example>\n\n\n  <div class=\"short-description\">\n    <p translation-result=\"on\">組合多個 Observable 以建立一個 Observable，其值是根據其每個輸入 Observable 的最新值計算得出的。</p><p translation-origin=\"off\">Combines multiple Observables to create an Observable whose values are\ncalculated from the latest values of each of its input Observables.</p>\n\n<p translation-result=\"on\"><span class=\"informal\">每當任何輸入 Observable 發出一個值時，它都會使用來自所有輸入的最新值某一個公式進行求值，然後發出該公式的輸出。</span></p><p translation-origin=\"off\"><span class=\"informal\">Whenever any input Observable emits a value, it\ncomputes a formula using the latest values from all the inputs, then emits\nthe output of that formula.</span></p>\n\n<p><img src=\"/assets/images/marble-diagrams/combineLatest.png\" width=\"100%\" alt=\"combineLatest marble diagram\"></p>\n<p translation-result=\"on\"><code><a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a></code> 會組合來自 observables 陣列中傳遞的所有 Observables 的值。這是透過按順序訂閱每個 Observable 來完成的，並且每當有任何 Observable 發出時，都會從每個 Observable 中收集一個包含最新值的陣列。因此，如果你將 <code>n</code> 個 Observables 傳遞給此運算子，則回傳的 Observable 將始終發出一個包含 <code>n</code> 個值的陣列，其順序與傳遞的 Observables 的順序相對應（第一個 Observable 的值將位於陣列的序號 0 處，因此在）。</p><p translation-origin=\"off\"><code><a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a></code> combines the values from all the Observables passed in the\nobservables array. This is done by subscribing to each Observable in order and,\nwhenever any Observable emits, collecting an array of the most recent\nvalues from each Observable. So if you pass <code>n</code> Observables to this operator,\nthe returned Observable will always emit an array of <code>n</code> values, in an order\ncorresponding to the order of the passed Observables (the value from the first Observable\nwill be at index 0 of the array and so on).</p>\n\n<p translation-result=\"on\"><code><a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a></code> 的靜態版本接受一個 Observables 陣列。請注意，如果你事先不知道要組合多少個 Observable，那麼用 Observable 陣列是一個不錯的選擇。傳遞一個空陣列將導致 Observable 立即完成。</p><p translation-origin=\"off\">Static version of <code><a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a></code> accepts an array of Observables. Note that an array of\nObservables is a good choice, if you don't know beforehand how many Observables\nyou will combine. Passing an empty array will result in an Observable that\ncompletes immediately.</p>\n\n<p translation-result=\"on\">為了確保輸出陣列始終具有相同的長度，<code><a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a></code> 實際上會等待所有輸入 Observable 至少發出一次，然後才開始發出結果。這意味著如果某些 Observable 在其它 Observable 開始發出之前已經發出了值，那麼除了最後一個值之外的所有值都會丟失。另一方面，如果某個 Observable 沒有發出值但完成了，則結果 Observable 將在同一時刻完成而不發出任何內容，因為現在已不可能再將完成的 Observable 中的值包含在結果陣列中。此外，如果某些輸入 Observable 沒有發出任何值並且永遠不會完成，<code><a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a></code> 也將永遠不會發出值並且永遠不會完成，因為它會一直次等待所有流發出一些值。</p><p translation-origin=\"off\">To ensure the output array always has the same length, <code><a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a></code> will\nactually wait for all input Observables to emit at least once,\nbefore it starts emitting results. This means if some Observable emits\nvalues before other Observables started emitting, all these values but the last\nwill be lost. On the other hand, if some Observable does not emit a value but\ncompletes, resulting Observable will complete at the same moment without\nemitting anything, since it will now be impossible to include a value from the\ncompleted Observable in the resulting array. Also, if some input Observable does\nnot emit any value and never completes, <code><a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a></code> will also never emit\nand never complete, since, again, it will wait for all streams to emit some\nvalue.</p>\n\n<p translation-result=\"on\">如果至少一個 Observable 被傳遞給 <code><a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a></code> 並且所有傳遞的 Observables 都發出了一些東西，那麼當所有組合流都已完成時，生成的 Observable 將完成。因此，即使某些 Observable 完成，<code><a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a></code> 的結果仍然會在其它 Observable 完成時發出值。如果是一個已完成的 Observable，從現在開始，它的值將永遠是最後一個發出的值。另一方面，如果有任何 Observable 報錯，<code><a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a></code> 也會立即報錯，並且所有其它 Observable 都將被退訂。</p><p translation-origin=\"off\">If at least one Observable was passed to <code><a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a></code> and all passed Observables\nemitted something, the resulting Observable will complete when all combined\nstreams complete. So even if some Observable completes, the result of\n<code><a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a></code> will still emit values when other Observables do. In case\nof a completed Observable, its value from now on will always be the last\nemitted value. On the other hand, if any Observable errors, <code><a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a></code>\nwill error immediately as well, and all other Observables will be unsubscribed.</p>\n\n<h2 id=\"examples\" translation-result=\"on\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/combineLatest#examples\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"examples\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/function/combineLatest#examples\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">組合兩個計時器 Observables</p><p translation-origin=\"off\">Combine two timer Observables</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/timer\" class=\"code-anchor\">timer</a>, <a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst firstTimer = <a href=\"api/index/function/timer\" class=\"code-anchor\">timer</a>(0, 1000); // emit 0, 1, 2... after <a href=\"api/index/function/every\" class=\"code-anchor\">every</a> second, starting <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> now\nconst secondTimer = <a href=\"api/index/function/timer\" class=\"code-anchor\">timer</a>(500, 1000); // emit 0, 1, 2... after <a href=\"api/index/function/every\" class=\"code-anchor\">every</a> second, starting 0,5s <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> now\nconst combinedTimers = <a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a>([firstTimer, secondTimer]);\ncombinedTimers.subscribe(value => console.log(value));\n// Logs\n// [0, 0] after 0.5s\n// [1, 0] after 1s\n// [1, 1] after 1.5s\n// [2, 1] after 2s\n</code-example>\n<p translation-result=\"on\">組合 Observables 的字典</p><p translation-origin=\"off\">Combine a dictionary of Observables</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/delay\" class=\"code-anchor\">delay</a>, <a href=\"api/index/function/startWith\" class=\"code-anchor\">startWith</a>, <a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst observables = {\n  a: <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1).pipe(<a href=\"api/index/function/delay\" class=\"code-anchor\">delay</a>(1000), <a href=\"api/index/function/startWith\" class=\"code-anchor\">startWith</a>(0)),\n  b: <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(5).pipe(<a href=\"api/index/function/delay\" class=\"code-anchor\">delay</a>(5000), <a href=\"api/index/function/startWith\" class=\"code-anchor\">startWith</a>(0)),\n  c: <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(10).pipe(<a href=\"api/index/function/delay\" class=\"code-anchor\">delay</a>(10000), <a href=\"api/index/function/startWith\" class=\"code-anchor\">startWith</a>(0))\n};\nconst combined = <a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a>(observables);\ncombined.subscribe(value => console.log(value));\n// Logs\n// { a: 0, b: 0, c: 0 } immediately\n// { a: 1, b: 0, c: 0 } after 1s\n// { a: 1, b: 5, c: 0 } after 5s\n// { a: 1, b: 5, c: 10 } after 10s\n</code-example>\n<p translation-result=\"on\">組合 Observables 陣列</p><p translation-origin=\"off\">Combine an array of Observables</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/delay\" class=\"code-anchor\">delay</a>, <a href=\"api/index/function/startWith\" class=\"code-anchor\">startWith</a>, <a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst observables = [1, 5, 10].map(\n  n => <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(n).pipe(\n    <a href=\"api/index/function/delay\" class=\"code-anchor\">delay</a>(n * 1000), // emit 0 and then emit n after n seconds\n    <a href=\"api/index/function/startWith\" class=\"code-anchor\">startWith</a>(0)\n  )\n);\nconst combined = <a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a>(observables);\ncombined.subscribe(value => console.log(value));\n// Logs\n// [0, 0, 0] immediately\n// [1, 0, 0] after 1s\n// [1, 5, 0] after 5s\n// [1, 5, 10] after 10s\n</code-example>\n<p translation-result=\"on\">使用 map 運算子動態計算 BMI</p><p translation-origin=\"off\">Use map operator to dynamically calculate the Body-Mass Index</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a>, <a href=\"api/index/function/map\" class=\"code-anchor\">map</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst weight = <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(70, 72, 76, 79, 75);\nconst height = <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1.76, 1.77, 1.78);\nconst bmi = <a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a>([weight, height]).pipe(\n  <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>(([w, h]) => w / (h * h)),\n);\nbmi.subscribe(x => console.log('BMI is ' + x));\n\n// With output to console:\n// BMI is 24.212293388429753\n// BMI is 23.93948099205209\n// BMI is 23.671253629592222\n</code-example>\n\n</div>\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>args</td>\n      \n      <td class=\"param-description\">\n              <p>型別：<code>any[]</code>。</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值-4\">回傳值</h4>\n  <p translation-result=\"on\">來自每個輸入 Observable 的最新值的投影結果的 Observable，或來自每個輸入 Observable 的最新值的陣列。</p><p translation-origin=\"off\"><code><a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;R> | <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;<a href=\"api/index/type-alias/ObservedValueOf\" class=\"code-anchor\">ObservedValueOf</a>&#x3C;O>[]></code>: An Observable of projected values from the most recent\nvalues from each input Observable, or an array of the most recent values from\neach input Observable.</p>\n\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  </tbody></table>\n</section>\n\n\n  \n\n  \n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/index\n - api/index/function/combineLatestAll\n - api/index/function/forkJoin\n - api/index/function/sequenceEqual\n - api/index/function/withLatestFrom\n - api/operators/combineLatest\n - api/operators/combineLatestAll\n - api/operators/sequenceEqual\n - api/operators/withLatestFrom\n - deprecations/array-argument\n - deprecations/multicasting\n - deprecations/scheduler-argument\n - guide/importing\n - guide/scheduler\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/class/Observable\n - api/index/function/combineLatest#combinelatest\n - api/index/function/combineLatest#deprecation-notes\n - api/index/function/combineLatest#examples\n - api/index/function/combineLatest#overloads\n - api/index/function/combineLatestAll\n - api/index/function/delay\n - api/index/function/every\n - api/index/function/from\n - api/index/function/map\n - api/index/function/never\n - api/index/function/of\n - api/index/function/scheduled\n - api/index/function/startWith\n - api/index/function/timer\n - api/index/type-alias/ObservedValueOf\n - https://github.com/reactivex/rxjs/edit/master/src/internal/observable/combineLatest.ts?message=docs(index)%3A%20describe%20your%20change...#L36-L36\n - https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/observable/combineLatest.ts#L36-L36\n - https://rxjs.dev/deprecations/array-argument\n - https://rxjs.dev/deprecations/scheduler-argument\n-->"
}