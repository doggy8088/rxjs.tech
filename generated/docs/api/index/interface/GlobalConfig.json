{
  "id": "api/index/interface/GlobalConfig",
  "title": "GlobalConfig",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/config.ts?message=docs(index)%3A%20describe%20your%20change...#L18-L113\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/config.ts#L18-L113\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/interface/GlobalConfig\", \"name\": \"GlobalConfig\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"globalconfig\">GlobalConfig<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/interface/GlobalConfig#globalconfig\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label interface\">interface</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p translation-result=\"on\">RxJS 的全局配置对象，用于配置诸如如何对未处理的错误做出响应。可通过 <a href=\"api/index/const/config\"><code>config</code></a> 对象访问。</p><p translation-origin=\"off\">The global configuration object for RxJS, used to configure things\nlike how to react on unhandled errors. Accessible via <a href=\"api/index/const/config\"><code>config</code></a>\nobject.</p>\n\n<p></p>\n  \n\n  \n\n  <section class=\"interface-overview\">\n<code-example language=\"ts\" hidecopy=\"true\">\ninterface <a href=\"api/index/interface/GlobalConfig\" class=\"code-anchor\">GlobalConfig</a> {\n  <a class=\"code-anchor\" href=\"api/index/interface/GlobalConfig#onUnhandledError\">onUnhandledError: ((err: any) => void) | null</a>\n  <a class=\"code-anchor\" href=\"api/index/interface/GlobalConfig#onStoppedNotification\">onStoppedNotification: ((notification: ObservableNotification&#x3C;any>, subscriber: Subscriber&#x3C;any>) => void) | null</a>\n  <a class=\"code-anchor deprecated-api-item\" href=\"api/index/interface/GlobalConfig#Promise\">Promise?: PromiseConstructorLike</a>\n  <a class=\"code-anchor deprecated-api-item\" href=\"api/index/interface/GlobalConfig#useDeprecatedSynchronousErrorHandling\">useDeprecatedSynchronousErrorHandling: boolean</a>\n  <a class=\"code-anchor deprecated-api-item\" href=\"api/index/interface/GlobalConfig#useDeprecatedNextContext\">useDeprecatedNextContext: boolean</a>\n}\n</code-example>\n\n  \n  \n\n\n  \n  \n\n</section>\n\n  \n  \n\n  \n<section class=\"instance-properties\">\n  <h2 id=\"属性\">属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/index/interface/GlobalConfig#属性\"><i class=\"material-icons\">link</i></a></h2>\n  <table class=\"is-full-width list-table properties-table\">\n    <thead>\n      <tr><th>属性</th><th>类型</th><th>说明</th></tr>\n    </thead>\n    <tbody>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"onUnhandledError\"></a><code class=\"\">onUnhandledError</code></td>\n        <td><label class=\"property-type-label\"><code>((err: any) => void) | null</code></label></td>\n        <td>\n          <p translation-result=\"on\">来自 RxJS 的未处理错误的注册点。这些错误不能通过在通常的订阅路径中使用代码来处理。例如，如果你配置了这个，并且你订阅了一个 observable 而没有提供错误处理器，那么来自该订阅的错误将在这里结束。这将<em>始终</em>在运行时的另一个作业上异步调用。这是因为我们不希望在这个用户配置的处理器中抛出的错误干扰库的行为。</p><p translation-origin=\"off\">A registration point for unhandled errors from RxJS. These are errors that\ncannot were not handled by consuming code in the usual subscription path. For\nexample, if you have this configured, and you subscribe to an observable without\nproviding an error handler, errors from that subscription will end up here. This\nwill <em>always</em> be called asynchronously on another job in the runtime. This is because\nwe do not want errors thrown in this user-configured handler to interfere with the\nbehavior of the library.</p>\n\n\n          \n          \n        </td>\n      </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"onStoppedNotification\"></a><code class=\"\">onStoppedNotification</code></td>\n        <td><label class=\"property-type-label\"><code>((notification: <a href=\"api/index/type-alias/ObservableNotification\" class=\"code-anchor\">ObservableNotification</a>&#x3C;any>, subscriber: <a href=\"api/index/class/Subscriber\" class=\"code-anchor\">Subscriber</a>&#x3C;any>) => void) | null</code></label></td>\n        <td>\n          <p translation-result=\"on\">由于已完成、出错或已明确退订而无法发送给订阅者的通知的注册点。默认情况下，发送给停止订阅者的下一个、完成和错误通知是 noops。但是，有时调用者可能想要不同的行为。例如，对于尝试向停止的订阅者报告错误的源，调用者可以将 RxJS 配置为抛出未处理的错误。这将<em>始终</em>在运行时的另一个作业上异步调用。这是因为我们不希望在这个用户配置的处理器中抛出的错误干扰库的行为。</p><p translation-origin=\"off\">A registration point for notifications that cannot be sent to subscribers because they\nhave completed, errored or have been explicitly unsubscribed. By default, next, complete\nand error notifications sent to stopped subscribers are noops. However, sometimes callers\nmight want a different behavior. For example, with sources that attempt to report errors\nto stopped subscribers, a caller can configure RxJS to throw an unhandled error instead.\nThis will <em>always</em> be called asynchronously on another job in the runtime. This is because\nwe do not want errors thrown in this user-configured handler to interfere with the\nbehavior of the library.</p>\n\n\n          \n          \n        </td>\n      </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"Promise\"></a><code class=\"deprecated-api-item\">Promise</code></td>\n        <td><label class=\"property-type-label\"><code>PromiseConstructorLike</code></label></td>\n        <td>\n          <p translation-result=\"on\">默认情况下用于 <a href=\"api/index/class/Observable#toPromise\">toPromise</a> 和 <a href=\"api/index/class/Observable#forEach\">forEach</a> 方法的 promise 构造函数。</p><p translation-origin=\"off\">The promise constructor used by default for <a href=\"api/index/class/Observable#toPromise\">toPromise</a> and <a href=\"api/index/class/Observable#forEach\">forEach</a>\nmethods.</p>\n\n\n          \n          \n        </td>\n      </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"useDeprecatedSynchronousErrorHandling\"></a><code class=\"deprecated-api-item\">useDeprecatedSynchronousErrorHandling</code></td>\n        <td><label class=\"property-type-label\"><code>boolean</code></label></td>\n        <td>\n          <p translation-result=\"on\">如果为 true，则打开同步错误重新抛出，这是 v6 及更高版本中已弃用的行为。这种行为会导致不良模式，例如将订阅调用包装在 try/catch 块中。它还启用了生产者干扰，这是一个令人讨厌的错误，其中下游消费者可能会因未处理的错误而破坏所有观察者的多播。除非需要为迁移原因争取时间，否则请勿使用此标志。</p><p translation-origin=\"off\">If true, turns on synchronous error rethrowing, which is a deprecated behavior\nin v6 and higher. This behavior enables bad patterns like wrapping a subscribe\ncall in a try/catch block. It also enables producer interference, a nasty bug\nwhere a multicast can be broken for all observers by a downstream consumer with\nan unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BUY TIME\nFOR MIGRATION REASONS.</p>\n\n\n          \n          \n        </td>\n      </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"useDeprecatedNextContext\"></a><code class=\"deprecated-api-item\">useDeprecatedNextContext</code></td>\n        <td><label class=\"property-type-label\"><code>boolean</code></label></td>\n        <td>\n          <p translation-result=\"on\">如果为 true，则启用 v5 中尚未记录的功能：在传递给 <code>subscribe</code> 的观察者中创建的 <code>next</code> 函数中通过 <code>this</code> 上下文访问 <code>unsubscribe()</code> 的能力。</p><p translation-origin=\"off\">If true, enables an as-of-yet undocumented feature from v5: The ability to access\n<code>unsubscribe()</code> via <code>this</code> context in <code>next</code> functions created in observers passed\nto <code>subscribe</code>.</p>\n\n<p translation-result=\"on\">之所以将其删除，是因为性能存在严重问题，并且当 POJO 以外的类型作为订阅者传递给订阅时，它也可能导致问题，因为它们 <code>this</code> 上下文可能会被覆盖。</p><p translation-origin=\"off\">This is being removed because the performance was severely problematic, and it could also cause\nissues when types other than POJOs are passed to subscribe as subscribers, as they will likely have\ntheir <code>this</code> context overwritten.</p>\n\n\n          \n          \n        </td>\n      </tr>\n    \n    </tbody>\n  </table>\n</section>\n  \n\n\n  \n\n  \n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/index\n - api/index/class/Observable\n - api/index/const/config\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/class/Observable#forEach\n - api/index/class/Observable#toPromise\n - api/index/class/Subscriber\n - api/index/const/config\n - api/index/interface/GlobalConfig#Promise\n - api/index/interface/GlobalConfig#globalconfig\n - api/index/interface/GlobalConfig#onStoppedNotification\n - api/index/interface/GlobalConfig#onUnhandledError\n - api/index/interface/GlobalConfig#useDeprecatedNextContext\n - api/index/interface/GlobalConfig#useDeprecatedSynchronousErrorHandling\n - api/index/interface/GlobalConfig#属性\n - api/index/type-alias/ObservableNotification\n - https://github.com/reactivex/rxjs/edit/master/src/internal/config.ts?message=docs(index)%3A%20describe%20your%20change...#L18-L113\n - https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/config.ts#L18-L113\n-->"
}