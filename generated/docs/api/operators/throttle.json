{
  "id": "api/operators/throttle",
  "title": "throttle",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/throttle.ts?message=docs(operators)%3A%20describe%20your%20change...#L17-L143\" aria-label=\"編輯建議\" title=\"編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/throttle.ts#L17-L143\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/throttle\", \"name\": \"throttle\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"throttle\">throttle<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/throttle#throttle\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">穩定</label>\n    \n    <label class=\"api-status-label operator\">運算子</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p translation-result=\"on\">從來源 Observable 傳送一個值，然後在由另一個 Observable 確定的持續時間內忽略後續源值，然後重複此過程。</p><p translation-origin=\"off\">Emits a value from the source Observable, then ignores subsequent source\nvalues for a duration determined by another Observable, then repeats this\nprocess.</p>\n\n<p translation-result=\"on\"><span class=\"informal\">它很像 <a href=\"api/operators/throttleTime\"><code>throttleTime</code></a>，但其靜默持續時間由第二個 Observable 決定。</span></p><p translation-origin=\"off\"><span class=\"informal\">It's like <a href=\"api/operators/throttleTime\"><code>throttleTime</code></a>, but the silencing\nduration is determined by a second Observable.</span></p>\n\n<p><img src=\"/assets/images/marble-diagrams/throttle.svg\" width=\"100%\" alt=\"throttle marble diagram\"></p>\n<p translation-result=\"on\">當其內部定時器被停用時，<code><a href=\"api/index/function/throttle\" class=\"code-anchor\">throttle</a></code> 就會在輸出 Observable 上傳送來源 Observable 的值，並在啟用內部定時器時忽略源值。最初，定時器會被停用。一旦第一個源值抵達，它就會轉發到輸出 Observable，然後透過使用源值呼叫 <code>durationSelector</code> 函式來啟用計時器，該函式會回傳一個 持續時間（duration）Observable。當持續時間 Observable 發出一個值時，定時器就會被停用，下一個源值也以此類推。</p><p translation-origin=\"off\"><code><a href=\"api/index/function/throttle\" class=\"code-anchor\">throttle</a></code> emits the source Observable values on the output Observable\nwhen its internal timer is disabled, and ignores source values when the timer\nis enabled. Initially, the timer is disabled. As soon as the first source\nvalue arrives, it is forwarded to the output Observable, and then the timer\nis enabled by calling the <code>durationSelector</code> function with the source value,\nwhich returns the \"duration\" Observable. When the duration Observable emits a\nvalue, the timer is disabled, and this process repeats for the\nnext source value.</p>\n\n<h2 id=\"example\" translation-result=\"on\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/throttle#example\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/throttle#example\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">以每秒最多一次點選的速度傳送點選</p><p translation-origin=\"off\">Emit clicks at a rate of at most one click per second</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>, <a href=\"api/index/function/throttle\" class=\"code-anchor\">throttle</a>, <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst clicks = <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>(document, 'click');\nconst result = clicks.pipe(<a href=\"api/index/function/throttle\" class=\"code-anchor\">throttle</a>(() => <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000)));\n\nresult.subscribe(x => console.log(x));\n</code-example>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/throttle\" class=\"code-anchor\">throttle</a>&#x3C;T>(durationSelector: (value: T) => <a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a>&#x3C;any>, <a href=\"api/index/const/config\" class=\"code-anchor\">config</a>: <a href=\"api/index/interface/ThrottleConfig\" class=\"code-anchor\">ThrottleConfig</a> = defaultThrottleConfig): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>durationSelector</td>\n      \n      <td class=\"param-description\">\n      <p translation-result=\"on\">一個從來源 Observable 接收值的函式，用於計算每個源值的靜默持續時間，回傳值為 Observable 或 Promise。</p><p translation-origin=\"off\">        A function\nthat receives a value from the source Observable, for computing the silencing\nduration for each source value, returned as an Observable or a Promise.</p>\n\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>config</td>\n      \n      <td class=\"param-description\">\n      <p>        可選。預設值為 <code>defaultThrottleConfig</code>。</p>\n<p translation-result=\"on\">用於定義 <code>leading</code> 和 <code>trailing</code> 行為的設定物件。預設為 <code>{ leading: true, trailing: false }</code>。</p><p translation-origin=\"off\">        a configuration object to define <code>leading</code> and <code>trailing</code> behavior. Defaults\nto <code>{ leading: true, trailing: false }</code>.</p>\n\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值\">回傳值</h4>\n  <p translation-result=\"on\">一個回傳 Observable 的函式，該 Observable 會執行節流操作以限制源的傳送速度。</p><p translation-origin=\"off\"><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code>: A function that returns an Observable that performs the throttle\noperation to limit the rate of emissions from the source.</p>\n\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">參見<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/throttle#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/operators/audit\"><code>audit</code></a>\n</li>\n    <li><a href=\"api/operators/debounce\"><code>debounce</code></a>\n</li>\n    <li><a href=\"api/operators/delayWhen\"><code>delayWhen</code></a>\n</li>\n    <li><a href=\"api/operators/sample\"><code>sample</code></a>\n</li>\n    <li><a href=\"api/operators/throttleTime\"><code>throttleTime</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/operators\n - api/operators/audit\n - api/operators/debounce\n - api/operators/debounceTime\n - api/operators/delay\n - api/operators/delayWhen\n - api/operators/sample\n - api/operators/throttleTime\n-->\n<!-- links from this doc:\n - /api\n - api/index/const/config\n - api/index/function/from\n - api/index/function/fromEvent\n - api/index/function/interval\n - api/index/function/throttle\n - api/index/interface/MonoTypeOperatorFunction\n - api/index/interface/ThrottleConfig\n - api/index/type-alias/ObservableInput\n - api/operators\n - api/operators/audit\n - api/operators/debounce\n - api/operators/delayWhen\n - api/operators/sample\n - api/operators/throttle#example\n - api/operators/throttle#see-also\n - api/operators/throttle#throttle\n - api/operators/throttleTime\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/throttle.ts?message=docs(operators)%3A%20describe%20your%20change...#L17-L143\n - https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/throttle.ts#L17-L143\n-->"
}