{
  "id": "api/operators/delayWhen",
  "title": "delayWhen",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/delayWhen.ts?message=docs(operators)%3A%20describe%20your%20change...#L20-L110\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/delayWhen.ts#L20-L110\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/delayWhen\", \"name\": \"delayWhen\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"delaywhen\">delayWhen<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/delayWhen#delaywhen\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    <label class=\"api-status-label operator\">操作符</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p translation-result=\"on\">将源 Observable 中条目的发送时机延迟给定的时间跨度，该时间跨度取决于另一个 Observable 的发送时间。</p><p translation-origin=\"off\">Delays the emission of items from the source Observable by a given time span\ndetermined by the emissions of another Observable.</p>\n\n<p translation-result=\"on\"><span class=\"informal\">类似于 <a href=\"api/operators/delay\"><code>delay</code></a>，但延迟持续时间的时间跨度由第二个 Observable 决定。</span></p><p translation-origin=\"off\"><span class=\"informal\">It's like <a href=\"api/operators/delay\"><code>delay</code></a>, but the time span of the\ndelay duration is determined by a second Observable.</span></p>\n\n<p><img src=\"/assets/images/marble-diagrams/delayWhen.png\" width=\"100%\" alt=\"delayWhen marble diagram\"></p>\n<p translation-result=\"on\"><code><a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a></code> 将每个从源 Observable 发送的值延迟一段时间，这个时间跨度由另一个 Observable 决定。当源发送一个值时，就会以源值作为参数调用 <code>delayDurationSelector</code> 函数，并返回一个 Observable，即 “duration”（持续时间） Observable。只有当持续时间 Observable 发出一个值或完成通知时，源值才会在输出 Observable 上发送。以通知器的完成来触发源值的发送是已弃用的行为，将在未来的版本中删除。</p><p translation-origin=\"off\"><code><a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a></code> time shifts each emitted value from the source Observable by a\ntime span determined by another Observable. When the source emits a value,\nthe <code>delayDurationSelector</code> function is called with the source value as\nargument, and should return an Observable, called the \"duration\" Observable.\nThe source value is emitted on the output Observable only when the duration\nObservable emits a value or completes.\nThe completion of the notifier triggering the emission of the source value\nis deprecated behavior and will be removed in future versions.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a></code> 接受第二个可选参数 <code>subscriptionDelay</code>，它是一个 Observable。当 <code>subscriptionDelay</code> 发出它的第一个值或完成通知时，源 Observable 就会被订阅并开始像上一段中描述的那样行动。如果未提供 <code>subscriptionDelay</code>，则 <code><a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a></code> 将在输出 Observable 被订阅后立即订阅源 Observable。</p><p translation-origin=\"off\">Optionally, <code><a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a></code> takes a second argument, <code>subscriptionDelay</code>, which\nis an Observable. When <code>subscriptionDelay</code> emits its first value or\ncompletes, the source Observable is subscribed to and starts behaving like\ndescribed in the previous paragraph. If <code>subscriptionDelay</code> is not provided,\n<code><a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a></code> will subscribe to the source Observable as soon as the output\nObservable is subscribed.</p>\n\n<h2 id=\"example\" translation-result=\"on\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/delayWhen#example\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/delayWhen#example\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">将每次点击延迟随机的时间量，介于 0 到 5 秒之间</p><p translation-origin=\"off\">Delay each click by a random amount of time, between 0 and 5 seconds</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>, <a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a>, <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst clicks = <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>(document, 'click');\nconst delayedClicks = clicks.pipe(\n  <a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a>(() => <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(Math.random() * 5000))\n);\ndelayedClicks.subscribe(x => console.log(x));\n</code-example>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/delayWhen\" class=\"code-anchor\">delayWhen</a>&#x3C;T>(delayDurationSelector: (value: T, index: number) => <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;any>, subscriptionDelay?: <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;any>): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>delayDurationSelector</td>\n      \n      <td class=\"param-description\">\n      <p translation-result=\"on\">一个函数，它会为源 Observable 发送的每个值返回一个 Observable，然后用于推迟该条目在输出 Observable 上的发送，直到从该函数返回的 Observable 发送一个值。</p><p translation-origin=\"off\">        A function that\nreturns an Observable for each value emitted by the source Observable, which\nis then used to delay the emission of that item on the output Observable\nuntil the Observable returned from this function emits a value.</p>\n\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>subscriptionDelay</td>\n      \n      <td class=\"param-description\">\n      <p>        可选。默认值为 <code>undefined</code>。</p>\n<p translation-result=\"on\">一个 Observable，一旦它发送任何值，就会触发对源 Observable 的订阅。</p><p translation-origin=\"off\">        An Observable that triggers the\nsubscription to the source Observable once it emits any value.</p>\n\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值\">返回值</h4>\n  <p translation-result=\"on\">一个返回 Observable 的函数，该 Observable 会将源 Observable 发出的值进行延迟，其时长由 <code>delayDurationSelector</code> 返回的 Observable 决定。</p><p translation-origin=\"off\"><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code>: A function that returns an Observable that delays the emissions of\nthe source Observable by an amount of time specified by the Observable\nreturned by <code>delayDurationSelector</code>.</p>\n\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">参见<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/delayWhen#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/operators/delay\"><code>delay</code></a>\n</li>\n    <li><a href=\"api/operators/throttle\"><code>throttle</code></a>\n</li>\n    <li><a href=\"api/operators/throttleTime\"><code>throttleTime</code></a>\n</li>\n    <li><a href=\"api/operators/debounce\"><code>debounce</code></a>\n</li>\n    <li><a href=\"api/operators/debounceTime\"><code>debounceTime</code></a>\n</li>\n    <li><a href=\"api/operators/sample\"><code>sample</code></a>\n</li>\n    <li><a href=\"api/operators/sampleTime\"><code>sampleTime</code></a>\n</li>\n    <li><a href=\"api/operators/audit\"><code>audit</code></a>\n</li>\n    <li><a href=\"api/operators/auditTime\"><code>auditTime</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/operators\n - api/operators/audit\n - api/operators/delay\n - api/operators/throttle\n-->\n<!-- links from this doc:\n - /api\n - api/index/class/Observable\n - api/index/function/delayWhen\n - api/index/function/from\n - api/index/function/fromEvent\n - api/index/function/interval\n - api/index/interface/MonoTypeOperatorFunction\n - api/operators\n - api/operators/audit\n - api/operators/auditTime\n - api/operators/debounce\n - api/operators/debounceTime\n - api/operators/delay\n - api/operators/delayWhen#delaywhen\n - api/operators/delayWhen#example\n - api/operators/delayWhen#see-also\n - api/operators/sample\n - api/operators/sampleTime\n - api/operators/throttle\n - api/operators/throttleTime\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/delayWhen.ts?message=docs(operators)%3A%20describe%20your%20change...#L20-L110\n - https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/delayWhen.ts#L20-L110\n-->"
}