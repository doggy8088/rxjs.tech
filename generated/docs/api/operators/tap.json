{
  "id": "api/operators/tap",
  "title": "tap",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/tap.ts?message=docs(operators)%3A%20describe%20your%20change...#L26-L193\" aria-label=\"編輯建議\" title=\"編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/tap.ts#L26-L193\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/tap\", \"name\": \"tap\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"tap\">tap<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/tap#tap\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">穩定</label>\n    \n    <label class=\"api-status-label operator\">運算子</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p translation-result=\"on\">用於對來自源 observable 的通知執行副作用</p><p translation-origin=\"off\">Used to perform side-effects for notifications from the source observable</p>\n\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>&#x3C;T>(observerOrNext?: Partial&#x3C;TapObserver&#x3C;T>> | ((value: T) => void), error?: (e: any) => void, complete?: () => void): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>observerOrNext</td>\n      \n      <td class=\"param-description\">\n      <p>        可選。預設值為 <code>undefined</code>。</p>\n<p translation-result=\"on\">下一個值的處理器或部分 Observer</p><p translation-origin=\"off\">        A next handler or partial observer</p>\n\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>error</td>\n      \n      <td class=\"param-description\">\n      <p>        可選。預設值為 <code>undefined</code>。</p>\n<p translation-result=\"on\">錯誤處理器</p><p translation-origin=\"off\">        An error handler</p>\n\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>complete</td>\n      \n      <td class=\"param-description\">\n      <p>        可選。預設值為 <code>undefined</code>。</p>\n<p translation-result=\"on\">完成處理器</p><p translation-origin=\"off\">        A completion handler</p>\n\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值\">回傳值</h4>\n  <p translation-result=\"on\">回傳與源相同的 Observable 的函式，但會為每個條目執行指定的 Observer 或回呼。</p><p translation-origin=\"off\"><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code>: A function that returns an Observable identical to the source, but\nruns the specified Observer or callback(s) for each item.</p>\n\n\n  \n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\">說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/tap#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p translation-result=\"on\"><span class=\"informal\">當你想借助某個通知來影響外部狀態而不想更改此通知時使用</span></p><p translation-origin=\"off\"><span class=\"informal\">Used when you want to affect outside state with a notification without altering the notification</span></p>\n\n<p><img src=\"/assets/images/marble-diagrams/tap.png\" width=\"100%\" alt=\"tap marble diagram\"></p>\n<p translation-result=\"on\">tap 旨在讓開發者在指定的地方執行副作用。雖然你<em>可以</em>在 <code><a href=\"api/index/function/map\" class=\"code-anchor\">map</a></code> 或 <code><a href=\"api/index/function/mergeMap\" class=\"code-anchor\">mergeMap</a></code> 內部執行副作用，但這會使它們的對映函式不再純淨，這雖然不是什麼大不了的，但會使你無法呼叫諸如 memoize 之類的函式。<code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> 運算子就是專為此類副作用設計的，以幫助你消除其它操作的副作用。</p><p translation-origin=\"off\">Tap is designed to allow the developer a designated place to perform side effects. While you <em>could</em> perform side-effects\ninside of a <code><a href=\"api/index/function/map\" class=\"code-anchor\">map</a></code> or a <code><a href=\"api/index/function/mergeMap\" class=\"code-anchor\">mergeMap</a></code>, that would make their mapping functions impure, which isn't always a big deal, but will\nmake it so you can't do things like memoize those functions. The <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> operator is designed solely for such side-effects to\nhelp you remove side-effects from other operations.</p>\n\n<p translation-result=\"on\">對於任何通知：下一個、出錯或完成，<code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> 都將透過函式引用或部分 Observer 呼叫你提供給它的適當回呼，然後將該通知傳遞到流中。</p><p translation-origin=\"off\">For any notification, next, error, or complete, <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> will call the appropriate callback you have provided to it, via a function\nreference, or a partial observer, then pass that notification down the stream.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> 回傳的 observable 是源的精準映象，但有一個例外：在提供給 <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> 的處理器中同步發生的任何錯誤都將作為結果 observable 中的錯誤進行傳送。</p><p translation-origin=\"off\">The observable returned by <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> is an exact mirror of the source, with one exception: Any error that occurs -- synchronously -- in a handler\nprovided to <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> will be emitted as an error from the returned observable.</p>\n\n<blockquote>\n<p translation-result=\"on\">小心！你可以在某些物件透過 <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> 運算子的處理器時對其進行修改。</p><p translation-origin=\"off\">Be careful! You can mutate objects as they pass through the <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> operator's handlers.</p>\n\n</blockquote>\n<p translation-result=\"on\"><code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> 最常見的用途實際上是用於除錯。你可以在 Observable <code><a href=\"api/index/function/pipe\" class=\"code-anchor\">pipe</a></code> 中的任何位置放置一個 <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(console.log)</code>，以記錄這些通知，因為它們是由以前的操作回傳的源發出來的。</p><p translation-origin=\"off\">The most common use of <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> is actually for debugging. You can place a <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(console.log)</code> anywhere\nin your observable <code><a href=\"api/index/function/pipe\" class=\"code-anchor\">pipe</a></code>, log out the notifications as they are emitted by the source returned by the previous\noperation.</p>\n\n<h2 id=\"examples\" translation-result=\"on\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/tap#examples\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"examples\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/tap#examples\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在處理之前檢查一個隨機數。下面是一個 observable，它將使用 0 到 1 之間的隨機數，並根據該數字的大小傳送 <code>'big'</code> 或 <code>'small'</code>。但是我們還想記錄其原始數字是多少，所以我們新增了一個 <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(console.log)</code>。</p><p translation-origin=\"off\">Check a random number before it is handled. Below is an observable that will use a random number between 0 and 1,\nand emit <code>'big'</code> or <code>'small'</code> depending on the size of that number. But we wanted to log what the original number\nwas, so we have added a <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(console.log)</code>.</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>, <a href=\"api/index/function/map\" class=\"code-anchor\">map</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\n<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(Math.random()).pipe(\n  <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(console.log),\n  <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>(n => n > 0.5 ? 'big' : 'small')\n).subscribe(console.log);\n</code-example>\n<p translation-result=\"on\">使用 <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> 分析某個值並強制出錯。下面是一個 observable，在我們的系統中，只想傳送從另一個來源獲得的 3 或更小的數字。我們可以使用 <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> 來強制我們的 observable 出錯。</p><p translation-origin=\"off\">Using <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> to analyze a value and force an error. Below is an observable where in our system we only\nwant to emit numbers 3 or less we get from another source. We can force our observable to error\nusing <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code>.</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst source = <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1, 2, 3, 4, 5);\n\nsource.pipe(\n  <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(n => {\n    if (n > 3) {\n      throw new TypeError(`Value ${ n } is greater than 3`);\n    }\n  })\n)\n.subscribe({ next: console.log, error: err => console.log(err.message) });\n</code-example>\n<p translation-result=\"on\">我們想知道一個 observable 何時完成，然後再繼續處理下一個 observable。下面的系統將從 3 個不同的 observables 中依次傳送一系列隨機的 <code>'X'</code> 字元。在這種情況下，我們知道一個 observable 何時完成並移動到下一個的唯一方法是因為我們新增了一個帶有把日誌記錄到控制台這個副作用的 <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code>。</p><p translation-origin=\"off\">We want to know when an observable completes before moving on to the next observable. The system\nbelow will emit a random series of <code>'X'</code> characters from 3 different observables in sequence. The\nonly way we know when one observable completes and moves to the next one, in this case, is because\nwe have added a <code><a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a></code> with the side effect of logging to console.</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/concatMap\" class=\"code-anchor\">concatMap</a>, <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>, <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>, <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\n<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1, 2, 3).pipe(\n  <a href=\"api/index/function/concatMap\" class=\"code-anchor\">concatMap</a>(n => <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000).pipe(\n    <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(Math.round(Math.random() * 10)),\n    <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>(() => 'X'),\n    <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>({ complete: () => console.log(`Done with ${ n }`) })\n  ))\n)\n.subscribe(console.log);\n</code-example>\n\n</section>\n\n\n\n<section class=\"overloads\">\n  <h2 id=\"overloads\">過載形式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/tap#overloads\"><i class=\"material-icons\">link</i></a></h2>\n  <table>\n  \n  <tbody><tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(observer?: Partial&#x3C;TapObserver&#x3C;T>>): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>observer</td>\n      \n      <td class=\"param-description\">\n              <p>可選。預設值為 <code>undefined</code>。</p>\n        <p>型別：<code>Partial<tapobserver<t>></tapobserver<t></code>。</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值-1\">回傳值</h4>\n  <p><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code></p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(next: (value: T) => void): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>next</td>\n      \n      <td class=\"param-description\">\n              <p>型別：<code>(value: T) => void</code>。</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值-2\">回傳值</h4>\n  <p><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code></p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading deprecated-api-item\"> <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n  <div class=\"deprecated\">\n  <h4 id=\"deprecation-notes\">棄用說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/tap#deprecation-notes\"><i class=\"material-icons\">link</i></a></h4>\n  <p translation-result=\"on\">不要傳遞單獨的回呼引數，而是使用 Observer 引數。帶有單獨回呼引數的簽名將在 v8 中被刪除。詳細訊息： <a href=\"https://rxjs.dev/deprecations/subscribe-arguments\">https://rxjs.dev/deprecations/subscribe-arguments</a></p><p translation-origin=\"off\">Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: <a href=\"https://rxjs.dev/deprecations/subscribe-arguments\">https://rxjs.dev/deprecations/subscribe-arguments</a></p>\n\n\n  </div>\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>next</td>\n      \n      <td class=\"param-description\">\n              <p>可選。預設值為 <code>undefined</code>。</p>\n        <p>型別：<code>(value: T) => void</code>。</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>error</td>\n      \n      <td class=\"param-description\">\n              <p>可選。預設值為 <code>undefined</code>。</p>\n        <p>型別：<code>(error: any) => void</code>。</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>complete</td>\n      \n      <td class=\"param-description\">\n              <p>可選。預設值為 <code>undefined</code>。</p>\n        <p>型別：<code>() => void</code>。</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值-3\">回傳值</h4>\n  <p><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code></p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  </tbody></table>\n</section>\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">參見<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/tap#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/operators/finalize\"><code>finalize</code></a>\n</li>\n    <li><a href=\"api/index/class/Observable#subscribe\"><code>Observable</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/operators\n - api/operators/timeout\n-->\n<!-- links from this doc:\n - /api\n - api/index/class/Observable#subscribe\n - api/index/function/concatMap\n - api/index/function/from\n - api/index/function/interval\n - api/index/function/map\n - api/index/function/mergeMap\n - api/index/function/of\n - api/index/function/pipe\n - api/index/function/take\n - api/index/function/tap\n - api/index/interface/MonoTypeOperatorFunction\n - api/operators\n - api/operators/finalize\n - api/operators/tap#deprecation-notes\n - api/operators/tap#description\n - api/operators/tap#examples\n - api/operators/tap#overloads\n - api/operators/tap#see-also\n - api/operators/tap#tap\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/tap.ts?message=docs(operators)%3A%20describe%20your%20change...#L26-L193\n - https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/tap.ts#L26-L193\n - https://rxjs.dev/deprecations/subscribe-arguments\n-->"
}