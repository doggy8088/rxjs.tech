{
  "id": "api/operators/refCount",
  "title": "refCount",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/refCount.ts?message=docs(operators)%3A%20describe%20your%20change...#L6-L134\" aria-label=\"編輯建議\" title=\"編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/refCount.ts#L6-L134\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/refCount\", \"name\": \"refCount\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"refcount\">refCount<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/refCount#refcount\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    <label class=\"api-status-label deprecated\">已棄用</label>\n    \n    \n    \n    <label class=\"api-status-label operator\">運算子</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p translation-result=\"on\">讓 <a href=\"api/index/class/ConnectableObservable\"><code>ConnectableObservable</code></a> 的行為就像一個普通的 observable，但你能自動連線到它。</p><p translation-origin=\"off\">Make a <a href=\"api/index/class/ConnectableObservable\"><code>ConnectableObservable</code></a> behave like a ordinary observable and automates the way\nyou can connect to it.</p>\n\n<p translation-result=\"on\">在內部，它會對 observable 的訂閱進行計數，如果訂閱數大於 0，則訂閱源（只一次）。如果訂閱數小於 1，則從源退訂。這樣，你可以確保<em>已發布</em>的 refCount 之前的所有內容都只有一個訂閱，而與目標 observable 的訂閱者數量無關。</p><p translation-origin=\"off\">Internally it counts the subscriptions to the observable and subscribes (only once) to the source if\nthe number of subscriptions is larger than 0. If the number of subscriptions is smaller than 1, it\nunsubscribes from the source. This way you can make sure that everything before the <em>published</em>\nrefCount has only a single subscription independently of the number of subscribers to the target\nobservable.</p>\n\n<p translation-result=\"on\">請注意，使用 <a href=\"api/operators/share\"><code>share</code></a> 運算子與依次使用 <code><a href=\"api/index/function/multicast\" class=\"code-anchor\">multicast</a>(() => new <a href=\"api/index/class/Subject\" class=\"code-anchor\">Subject</a>())</code> 運算子（使 observable 變成熱的）和<em>refCount</em>運算子的效果完全相同。</p><p translation-origin=\"off\">Note that using the <a href=\"api/operators/share\"><code>share</code></a> operator is exactly the same as using the <code><a href=\"api/index/function/multicast\" class=\"code-anchor\">multicast</a>(() => new <a href=\"api/index/class/Subject\" class=\"code-anchor\">Subject</a>())</code> operator\n(making the observable hot) and the <em>refCount</em> operator in a sequence.</p>\n\n<p><img src=\"/assets/images/marble-diagrams/refCount.png\" width=\"100%\" alt=\"refCount marble diagram\"></p>\n<h2 id=\"example\" translation-result=\"on\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/refCount#example\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/refCount#example\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在下面的範例中，使用 <em>publish</em> 運算子將兩個定期重複 Observable 轉換為可連線的 observable。第一個會使用 <em>refCount</em> 運算子，第二個則不使用。你會注意到一個可連線的 observable 在你呼叫它的 connect 函式之前什麼都不做。</p><p translation-origin=\"off\">In the following example there are two intervals turned into connectable observables\nby using the <em>publish</em> operator. The first one uses the <em>refCount</em> operator, the\nsecond one does not use it. You will notice that a connectable observable does nothing\nuntil you call its connect function.</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>, <a href=\"api/index/function/publish\" class=\"code-anchor\">publish</a>, refCount } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\n// Turn the <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a> <a href=\"api/index/const/observable\" class=\"code-anchor\">observable</a> into a <a href=\"api/index/class/ConnectableObservable\" class=\"code-anchor\">ConnectableObservable</a> (hot)\nconst refCountInterval = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(400).pipe(\n  <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(num => console.log(`refCount ${ num }`)),\n  <a href=\"api/index/function/publish\" class=\"code-anchor\">publish</a>(),\n  refCount()\n);\n\nconst publishedInterval = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(400).pipe(\n  <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(num => console.log(`<a href=\"api/index/function/publish\" class=\"code-anchor\">publish</a> ${ num }`)),\n  <a href=\"api/index/function/publish\" class=\"code-anchor\">publish</a>()\n);\n\nrefCountInterval.subscribe();\nrefCountInterval.subscribe();\n// 'refCount 0' -----> 'refCount 1' -----> etc\n// All subscriptions will receive the same value and the <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a> (and\n// <a href=\"api/index/function/every\" class=\"code-anchor\">every</a> other operator) before the `<a href=\"api/index/function/publish\" class=\"code-anchor\">publish</a>` operator will be executed\n// only once per event independently <a href=\"api/index/function/of\" class=\"code-anchor\">of</a> the number <a href=\"api/index/function/of\" class=\"code-anchor\">of</a> subscriptions.\n\npublishedInterval.subscribe();\n// Nothing happens until you call .connect() on the observable.\n</code-example>\n<p></p>\n  \n\n  \n<section class=\"deprecated\">\n  <h2 id=\"deprecation-notes\">棄用說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/refCount#deprecation-notes\"><i class=\"material-icons\">link</i></a></h2>\n  <p translation-result=\"on\">已替換為 <a href=\"api/operators/share\"><code>share</code></a> 運算子。如何使用 <code><a href=\"api/index/function/share\" class=\"code-anchor\">share</a></code> 取決於你在 <code>refCount</code> 運算子之前建立的可連線 observable。詳細訊息： <a href=\"https://rxjs.dev/deprecations/multicasting\">https://rxjs.dev/deprecations/multicasting</a></p><p translation-origin=\"off\">Replaced with the <a href=\"api/operators/share\"><code>share</code></a> operator. How <code><a href=\"api/index/function/share\" class=\"code-anchor\">share</a></code> is used\nwill depend on the connectable observable you created just prior to the\n<code>refCount</code> operator.\nDetails: <a href=\"https://rxjs.dev/deprecations/multicasting\">https://rxjs.dev/deprecations/multicasting</a></p>\n\n\n</section>\n\n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading deprecated-api-item\"> refCount&#x3C;T>(): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n  <div class=\"deprecated\">\n  <h4 id=\"deprecation-notes\">棄用說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/refCount#deprecation-notes\"><i class=\"material-icons\">link</i></a></h4>\n  <p translation-result=\"on\">已替換為 <a href=\"api/operators/share\"><code>share</code></a> 運算子。如何使用 <code><a href=\"api/index/function/share\" class=\"code-anchor\">share</a></code> 取決於你在 <code>refCount</code> 運算子之前建立的可連線 observable。詳細訊息： <a href=\"https://rxjs.dev/deprecations/multicasting\">https://rxjs.dev/deprecations/multicasting</a></p><p translation-origin=\"off\">Replaced with the <a href=\"api/operators/share\"><code>share</code></a> operator. How <code><a href=\"api/index/function/share\" class=\"code-anchor\">share</a></code> is used\nwill depend on the connectable observable you created just prior to the\n<code>refCount</code> operator.\nDetails: <a href=\"https://rxjs.dev/deprecations/multicasting\">https://rxjs.dev/deprecations/multicasting</a></p>\n\n\n  </div>\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <p>沒有引數。</p>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值\">回傳值</h4>\n  <p translation-result=\"on\">回傳一個 Observable 的函式，該 Observable 會自動連線到 ConnectableObservable。</p><p translation-origin=\"off\"><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code>: A function that returns an Observable that automates the connection\nto ConnectableObservable.</p>\n\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">參見<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/refCount#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/index/class/ConnectableObservable\"><code>ConnectableObservable</code></a>\n</li>\n    <li><a href=\"api/operators/share\"><code>share</code></a>\n</li>\n    <li><a href=\"api/operators/publish\"><code>publish</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/deprecations\n - api/operators\n-->\n<!-- links from this doc:\n - /api\n - api/index/class/ConnectableObservable\n - api/index/class/Subject\n - api/index/const/observable\n - api/index/function/every\n - api/index/function/from\n - api/index/function/interval\n - api/index/function/multicast\n - api/index/function/of\n - api/index/function/publish\n - api/index/function/share\n - api/index/function/tap\n - api/index/interface/MonoTypeOperatorFunction\n - api/operators\n - api/operators/publish\n - api/operators/refCount#deprecation-notes\n - api/operators/refCount#example\n - api/operators/refCount#refcount\n - api/operators/refCount#see-also\n - api/operators/share\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/refCount.ts?message=docs(operators)%3A%20describe%20your%20change...#L6-L134\n - https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/refCount.ts#L6-L134\n - https://rxjs.dev/deprecations/multicasting\n-->"
}