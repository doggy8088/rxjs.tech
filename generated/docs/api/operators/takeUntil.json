{
  "id": "api/operators/takeUntil",
  "title": "takeUntil",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/takeUntil.ts?message=docs(operators)%3A%20describe%20your%20change...#L6-L65\" aria-label=\"編輯建議\" title=\"編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/takeUntil.ts#L6-L65\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/takeUntil\", \"name\": \"takeUntil\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"takeuntil\">takeUntil<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/takeUntil#takeuntil\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">穩定</label>\n    \n    <label class=\"api-status-label operator\">運算子</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p translation-result=\"on\">傳送源 Observable 發出的值，直到 <code>notifier</code> Observable 發出一個值。</p><p translation-origin=\"off\">Emits the values emitted by the source Observable until a <code>notifier</code>\nObservable emits a value.</p>\n\n<p translation-result=\"on\"><span class=\"informal\">傳遞值，直到第二個 Observable，<code>notifier</code> 發出一個值。然後，就完成它。</span></p><p translation-origin=\"off\"><span class=\"informal\">Lets values pass until a second Observable,\n<code>notifier</code>, emits a value. Then, it completes.</span></p>\n\n<p><img src=\"/assets/images/marble-diagrams/takeUntil.png\" width=\"100%\" alt=\"takeUntil marble diagram\"></p>\n<p translation-result=\"on\"><code><a href=\"api/index/function/takeUntil\" class=\"code-anchor\">takeUntil</a></code> 會訂閱並開始映象源 Observable。它還會監視你提供的第二個 Observable <code>notifier</code>。如果此 <code>notifier</code> 發出一個值，則輸出 Observable 將停止映象源 Observable 並完成。如果此 <code>notifier</code> 沒有發出任何值並直接完成，則 <code><a href=\"api/index/function/takeUntil\" class=\"code-anchor\">takeUntil</a></code> 將傳遞所有值。</p><p translation-origin=\"off\"><code><a href=\"api/index/function/takeUntil\" class=\"code-anchor\">takeUntil</a></code> subscribes and begins mirroring the source Observable. It also\nmonitors a second Observable, <code>notifier</code> that you provide. If the <code>notifier</code>\nemits a value, the output Observable stops mirroring the source Observable\nand completes. If the <code>notifier</code> doesn't emit any value and completes\nthen <code><a href=\"api/index/function/takeUntil\" class=\"code-anchor\">takeUntil</a></code> will pass all values.</p>\n\n<h2 id=\"example\" translation-result=\"on\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/takeUntil#example\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/takeUntil#example\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">每秒滴答一次，直到發生第一次點選</p><p translation-origin=\"off\">Tick every second until the first click happens</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>, <a href=\"api/index/function/takeUntil\" class=\"code-anchor\">takeUntil</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst source = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000);\nconst clicks = <a href=\"api/index/function/fromEvent\" class=\"code-anchor\">fromEvent</a>(document, 'click');\nconst result = source.pipe(<a href=\"api/index/function/takeUntil\" class=\"code-anchor\">takeUntil</a>(clicks));\nresult.subscribe(x => console.log(x));\n</code-example>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/takeUntil\" class=\"code-anchor\">takeUntil</a>&#x3C;T>(notifier: <a href=\"api/index/type-alias/ObservableInput\" class=\"code-anchor\">ObservableInput</a>&#x3C;any>): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>notifier</td>\n      \n      <td class=\"param-description\">\n      <p translation-result=\"on\">Observable 傳送的第一個值將導致 <code><a href=\"api/index/function/takeUntil\" class=\"code-anchor\">takeUntil</a></code> 的輸出 Observable 停止從源 Observable 傳送值。</p><p translation-origin=\"off\">        The Observable whose first emitted value will\ncause the output Observable of <code><a href=\"api/index/function/takeUntil\" class=\"code-anchor\">takeUntil</a></code> to stop emitting values from the\nsource Observable.</p>\n\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值\">回傳值</h4>\n  <p translation-result=\"on\">一個回傳 Observable 的函式，此 Observable 會從源 Observable 傳送值，直到 <code>notifier</code> 發出了它的第一個值。</p><p translation-origin=\"off\"><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code>: A function that returns an Observable that emits the values from the\nsource Observable until <code>notifier</code> emits its first value.</p>\n\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">參見<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/takeUntil#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/operators/take\"><code>take</code></a>\n</li>\n    <li><a href=\"api/operators/takeLast\"><code>takeLast</code></a>\n</li>\n    <li><a href=\"api/operators/takeWhile\"><code>takeWhile</code></a>\n</li>\n    <li><a href=\"api/operators/skip\"><code>skip</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/operators\n - api/operators/connect\n - api/operators/endWith\n - api/operators/repeat\n - api/operators/take\n - api/operators/takeLast\n - api/operators/takeWhile\n-->\n<!-- links from this doc:\n - /api\n - api/index/function/from\n - api/index/function/fromEvent\n - api/index/function/interval\n - api/index/function/takeUntil\n - api/index/interface/MonoTypeOperatorFunction\n - api/index/type-alias/ObservableInput\n - api/operators\n - api/operators/skip\n - api/operators/take\n - api/operators/takeLast\n - api/operators/takeUntil#example\n - api/operators/takeUntil#see-also\n - api/operators/takeUntil#takeuntil\n - api/operators/takeWhile\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/takeUntil.ts?message=docs(operators)%3A%20describe%20your%20change...#L6-L65\n - https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/takeUntil.ts#L6-L65\n-->"
}