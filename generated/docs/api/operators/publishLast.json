{
  "id": "api/operators/publishLast",
  "title": "publishLast",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/publishLast.ts?message=docs(operators)%3A%20describe%20your%20change...#L5-L86\" aria-label=\"編輯建議\" title=\"編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/publishLast.ts#L5-L86\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/publishLast\", \"name\": \"publishLast\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"publishlast\">publishLast<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/publishLast#publishlast\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    <label class=\"api-status-label deprecated\">已棄用</label>\n    \n    \n    \n    <label class=\"api-status-label operator\">運算子</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p translation-result=\"on\">回傳一個可連線的 Observable 序列，該序列會共享對僅包含最後一個通知的基礎序列的單個訂閱。</p><p translation-origin=\"off\">Returns a connectable observable sequence that shares a single subscription to the\nunderlying sequence containing only the last notification.</p>\n\n<p><img src=\"/assets/images/marble-diagrams/publishLast.png\" width=\"100%\" alt=\"publishLast marble diagram\"></p>\n<p translation-result=\"on\">類似於 <a href=\"api/operators/publish\"><code>publish</code></a>，但它會等到源 observable 完成並存儲最後一個傳送的值。與 <a href=\"api/operators/publishReplay\"><code>publishReplay</code></a> 和 <a href=\"api/operators/publishBehavior\"><code>publishBehavior</code></a> 類似，即使沒有更多訂閱者，它也會繼續儲存最後一個值。如果發生後續訂閱，他們將立即獲得最後儲存的值並完成。</p><p translation-origin=\"off\">Similar to <a href=\"api/operators/publish\"><code>publish</code></a>, but it waits until the source observable completes and stores\nthe last emitted value.\nSimilarly to <a href=\"api/operators/publishReplay\"><code>publishReplay</code></a> and <a href=\"api/operators/publishBehavior\"><code>publishBehavior</code></a>, this keeps storing the last\nvalue even if it has no more subscribers. If subsequent subscriptions happen, they will\nimmediately get that last stored value and complete.</p>\n\n<h2 id=\"example\" translation-result=\"on\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/publishLast#example\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/publishLast#example\"><i class=\"material-icons\">link</i></a></h2>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/class/ConnectableObservable\" class=\"code-anchor\">ConnectableObservable</a>, <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/publishLast\" class=\"code-anchor\">publishLast</a>, <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>, <a href=\"api/index/function/take\" class=\"code-anchor\">take</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst <a href=\"api/index/function/connectable\" class=\"code-anchor\">connectable</a> = &#x3C;<a href=\"api/index/class/ConnectableObservable\" class=\"code-anchor\">ConnectableObservable</a>&#x3C;number>><a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000)\n  .pipe(\n    <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(x => console.log('side effect', x)),\n    <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(3),\n    <a href=\"api/index/function/publishLast\" class=\"code-anchor\">publishLast</a>()\n  );\n\nconnectable.subscribe({\n  next: x => console.log('Sub. A', x),\n  error: err => console.log('Sub. A Error', err),\n  complete: () => console.log('Sub. A Complete')\n});\n\nconnectable.subscribe({\n  next: x => console.log('Sub. B', x),\n  error: err => console.log('Sub. B Error', err),\n  complete: () => console.log('Sub. B Complete')\n});\n\nconnectable.connect();\n\n// Results:\n// 'side effect 0'   - after one second\n// 'side effect 1'   - after two seconds\n// 'side effect 2'   - after three seconds\n// 'Sub. A 2'        - immediately after 'side effect 2'\n// 'Sub. B 2'\n// 'Sub. A Complete'\n// 'Sub. B Complete'\n</code-example>\n<p></p>\n  \n\n  \n<section class=\"deprecated\">\n  <h2 id=\"deprecation-notes\">棄用說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/publishLast#deprecation-notes\"><i class=\"material-icons\">link</i></a></h2>\n  <p translation-result=\"on\">將在 v8 中刪除。如果要在底層使用 <a href=\"api/index/class/AsyncSubject\"><code>AsyncSubject</code></a> 建立可連線的 observable，請使用 <a href=\"api/index/function/connectable\"><code>connectable</code></a>。<code>source.pipe(<a href=\"api/index/function/publishLast\" class=\"code-anchor\">publishLast</a>())</code> 等價於 connectable <code><a href=\"api/index/function/connectable\" class=\"code-anchor\">connectable</a>(source, { connector: () => new <a href=\"api/index/class/AsyncSubject\" class=\"code-anchor\">AsyncSubject</a>(), resetOnDisconnect: false })</code>。如果你要在 <code><a href=\"api/index/function/publishLast\" class=\"code-anchor\">publishLast</a></code> 之後使用 <a href=\"api/operators/ShareReplayConfig#refCount\"><code>refCount</code></a>，請改用 <a href=\"api/operators/share\"><code>share</code></a> 運算子。<code>source.pipe(<a href=\"api/index/function/publishLast\" class=\"code-anchor\">publishLast</a>(), refCount())</code> 等價於 <code>source.pipe(<a href=\"api/index/function/share\" class=\"code-anchor\">share</a>({ connector: () => new <a href=\"api/index/class/AsyncSubject\" class=\"code-anchor\">AsyncSubject</a>(), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false }))</code>。詳細訊息： <a href=\"https://rxjs.dev/deprecations/multicasting\">https://rxjs.dev/deprecations/multicasting</a></p><p translation-origin=\"off\">Will be removed in v8. To create a connectable observable with an\n<a href=\"api/index/class/AsyncSubject\"><code>AsyncSubject</code></a> under the hood, use <a href=\"api/index/function/connectable\"><code>connectable</code></a>.\n<code>source.pipe(<a href=\"api/index/function/publishLast\" class=\"code-anchor\">publishLast</a>())</code> is equivalent to\n<code><a href=\"api/index/function/connectable\" class=\"code-anchor\">connectable</a>(source, { connector: () => new <a href=\"api/index/class/AsyncSubject\" class=\"code-anchor\">AsyncSubject</a>(), resetOnDisconnect: false })</code>.\nIf you're using <a href=\"api/operators/ShareReplayConfig#refCount\"><code>refCount</code></a> after <code><a href=\"api/index/function/publishLast\" class=\"code-anchor\">publishLast</a></code>, use the <a href=\"api/operators/share\"><code>share</code></a> operator instead.\n<code>source.pipe(<a href=\"api/index/function/publishLast\" class=\"code-anchor\">publishLast</a>(), refCount())</code> is equivalent to\n<code>source.pipe(<a href=\"api/index/function/share\" class=\"code-anchor\">share</a>({ connector: () => new <a href=\"api/index/class/AsyncSubject\" class=\"code-anchor\">AsyncSubject</a>(), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false }))</code>.\nDetails: <a href=\"https://rxjs.dev/deprecations/multicasting\">https://rxjs.dev/deprecations/multicasting</a></p>\n\n\n</section>\n\n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading deprecated-api-item\"> <a href=\"api/index/function/publishLast\" class=\"code-anchor\">publishLast</a>&#x3C;T>(): <a href=\"api/index/interface/UnaryFunction\" class=\"code-anchor\">UnaryFunction</a>&#x3C;<a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;T>, <a href=\"api/index/class/ConnectableObservable\" class=\"code-anchor\">ConnectableObservable</a>&#x3C;T>></code-example>\n\n\n\n  <div class=\"deprecated\">\n  <h4 id=\"deprecation-notes\">棄用說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/publishLast#deprecation-notes\"><i class=\"material-icons\">link</i></a></h4>\n  <p translation-result=\"on\">將在 v8 中刪除。如果要在底層使用 <a href=\"api/index/class/AsyncSubject\"><code>AsyncSubject</code></a> 建立可連線的 observable，請使用 <a href=\"api/index/function/connectable\"><code>connectable</code></a>。<code>source.pipe(<a href=\"api/index/function/publishLast\" class=\"code-anchor\">publishLast</a>())</code> 等價於 connectable <code><a href=\"api/index/function/connectable\" class=\"code-anchor\">connectable</a>(source, { connector: () => new <a href=\"api/index/class/AsyncSubject\" class=\"code-anchor\">AsyncSubject</a>(), resetOnDisconnect: false })</code>。如果你要在 <code><a href=\"api/index/function/publishLast\" class=\"code-anchor\">publishLast</a></code> 之後使用 <a href=\"api/operators/ShareReplayConfig#refCount\"><code>refCount</code></a>，請改用 <a href=\"api/operators/share\"><code>share</code></a> 運算子。<code>source.pipe(<a href=\"api/index/function/publishLast\" class=\"code-anchor\">publishLast</a>(), refCount())</code> 等價於 <code>source.pipe(<a href=\"api/index/function/share\" class=\"code-anchor\">share</a>({ connector: () => new <a href=\"api/index/class/AsyncSubject\" class=\"code-anchor\">AsyncSubject</a>(), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false }))</code>。詳細訊息： <a href=\"https://rxjs.dev/deprecations/multicasting\">https://rxjs.dev/deprecations/multicasting</a></p><p translation-origin=\"off\">Will be removed in v8. To create a connectable observable with an\n<a href=\"api/index/class/AsyncSubject\"><code>AsyncSubject</code></a> under the hood, use <a href=\"api/index/function/connectable\"><code>connectable</code></a>.\n<code>source.pipe(<a href=\"api/index/function/publishLast\" class=\"code-anchor\">publishLast</a>())</code> is equivalent to\n<code><a href=\"api/index/function/connectable\" class=\"code-anchor\">connectable</a>(source, { connector: () => new <a href=\"api/index/class/AsyncSubject\" class=\"code-anchor\">AsyncSubject</a>(), resetOnDisconnect: false })</code>.\nIf you're using <a href=\"api/operators/ShareReplayConfig#refCount\"><code>refCount</code></a> after <code><a href=\"api/index/function/publishLast\" class=\"code-anchor\">publishLast</a></code>, use the <a href=\"api/operators/share\"><code>share</code></a> operator instead.\n<code>source.pipe(<a href=\"api/index/function/publishLast\" class=\"code-anchor\">publishLast</a>(), refCount())</code> is equivalent to\n<code>source.pipe(<a href=\"api/index/function/share\" class=\"code-anchor\">share</a>({ connector: () => new <a href=\"api/index/class/AsyncSubject\" class=\"code-anchor\">AsyncSubject</a>(), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false }))</code>.\nDetails: <a href=\"https://rxjs.dev/deprecations/multicasting\">https://rxjs.dev/deprecations/multicasting</a></p>\n\n\n  </div>\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <p>沒有引數。</p>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值\">回傳值</h4>\n  <p translation-result=\"on\">一個回傳 Observable 的函式，該 Observable 會發送由多播源序列產生的序列元素。</p><p translation-origin=\"off\"><code><a href=\"api/index/interface/UnaryFunction\" class=\"code-anchor\">UnaryFunction</a>&#x3C;<a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;T>, <a href=\"api/index/class/ConnectableObservable\" class=\"code-anchor\">ConnectableObservable</a>&#x3C;T>></code>: A function that returns an Observable that emits elements of a\nsequence produced by multicasting the source sequence.</p>\n\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">參見<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/publishLast#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/index/class/ConnectableObservable\"><code>ConnectableObservable</code></a>\n</li>\n    <li><a href=\"api/operators/publish\"><code>publish</code></a>\n</li>\n    <li><a href=\"api/operators/publishReplay\"><code>publishReplay</code></a>\n</li>\n    <li><a href=\"api/operators/publishBehavior\"><code>publishBehavior</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/deprecations\n - api/operators\n - api/operators/publish\n-->\n<!-- links from this doc:\n - /api\n - api/index/class/AsyncSubject\n - api/index/class/ConnectableObservable\n - api/index/class/Observable\n - api/index/function/connectable\n - api/index/function/from\n - api/index/function/interval\n - api/index/function/publishLast\n - api/index/function/share\n - api/index/function/take\n - api/index/function/tap\n - api/index/interface/UnaryFunction\n - api/operators\n - api/operators/ShareReplayConfig#refCount\n - api/operators/publish\n - api/operators/publishBehavior\n - api/operators/publishLast#deprecation-notes\n - api/operators/publishLast#example\n - api/operators/publishLast#publishlast\n - api/operators/publishLast#see-also\n - api/operators/publishReplay\n - api/operators/share\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/publishLast.ts?message=docs(operators)%3A%20describe%20your%20change...#L5-L86\n - https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/publishLast.ts#L5-L86\n - https://rxjs.dev/deprecations/multicasting\n-->"
}