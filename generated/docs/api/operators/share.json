{
  "id": "api/operators/share",
  "title": "share",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/share.ts?message=docs(operators)%3A%20describe%20your%20change...#L65-L262\" aria-label=\"編輯建議\" title=\"編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/share.ts#L65-L262\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/share\", \"name\": \"share\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"share\">share<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/share#share\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">穩定</label>\n    \n    <label class=\"api-status-label operator\">運算子</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p translation-result=\"on\">回傳一個多播（共享）原始 Observable 的新 Observable。只要至少有一個訂閱者，這個 Observable 就會被訂閱併發送資料。當所有訂閱者都退訂後，它將退訂源 Observable。因為 Observable 正在多播，所以它會使流變熱 <code>hot</code>。這是 <code><a href=\"api/index/function/multicast\" class=\"code-anchor\">multicast</a>(() => new <a href=\"api/index/class/Subject\" class=\"code-anchor\">Subject</a>()), refCount()</code> 的別名。</p><p translation-origin=\"off\">Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\nSubscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\nunsubscribe from the source Observable. Because the Observable is multicasting it makes the stream <code>hot</code>.\nThis is an alias for <code><a href=\"api/index/function/multicast\" class=\"code-anchor\">multicast</a>(() => new <a href=\"api/index/class/Subject\" class=\"code-anchor\">Subject</a>()), refCount()</code>.</p>\n\n<p translation-result=\"on\">如果共享 observable 的訂閱者計數降至 0，或者源 Observable 已出錯或完成，則會重置對底層源 Observable 的訂閱（退訂併為新的訂閱者重新訂閱）。可以使用通知工廠進行重置，以支援有條件重置或延遲重置等行為。請注意，當源 Observable 出錯或完成時進行重置的行為和透明重試或重新啟動源是不同的，因為出錯或完成將被轉發給所有訂閱者並且他們的訂閱將被關閉。只有在出錯或完成引起的重置後出現的新訂閱者才會重新訂閱此源。為了實現透明的重試或重啟動，在共享之前要透過適當的運算子對源進行通道傳輸。</p><p translation-origin=\"off\">The subscription to the underlying source Observable can be reset (unsubscribe and resubscribe for new subscribers),\nif the subscriber count to the shared observable drops to 0, or if the source Observable errors or completes. It is\npossible to use notifier factories for the resets to allow for behaviors like conditional or delayed resets. Please\nnote that resetting on error or complete of the source Observable does not behave like a transparent retry or restart\nof the source because the error or complete will be forwarded to all subscribers and their subscription will be\nclosed. Only new subscribers after a reset on error or complete happened will cause a fresh subscription to the\nsource. To achieve transparent retries or restarts pipe the source through appropriate operators before sharing.</p>\n\n<p><img src=\"/assets/images/marble-diagrams/share.png\" width=\"100%\" alt=\"share marble diagram\"></p>\n<h2 id=\"example\" translation-result=\"on\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/share#example\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/share#example\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">從 <code>source</code> Observable 值生成新的多播 Observable</p><p translation-origin=\"off\">Generate new multicast Observable from the <code>source</code> Observable value</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>, <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>, <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>, <a href=\"api/index/function/share\" class=\"code-anchor\">share</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst source = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000).pipe(\n  <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>(x => console.log('Processing: ', x)),\n  <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>(x => x * x),\n  <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(6),\n  <a href=\"api/index/function/share\" class=\"code-anchor\">share</a>()\n);\n\nsource.subscribe(x => console.log('subscription 1: ', x));\nsource.subscribe(x => console.log('subscription 2: ', x));\n\n// Logs:\n// Processing: 0\n// subscription 1: 0\n// subscription 2: 0\n// Processing: 1\n// subscription 1: 1\n// subscription 2: 1\n// Processing: 2\n// subscription 1: 4\n// subscription 2: 4\n// Processing: 3\n// subscription 1: 9\n// subscription 2: 9\n// Processing: 4\n// subscription 1: 16\n// subscription 2: 16\n// Processing: 5\n// subscription 1: 25\n// subscription 2: 25\n</code-example>\n<h2 id=\"example-with-notifier-factory-delayed-reset\" translation-result=\"on\">通知器工廠範例：延遲重置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/share#example-with-notifier-factory-delayed-reset\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"example-with-notifier-factory-delayed-reset\">Example with notifier factory: Delayed reset<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/share#example-with-notifier-factory-delayed-reset\"><i class=\"material-icons\">link</i></a></h2>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>, <a href=\"api/index/function/share\" class=\"code-anchor\">share</a>, <a href=\"api/index/function/timer\" class=\"code-anchor\">timer</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst source = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000).pipe(\n  <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(3),\n  <a href=\"api/index/function/share\" class=\"code-anchor\">share</a>({\n    resetOnRefCountZero: () => <a href=\"api/index/function/timer\" class=\"code-anchor\">timer</a>(1000)\n  })\n);\n\nconst subscriptionOne = source.subscribe(x => console.log('subscription 1: ', x));\nsetTimeout(() => subscriptionOne.unsubscribe(), 1300);\n\nsetTimeout(() => source.subscribe(x => console.log('subscription 2: ', x)), 1700);\n\nsetTimeout(() => source.subscribe(x => console.log('subscription 3: ', x)), 5000);\n\n// Logs:\n// subscription 1:  0\n// (subscription 1 unsubscribes here)\n// (subscription 2 subscribes here ~400ms later, source was not reset)\n// subscription 2:  1\n// subscription 2:  2\n// (subscription 2 unsubscribes here)\n// (subscription 3 subscribes here ~2000ms later, source did reset before)\n// subscription 3:  0\n// subscription 3:  1\n// subscription 3:  2\n</code-example>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/share\" class=\"code-anchor\">share</a>&#x3C;T>(options: <a href=\"api/index/interface/ShareConfig\" class=\"code-anchor\">ShareConfig</a>&#x3C;T> = {}): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>options</td>\n      \n      <td class=\"param-description\">\n              <p>可選。預設值為 <code>{}</code>。</p>\n        <p>型別：<code><a href=\"api/index/interface/ShareConfig\" class=\"code-anchor\">ShareConfig</a><t></t></code>。</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值\">回傳值</h4>\n  <p translation-result=\"on\">一個函式，會回傳源的映象 Observable。</p><p translation-origin=\"off\"><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code>: A function that returns an Observable that mirrors the source.</p>\n\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">參見<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/share#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/operators/shareReplay\"><code>shareReplay</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/operators\n - api/operators/connect\n - api/operators/multicast\n - api/operators/publish\n - api/operators/publishBehavior\n - api/operators/publishLast\n - api/operators/publishReplay\n - api/operators/refCount\n - api/operators/shareReplay\n-->\n<!-- links from this doc:\n - /api\n - api/index/class/Subject\n - api/index/function/from\n - api/index/function/interval\n - api/index/function/map\n - api/index/function/multicast\n - api/index/function/share\n - api/index/function/take\n - api/index/function/tap\n - api/index/function/timer\n - api/index/interface/MonoTypeOperatorFunction\n - api/index/interface/ShareConfig\n - api/operators\n - api/operators/share#example\n - api/operators/share#example-with-notifier-factory-delayed-reset\n - api/operators/share#see-also\n - api/operators/share#share\n - api/operators/shareReplay\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/share.ts?message=docs(operators)%3A%20describe%20your%20change...#L65-L262\n - https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/share.ts#L65-L262\n-->"
}