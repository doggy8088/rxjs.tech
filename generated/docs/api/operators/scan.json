{
  "id": "api/operators/scan",
  "title": "scan",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/scan.ts?message=docs(operators)%3A%20describe%20your%20change...#L8-L134\" aria-label=\"編輯建議\" title=\"編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/scan.ts#L8-L134\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/scan\", \"name\": \"scan\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"scan\">scan<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/scan#scan\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">穩定</label>\n    \n    <label class=\"api-status-label operator\">運算子</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p translation-result=\"on\">用於封裝和管理狀態。在使用 <code>seed</code> 值（第二個引數）或來自源的第一個值建立了初始狀態之後，對來自源的每個值呼叫累加器（或『reducer 函式』）。</p><p translation-origin=\"off\">Useful for encapsulating and managing state. Applies an accumulator (or \"reducer function\")\nto each value from the source after an initial state is established -- either via\na <code>seed</code> value (second argument), or from the first value from the source.</p>\n\n<p translation-result=\"on\"><span class=\"informal\">類似於 <a href=\"api/operators/reduce\"><code>reduce</code></a>，但在每次更新後會發送當前的累積狀態</span></p><p translation-origin=\"off\"><span class=\"informal\">It's like <a href=\"api/operators/reduce\"><code>reduce</code></a>, but emits the current\naccumulation state after each update</span></p>\n\n<p><img src=\"/assets/images/marble-diagrams/scan.png\" width=\"100%\" alt=\"scan marble diagram\"></p>\n<p translation-result=\"on\">該運算子會維護一個內部狀態，並在處理每個值後傳送它，如下所示：</p><p translation-origin=\"off\">This operator maintains an internal state and emits it after processing each value as follows:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">第一個值抵達</p><p translation-origin=\"off\">First value arrives</p>\n\n</li>\n</ol>\n<ul>\n<li>\n<p translation-result=\"on\">如果提供了 <code>seed</code> 值（作為 <code><a href=\"api/index/function/scan\" class=\"code-anchor\">scan</a></code> 的第二個引數），則讓 <code>state = seed</code> 和 <code>value = firstValue</code>。</p><p translation-origin=\"off\">If a <code>seed</code> value was supplied (as the second argument to <code><a href=\"api/index/function/scan\" class=\"code-anchor\">scan</a></code>), let <code>state = seed</code> and <code>value = firstValue</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">如果沒有提供 <code>seed</code> 值（沒有第二個引數），則讓 <code>state = firstValue</code> 並轉到 3。</p><p translation-origin=\"off\">If NO <code>seed</code> value was supplied (no second argument), let <code>state = firstValue</code> and go to 3.</p>\n\n</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p translation-result=\"on\">讓 <code>state = accumulator(state, value)</code>。</p><p translation-origin=\"off\">Let <code>state = accumulator(state, value)</code>.</p>\n\n</li>\n</ol>\n<ul>\n<li>\n<p translation-result=\"on\">如果 <code>accumulator</code> 丟擲錯誤，則向使用者通知一個錯誤。該過程結束。</p><p translation-origin=\"off\">If an error is thrown by <code>accumulator</code>, notify the consumer of an error. The process ends.</p>\n\n</li>\n</ul>\n<ol start=\"3\">\n<li>\n<p translation-result=\"on\">傳送 <code>state</code>。</p><p translation-origin=\"off\">Emit <code>state</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">下一個值抵達，讓 <code>value = nextValue</code>，轉到 2。</p><p translation-origin=\"off\">Next value arrives, let <code>value = nextValue</code>, go to 2.</p>\n\n</li>\n</ol>\n<h2 id=\"examples\" translation-result=\"on\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/scan#examples\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"examples\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/scan#examples\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">先前數字的平均值。此範例顯示瞭如果不提供 <code>seed</code> 就會使用來自源的第一個值來初始化流。</p><p translation-origin=\"off\">An average of previous numbers. This example shows how\nnot providing a <code>seed</code> can prime the stream with the\nfirst value from the source.</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/function/scan\" class=\"code-anchor\">scan</a>, <a href=\"api/index/function/map\" class=\"code-anchor\">map</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst numbers$ = <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>(1, 2, 3);\n\nnumbers$\n  .pipe(\n    // Get the sum <a href=\"api/index/function/of\" class=\"code-anchor\">of</a> the numbers coming in.\n    <a href=\"api/index/function/scan\" class=\"code-anchor\">scan</a>((total, n) => total + n),\n    // Get the average by dividing the sum by the total number\n    // received so var (which is 1 more than the zero-based index).\n    <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>((sum, index) => sum / (index + 1))\n  )\n  .subscribe(console.log);\n</code-example>\n<p translation-result=\"on\">斐波那契數列。這個例子展示了如何使用種子來啟動積累過程。另外，你懂的，斐波那契對於電腦和同事們非常重要，以至於它常常在求職面試中寫在白板上。現在你可以向他們秀一下 Rx 版本了！（別當真，哈哈）</p><p translation-origin=\"off\">The Fibonacci sequence. This example shows how you can use\na seed to prime accumulation process. Also... you know... Fibonacci.\nSo important to like, computers and stuff that its whiteboarded\nin job interviews. Now you can show them the Rx version! (Please don't, haha)</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/scan\" class=\"code-anchor\">scan</a>, <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>, <a href=\"api/index/function/startWith\" class=\"code-anchor\">startWith</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst firstTwoFibs = [0, 1];\n// An endless stream <a href=\"api/index/function/of\" class=\"code-anchor\">of</a> Fibonacci numbers.\nconst fibonacci$ = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000).pipe(\n  // Scan to get the fibonacci numbers (after 0, 1)\n  <a href=\"api/index/function/scan\" class=\"code-anchor\">scan</a>(([a, b]) => [b, a + b], firstTwoFibs),\n  // Get the second number in the tuple, it's the one you calculated\n  <a href=\"api/index/function/map\" class=\"code-anchor\">map</a>(([, n]) => n),\n  // Start with our <a href=\"api/index/function/first\" class=\"code-anchor\">first</a> two digits :)\n  <a href=\"api/index/function/startWith\" class=\"code-anchor\">startWith</a>(...firstTwoFibs)\n);\n\nfibonacci$.subscribe(console.log);\n</code-example>\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/scan\" class=\"code-anchor\">scan</a>&#x3C;V, A, S>(accumulator: (acc: V | A | S, value: V, index: number) => A, seed?: S): <a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;V, V | A></code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>accumulator</td>\n      \n      <td class=\"param-description\">\n      <p translation-result=\"on\">一個『歸結器函式』。這將在獲得初始狀態後針對每個值進行呼叫。</p><p translation-origin=\"off\">        A \"reducer function\". This will be called for each value after an initial state is\nacquired.</p>\n\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>seed</td>\n      \n      <td class=\"param-description\">\n      <p>        可選。預設值為 <code>undefined</code>。</p>\n<p translation-result=\"on\">初始狀態。如果未提供，則會把源中的第一個值用作初始狀態，並在不經過累加器的情況下傳送。則後續的所有值都會由累加器函式處理。如果提供了它，則所有值都會傳給累加器函式。</p><p translation-origin=\"off\">        The initial state. If this is not provided, the first value from the source will\nbe used as the initial state, and emitted without going through the accumulator. All subsequent values\nwill be processed by the accumulator function. If this is provided, all values will go through\nthe accumulator function.</p>\n\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值\">回傳值</h4>\n  <p translation-result=\"on\">回傳累加結果的 Observable 的函式。</p><p translation-origin=\"off\"><code><a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;V, V | A></code>: A function that returns an Observable of the accumulated values.</p>\n\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n<section class=\"overloads\">\n  <h2 id=\"overloads\">過載形式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/scan#overloads\"><i class=\"material-icons\">link</i></a></h2>\n  <table>\n  \n  <tbody><tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/scan\" class=\"code-anchor\">scan</a>(accumulator: (acc: V | A, value: V, index: number) => A): <a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;V, V | A></code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>accumulator</td>\n      \n      <td class=\"param-description\">\n              <p>型別：<code>(acc: V | A, value: V, index: number) => A</code>。</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值-1\">回傳值</h4>\n  <p><code><a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;V, V | A></code></p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/scan\" class=\"code-anchor\">scan</a>(accumulator: (acc: A, value: V, index: number) => A, seed: A): <a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;V, A></code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>accumulator</td>\n      \n      <td class=\"param-description\">\n              <p>型別：<code>(acc: A, value: V, index: number) => A</code>。</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>seed</td>\n      \n      <td class=\"param-description\">\n              <p>型別：<code>A</code>。</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值-2\">回傳值</h4>\n  <p><code><a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;V, A></code></p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/scan\" class=\"code-anchor\">scan</a>(accumulator: (acc: A | S, value: V, index: number) => A, seed: S): <a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;V, A></code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>accumulator</td>\n      \n      <td class=\"param-description\">\n              <p>型別：<code>(acc: A | S, value: V, index: number) => A</code>。</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>seed</td>\n      \n      <td class=\"param-description\">\n              <p>型別：<code>S</code>。</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值-3\">回傳值</h4>\n  <p><code><a href=\"api/index/interface/OperatorFunction\" class=\"code-anchor\">OperatorFunction</a>&#x3C;V, A></code></p>\n\n  \n\n\n\n\n\n    </td>\n  </tr>\n  \n  </tbody></table>\n</section>\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">參見<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/scan#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/operators/expand\"><code>expand</code></a>\n</li>\n    <li><a href=\"api/operators/mergeScan\"><code>mergeScan</code></a>\n</li>\n    <li><a href=\"api/operators/reduce\"><code>reduce</code></a>\n</li>\n    <li><a href=\"api/operators/switchScan\"><code>switchScan</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/operators\n - api/operators/mergeScan\n - api/operators/reduce\n - api/operators/switchScan\n-->\n<!-- links from this doc:\n - /api\n - api/index/function/first\n - api/index/function/from\n - api/index/function/interval\n - api/index/function/map\n - api/index/function/of\n - api/index/function/scan\n - api/index/function/startWith\n - api/index/interface/OperatorFunction\n - api/operators\n - api/operators/expand\n - api/operators/mergeScan\n - api/operators/reduce\n - api/operators/scan#examples\n - api/operators/scan#overloads\n - api/operators/scan#scan\n - api/operators/scan#see-also\n - api/operators/switchScan\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/scan.ts?message=docs(operators)%3A%20describe%20your%20change...#L8-L134\n - https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/scan.ts#L8-L134\n-->"
}