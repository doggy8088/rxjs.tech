{
  "id": "api/operators/shareReplay",
  "title": "shareReplay",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/shareReplay.ts?message=docs(operators)%3A%20describe%20your%20change...#L14-L192\" aria-label=\"编辑建议\" title=\"编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/shareReplay.ts#L14-L192\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/shareReplay\", \"name\": \"shareReplay\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"sharereplay\">shareReplay<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/shareReplay#sharereplay\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">稳定</label>\n    \n    <label class=\"api-status-label operator\">操作符</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p translation-result=\"on\">共享源并在订阅时对其产出物重放指定的次数。</p><p translation-origin=\"off\">Share source and replay specified number of emissions on subscription.</p>\n\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a>&#x3C;T>(configOrBufferSize?: number | <a href=\"api/index/interface/ShareReplayConfig\" class=\"code-anchor\">ShareReplayConfig</a>, <a href=\"api/index/function/windowTime\" class=\"code-anchor\">windowTime</a>?: number, scheduler?: <a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a>): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">参数</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>configOrBufferSize</td>\n      \n      <td class=\"param-description\">\n              <p>可选。默认值为 <code>undefined</code>。</p>\n        <p>类型：<code>number | <a href=\"api/index/interface/ShareReplayConfig\" class=\"code-anchor\">ShareReplayConfig</a></code>。</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>windowTime</td>\n      \n      <td class=\"param-description\">\n              <p>可选。默认值为 <code>undefined</code>。</p>\n        <p>Maximum time length of the replay buffer in milliseconds.</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>scheduler</td>\n      \n      <td class=\"param-description\">\n      <p>        可选。默认值为 <code>undefined</code>。</p>\n<p>        Scheduler where connected observers within the selector function\nwill be invoked on.</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"返回值\">返回值</h4>\n  <p translation-result=\"on\">一个返回 Observable 序列的函数，该 Observable 包含通过在选择器函数中对源序列进行多播而产生的序列元素。</p><p translation-origin=\"off\"><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code>: A function that returns an Observable sequence that contains the\nelements of a sequence produced by multicasting the source sequence within a\nselector function.</p>\n\n\n  \n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/shareReplay#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p translation-result=\"on\">该操作符是 <code>replay</code> 的一种特化，它会连接到源 observable 并通过以指定参数构造的 <code><a href=\"api/index/class/ReplaySubject\" class=\"code-anchor\">ReplaySubject</a></code> 进行多播。成功完成的源将永远缓存在 <code>shareReplayed <a href=\"api/index/const/observable\" class=\"code-anchor\">observable</a></code> 中，但可以重试错误的源。</p><p translation-origin=\"off\">This operator is a specialization of <code>replay</code> that connects to a source observable\nand multicasts through a <code><a href=\"api/index/class/ReplaySubject\" class=\"code-anchor\">ReplaySubject</a></code> constructed with the specified arguments.\nA successfully completed source will stay cached in the <code>shareReplayed <a href=\"api/index/const/observable\" class=\"code-anchor\">observable</a></code> forever,\nbut an errored source can be retried.</p>\n\n<h2 id=\"why-use-sharereplay\" translation-result=\"on\">为什么要使用 shareReplay？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/shareReplay#why-use-sharereplay\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"why-use-sharereplay\">Why use shareReplay?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/shareReplay#why-use-sharereplay\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">当你不想在多个订阅者之间多次执行有副作用或繁重的计算时，通常会希望使用 <code><a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a></code>。当你知道一定会有后来的订阅者需要访问先前发送的值流的情况下，它也可能很有价值。这种重播订阅结果的能力是 <a href=\"api/operators/share\"><code>share</code></a> 和 <code><a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a></code> 的区别。</p><p translation-origin=\"off\">You generally want to use <code><a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a></code> when you have side-effects or taxing computations\nthat you do not wish to be executed amongst multiple subscribers.\nIt may also be valuable in situations where you know you will have late subscribers to\na stream that need access to previously emitted values.\nThis ability to replay values on subscription is what differentiates <a href=\"api/operators/share\"><code>share</code></a> and <code><a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a></code>.</p>\n\n<p><img src=\"shareReplay.png\"></p>\n<h2 id=\"reference-counting\" translation-result=\"on\">引用计数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/shareReplay#reference-counting\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"reference-counting\">Reference counting<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/shareReplay#reference-counting\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">从 RXJS 版本 6.4.0 开始，添加了一个新的重载签名，以允许手动控制操作符的内部引用计数器下降到零时会发生的情况。如果 <code>refCount</code> 为 <code>true</code>，则一旦引用计数下降到零，此源将被退订，即内部 <code><a href=\"api/index/class/ReplaySubject\" class=\"code-anchor\">ReplaySubject</a></code> 将被退订。所有新订阅者都将从新的 <code><a href=\"api/index/class/ReplaySubject\" class=\"code-anchor\">ReplaySubject</a></code> 接收值，这反过来将导致对源 observable 的新订阅。而如果 <code>refCount</code> 为 <code>false</code>，则不会退订源，这意味着内部 <code><a href=\"api/index/class/ReplaySubject\" class=\"code-anchor\">ReplaySubject</a></code> 仍将订阅此源（并可能永远运行）。</p><p translation-origin=\"off\">As of RXJS version 6.4.0 a new overload signature was added to allow for manual control over what\nhappens when the operators internal reference counter drops to zero.\nIf <code>refCount</code> is true, the source will be unsubscribed from once the reference count drops to zero, i.e.\nthe inner <code><a href=\"api/index/class/ReplaySubject\" class=\"code-anchor\">ReplaySubject</a></code> will be unsubscribed. All new subscribers will receive value emissions from a\nnew <code><a href=\"api/index/class/ReplaySubject\" class=\"code-anchor\">ReplaySubject</a></code> which in turn will cause a new subscription to the source observable.\nIf <code>refCount</code> is false on the other hand, the source will not be unsubscribed meaning that the inner\n<code><a href=\"api/index/class/ReplaySubject\" class=\"code-anchor\">ReplaySubject</a></code> will still be subscribed to the source (and potentially run for ever).</p>\n\n<h2 id=\"examples\" translation-result=\"on\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/shareReplay#examples\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"examples\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/shareReplay#examples\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">第三个订阅者迟到的示例</p><p translation-origin=\"off\">Example with a third subscriber coming late to the party</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>, <a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst shared$ = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(2000).pipe(\n  <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(6),\n  <a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a>(3)\n);\n\nshared$.subscribe(x => console.log('sub A: ', x));\nshared$.subscribe(y => console.log('sub B: ', y));\n\nsetTimeout(() => {\n  shared$.subscribe(y => console.log('sub C: ', y));\n}, 11000);\n\n// Logs:\n// (after ~2000 ms)\n// sub A: 0\n// sub B: 0\n// (after ~4000 ms)\n// sub A: 1\n// sub B: 1\n// (after ~6000 ms)\n// sub A: 2\n// sub B: 2\n// (after ~8000 ms)\n// sub A: 3\n// sub B: 3\n// (after ~10000 ms)\n// sub A: 4\n// sub B: 4\n// (after ~11000 ms, sub C gets the <a href=\"api/index/function/last\" class=\"code-anchor\">last</a> 3 values)\n// sub C: 2\n// sub C: 3\n// sub C: 4\n// (after ~12000 ms)\n// sub A: 5\n// sub B: 5\n// sub C: 5\n</code-example>\n<p translation-result=\"on\"><code>refCount</code> 使用示例</p><p translation-origin=\"off\">Example for <code>refCount</code> usage</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>, <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>, <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a>, <a href=\"api/index/function/take\" class=\"code-anchor\">take</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst log = &#x3C;T>(name: string, source: <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;T>) => source.pipe(\n  <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>({\n    subscribe: () => console.log(`${ name }: subscribed`),\n    next: value => console.log(`${ name }: ${ value }`),\n    complete: () => console.log(`${ name }: completed`),\n    <a href=\"api/index/function/finalize\" class=\"code-anchor\">finalize</a>: () => console.log(`${ name }: unsubscribed`)\n  })\n);\n\nconst obs$ = log('source', <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000));\n\nconst shared$ = log('shared', obs$.pipe(\n  <a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a>({ bufferSize: 1, refCount: true }),\n  <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(2)\n));\n\nshared$.subscribe(x => console.log('sub A: ', x));\nshared$.subscribe(y => console.log('sub B: ', y));\n\n// PRINTS:\n// shared: subscribed &#x3C;-- reference <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> = 1\n// source: subscribed\n// shared: subscribed &#x3C;-- reference <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> = 2\n// source: 0\n// shared: 0\n// sub A: 0\n// shared: 0\n// sub B: 0\n// source: 1\n// shared: 1\n// sub A: 1\n// shared: completed &#x3C;-- <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(2) completes the subscription for sub A\n// shared: unsubscribed &#x3C;-- reference <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> = 1\n// shared: 1\n// sub B: 1\n// shared: completed &#x3C;-- <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(2) completes the subscription for sub B\n// shared: unsubscribed &#x3C;-- reference <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> = 0\n// source: unsubscribed &#x3C;-- replaySubject unsubscribes <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> source <a href=\"api/index/const/observable\" class=\"code-anchor\">observable</a> because the reference <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> dropped to 0 and refCount is true\n\n// In case <a href=\"api/index/function/of\" class=\"code-anchor\">of</a> refCount being false, the unsubscribe is <a href=\"api/index/function/never\" class=\"code-anchor\">never</a> called on the source and the source would keep on emitting, even if no subscribers\n// are listening.\n// source: 2\n// source: 3\n// source: 4\n// ...\n</code-example>\n\n</section>\n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">参见<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/shareReplay#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/operators/publish\"><code>publish</code></a>\n</li>\n    <li><a href=\"api/operators/share\"><code>share</code></a>\n</li>\n    <li><a href=\"api/operators/publishReplay\"><code>publishReplay</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/operators\n - api/operators/share\n-->\n<!-- links from this doc:\n - /api\n - api/index/class/Observable\n - api/index/class/ReplaySubject\n - api/index/const/observable\n - api/index/function/count\n - api/index/function/finalize\n - api/index/function/from\n - api/index/function/interval\n - api/index/function/last\n - api/index/function/never\n - api/index/function/of\n - api/index/function/shareReplay\n - api/index/function/take\n - api/index/function/tap\n - api/index/function/windowTime\n - api/index/interface/MonoTypeOperatorFunction\n - api/index/interface/SchedulerLike\n - api/index/interface/ShareReplayConfig\n - api/operators\n - api/operators/publish\n - api/operators/publishReplay\n - api/operators/share\n - api/operators/shareReplay#description\n - api/operators/shareReplay#examples\n - api/operators/shareReplay#reference-counting\n - api/operators/shareReplay#see-also\n - api/operators/shareReplay#sharereplay\n - api/operators/shareReplay#why-use-sharereplay\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/shareReplay.ts?message=docs(operators)%3A%20describe%20your%20change...#L14-L192\n - https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/shareReplay.ts#L14-L192\n-->"
}