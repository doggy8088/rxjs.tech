{
  "id": "api/operators/shareReplay",
  "title": "shareReplay",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/shareReplay.ts?message=docs(operators)%3A%20describe%20your%20change...#L14-L201\" aria-label=\"編輯建議\" title=\"編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/shareReplay.ts#L14-L201\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/shareReplay\", \"name\": \"shareReplay\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"sharereplay\">shareReplay<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/shareReplay#sharereplay\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">穩定</label>\n    \n    <label class=\"api-status-label operator\">運算子</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p><p translation-result=\"on\">共享源並在訂閱時對其產出物重放指定的次數。</p><p translation-origin=\"off\">Share source and replay specified number of emissions on subscription.</p>\n\n<p></p>\n  \n\n  \n\n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> <a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a>&#x3C;T>(configOrBufferSize?: number | <a href=\"api/index/interface/ShareReplayConfig\" class=\"code-anchor\">ShareReplayConfig</a>, <a href=\"api/index/function/windowTime\" class=\"code-anchor\">windowTime</a>?: number, scheduler?: <a href=\"api/index/interface/SchedulerLike\" class=\"code-anchor\">SchedulerLike</a>): <a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction</a>&#x3C;T></code-example>\n\n\n\n\n  <h4 class=\"no-anchor\" id=\"parameters\">引數</h4>\n  <table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>configOrBufferSize</td>\n      \n      <td class=\"param-description\">\n              <p>可選。預設值為 <code>undefined</code>。</p>\n        <p>型別：<code>number | <a href=\"api/index/interface/ShareReplayConfig\" class=\"code-anchor\">ShareReplayConfig</a></code>。</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>windowTime</td>\n      \n      <td class=\"param-description\">\n      <p>        可選。預設值為 <code>undefined</code>。</p>\n<p translation-result=\"on\">重播緩衝區的最大時間長度（以毫秒為單位）。</p><p translation-origin=\"off\">        Maximum time length of the replay buffer in milliseconds.</p>\n\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>scheduler</td>\n      \n      <td class=\"param-description\">\n      <p>        可選。預設值為 <code>undefined</code>。</p>\n<p translation-result=\"on\">一個排程器，用於排程選擇器函式中已連線的 Observer。</p><p translation-origin=\"off\">        Scheduler where connected observers within the selector function\nwill be invoked on.</p>\n\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n  <h4 class=\"no-anchor\" id=\"回傳值\">回傳值</h4>\n  <p translation-result=\"on\">一個回傳 Observable 序列的函式，該 Observable 包含透過在選擇器函式中對源序列進行多播而產生的序列元素。</p><p translation-origin=\"off\"><code><a href=\"api/index/interface/MonoTypeOperatorFunction\" class=\"code-anchor\">MonoTypeOperatorFunction&#x3C;T></a></code>: A function that returns an Observable sequence that contains the\nelements of a sequence produced by multicasting the source sequence within a\nselector function.</p>\n\n\n  \n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\">說明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/shareReplay#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p translation-result=\"on\">該運算子是 <code>replay</code> 的一種特化，它會連線到源 observable 並透過以指定引數構造的 <code><a href=\"api/index/class/ReplaySubject\" class=\"code-anchor\">ReplaySubject</a></code> 進行多播。成功完成的源將永遠快取在 <code>shareReplayed <a href=\"api/index/const/observable\" class=\"code-anchor\">observable</a></code> 中，但可以重試錯誤的源。</p><p translation-origin=\"off\">This operator is a specialization of <code>replay</code> that connects to a source observable\nand multicasts through a <code><a href=\"api/index/class/ReplaySubject\" class=\"code-anchor\">ReplaySubject</a></code> constructed with the specified arguments.\nA successfully completed source will stay cached in the <code>shareReplayed <a href=\"api/index/const/observable\" class=\"code-anchor\">observable</a></code> forever,\nbut an errored source can be retried.</p>\n\n<h2 id=\"why-use-sharereplay\" translation-result=\"on\">為什麼要使用 shareReplay？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/shareReplay#why-use-sharereplay\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"why-use-sharereplay\">Why use shareReplay?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/shareReplay#why-use-sharereplay\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">當你不想在多個訂閱者之間多次執行有副作用或繁重的計算時，通常會希望使用 <code><a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a></code>。當你知道一定會有後來的訂閱者需要訪問先前傳送的值流的情況下，它也可能很有價值。這種重播訂閱結果的能力是 <a href=\"api/operators/share\"><code>share</code></a> 和 <code><a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a></code> 的區別。</p><p translation-origin=\"off\">You generally want to use <code><a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a></code> when you have side-effects or taxing computations\nthat you do not wish to be executed amongst multiple subscribers.\nIt may also be valuable in situations where you know you will have late subscribers to\na stream that need access to previously emitted values.\nThis ability to replay values on subscription is what differentiates <a href=\"api/operators/share\"><code>share</code></a> and <code><a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a></code>.</p>\n\n<p><img src=\"shareReplay.png\"></p>\n<h2 id=\"reference-counting\" translation-result=\"on\">引用計數<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/shareReplay#reference-counting\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"reference-counting\">Reference counting<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/shareReplay#reference-counting\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">從 RXJS 版本 6.4.0 開始，新增了一個新的過載簽名，以允許手動控制運算子的內部引用計數器下降到零時會發生的情況。如果 <code>refCount</code> 為 <code>true</code>，則一旦引用計數下降到零，此源將被退訂，即內部 <code><a href=\"api/index/class/ReplaySubject\" class=\"code-anchor\">ReplaySubject</a></code> 將被退訂。所有新訂閱者都將從新的 <code><a href=\"api/index/class/ReplaySubject\" class=\"code-anchor\">ReplaySubject</a></code> 接收值，這反過來將導致對源 observable 的新訂閱。而如果 <code>refCount</code> 為 <code>false</code>，則不會退訂源，這意味著內部 <code><a href=\"api/index/class/ReplaySubject\" class=\"code-anchor\">ReplaySubject</a></code> 仍將訂閱此源（並可能永遠執行）。</p><p translation-origin=\"off\">As of RXJS version 6.4.0 a new overload signature was added to allow for manual control over what\nhappens when the operators internal reference counter drops to zero.\nIf <code>refCount</code> is true, the source will be unsubscribed from once the reference count drops to zero, i.e.\nthe inner <code><a href=\"api/index/class/ReplaySubject\" class=\"code-anchor\">ReplaySubject</a></code> will be unsubscribed. All new subscribers will receive value emissions from a\nnew <code><a href=\"api/index/class/ReplaySubject\" class=\"code-anchor\">ReplaySubject</a></code> which in turn will cause a new subscription to the source observable.\nIf <code>refCount</code> is false on the other hand, the source will not be unsubscribed meaning that the inner\n<code><a href=\"api/index/class/ReplaySubject\" class=\"code-anchor\">ReplaySubject</a></code> will still be subscribed to the source (and potentially run for ever).</p>\n\n<h2 id=\"examples\" translation-result=\"on\">例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/shareReplay#examples\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"examples\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/shareReplay#examples\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">第三個訂閱者遲到的範例</p><p translation-origin=\"off\">Example with a third subscriber coming late to the party</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>, <a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst shared$ = <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(2000).pipe(\n  <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(6),\n  <a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a>(3)\n);\n\nshared$.subscribe(x => console.log('sub A: ', x));\nshared$.subscribe(y => console.log('sub B: ', y));\n\nsetTimeout(() => {\n  shared$.subscribe(y => console.log('sub C: ', y));\n}, 11000);\n\n// Logs:\n// (after ~2000 ms)\n// sub A: 0\n// sub B: 0\n// (after ~4000 ms)\n// sub A: 1\n// sub B: 1\n// (after ~6000 ms)\n// sub A: 2\n// sub B: 2\n// (after ~8000 ms)\n// sub A: 3\n// sub B: 3\n// (after ~10000 ms)\n// sub A: 4\n// sub B: 4\n// (after ~11000 ms, sub C gets the <a href=\"api/index/function/last\" class=\"code-anchor\">last</a> 3 values)\n// sub C: 2\n// sub C: 3\n// sub C: 4\n// (after ~12000 ms)\n// sub A: 5\n// sub B: 5\n// sub C: 5\n</code-example>\n<p translation-result=\"on\"><code>refCount</code> 使用範例</p><p translation-origin=\"off\">Example for <code>refCount</code> usage</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>, <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>, <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>, <a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a>, <a href=\"api/index/function/take\" class=\"code-anchor\">take</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\nconst log = &#x3C;T>(name: string, source: <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;T>) => source.pipe(\n  <a href=\"api/index/function/tap\" class=\"code-anchor\">tap</a>({\n    subscribe: () => console.log(`${ name }: subscribed`),\n    next: value => console.log(`${ name }: ${ value }`),\n    complete: () => console.log(`${ name }: completed`),\n    <a href=\"api/index/function/finalize\" class=\"code-anchor\">finalize</a>: () => console.log(`${ name }: unsubscribed`)\n  })\n);\n\nconst obs$ = log('source', <a href=\"api/index/function/interval\" class=\"code-anchor\">interval</a>(1000));\n\nconst shared$ = log('shared', obs$.pipe(\n  <a href=\"api/index/function/shareReplay\" class=\"code-anchor\">shareReplay</a>({ bufferSize: 1, refCount: true }),\n  <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(2)\n));\n\nshared$.subscribe(x => console.log('sub A: ', x));\nshared$.subscribe(y => console.log('sub B: ', y));\n\n// PRINTS:\n// shared: subscribed &#x3C;-- reference <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> = 1\n// source: subscribed\n// shared: subscribed &#x3C;-- reference <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> = 2\n// source: 0\n// shared: 0\n// sub A: 0\n// shared: 0\n// sub B: 0\n// source: 1\n// shared: 1\n// sub A: 1\n// shared: completed &#x3C;-- <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(2) completes the subscription for sub A\n// shared: unsubscribed &#x3C;-- reference <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> = 1\n// shared: 1\n// sub B: 1\n// shared: completed &#x3C;-- <a href=\"api/index/function/take\" class=\"code-anchor\">take</a>(2) completes the subscription for sub B\n// shared: unsubscribed &#x3C;-- reference <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> = 0\n// source: unsubscribed &#x3C;-- replaySubject unsubscribes <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> source <a href=\"api/index/const/observable\" class=\"code-anchor\">observable</a> because the reference <a href=\"api/index/function/count\" class=\"code-anchor\">count</a> dropped to 0 and refCount is true\n\n// In case <a href=\"api/index/function/of\" class=\"code-anchor\">of</a> refCount being false, the unsubscribe is <a href=\"api/index/function/never\" class=\"code-anchor\">never</a> called on the source and the source would keep on emitting, even if no subscribers\n// are listening.\n// source: 2\n// source: 3\n// source: 4\n// ...\n</code-example>\n\n</section>\n\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2 id=\"see-also\">參見<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/shareReplay#see-also\"><i class=\"material-icons\">link</i></a></h2>\n  <ul>\n  \n    <li><a href=\"api/operators/publish\"><code>publish</code></a>\n</li>\n    <li><a href=\"api/operators/share\"><code>share</code></a>\n</li>\n    <li><a href=\"api/operators/publishReplay\"><code>publishReplay</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/operators\n - api/operators/share\n-->\n<!-- links from this doc:\n - /api\n - api/index/class/Observable\n - api/index/class/ReplaySubject\n - api/index/const/observable\n - api/index/function/count\n - api/index/function/finalize\n - api/index/function/from\n - api/index/function/interval\n - api/index/function/last\n - api/index/function/never\n - api/index/function/of\n - api/index/function/shareReplay\n - api/index/function/take\n - api/index/function/tap\n - api/index/function/windowTime\n - api/index/interface/MonoTypeOperatorFunction\n - api/index/interface/SchedulerLike\n - api/index/interface/ShareReplayConfig\n - api/operators\n - api/operators/publish\n - api/operators/publishReplay\n - api/operators/share\n - api/operators/shareReplay#description\n - api/operators/shareReplay#examples\n - api/operators/shareReplay#reference-counting\n - api/operators/shareReplay#see-also\n - api/operators/shareReplay#sharereplay\n - api/operators/shareReplay#why-use-sharereplay\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/shareReplay.ts?message=docs(operators)%3A%20describe%20your%20change...#L14-L201\n - https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/shareReplay.ts#L14-L201\n-->"
}