{
  "id": "api/operators/ShareConfig",
  "title": "ShareConfig",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/share.ts?message=docs(operators)%3A%20describe%20your%20change...#L9-L60\" aria-label=\"編輯建議\" title=\"編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/share.ts#L9-L60\" aria-label=\"檢視原始碼\" title=\"檢視原始碼\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/ShareConfig\", \"name\": \"ShareConfig\" } }\n          ]\n        }\n      </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n    </div>\n  <header class=\"api-header\">\n    <h1 id=\"shareconfig\">ShareConfig<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/ShareConfig#shareconfig\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label interface\">interface</label>\n    \n    \n    <label class=\"api-status-label stable\">穩定</label>\n    \n    <label class=\"api-status-label operator\">運算子</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  \n\n  <p class=\"short-description\"></p>\n  \n\n  \n\n  <section class=\"interface-overview\">\n<code-example language=\"ts\" hidecopy=\"true\">\ninterface <a href=\"api/index/interface/ShareConfig\" class=\"code-anchor\">ShareConfig</a>&#x3C;T> {\n  <a class=\"code-anchor\" href=\"api/operators/ShareConfig#connector\">connector?: () => SubjectLike&#x3C;T></a>\n  <a class=\"code-anchor\" href=\"api/operators/ShareConfig#resetOnError\">resetOnError?: boolean | ((error: any) => Observable&#x3C;any>)</a>\n  <a class=\"code-anchor\" href=\"api/operators/ShareConfig#resetOnComplete\">resetOnComplete?: boolean | (() => Observable&#x3C;any>)</a>\n  <a class=\"code-anchor\" href=\"api/operators/ShareConfig#resetOnRefCountZero\">resetOnRefCountZero?: boolean | (() => Observable&#x3C;any>)</a>\n}\n</code-example>\n\n  \n  \n\n\n  \n  \n\n</section>\n\n  \n  \n\n  \n<section class=\"instance-properties\">\n  <h2 id=\"屬性\">屬性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/operators/ShareConfig#屬性\"><i class=\"material-icons\">link</i></a></h2>\n  <table class=\"is-full-width list-table properties-table\">\n    <thead>\n      <tr><th>屬性</th><th>型別</th><th>說明</th></tr>\n    </thead>\n    <tbody>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"connector\"></a><code class=\"\">connector</code></td>\n        <td><label class=\"property-type-label\"><code>() => <a href=\"api/index/interface/SubjectLike\" class=\"code-anchor\">SubjectLike</a>&#x3C;T></code></label></td>\n        <td>\n          <p translation-result=\"on\">本工廠用於建立將源 observable 連線到多播消費者的主體。</p><p translation-origin=\"off\">The factory used to create the subject that will connect the source observable to\nmulticast consumers.</p>\n\n\n          \n          \n        </td>\n      </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"resetOnError\"></a><code class=\"\">resetOnError</code></td>\n        <td><label class=\"property-type-label\"><code>boolean | ((error: any) => <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;any>)</code></label></td>\n        <td>\n          <p translation-result=\"on\">如果為真，則結果 observable 會在源出錯時重置內部狀態並回傳一個『冷』狀態。這允許在發生錯誤時『重試』結果 observable。如果為 false，當源發來錯誤時，它會將錯誤推送到所連線的主體，並且此主體將保持連線，這意味著結果 observable 不會再次變『冷』，隨後的重試或重新訂閱將重新訂閱同一個主體。在所有情況下，RxJS 主體都會再次傳送相同的錯誤，但是 <a href=\"api/index/class/ReplaySubject\"><code>ReplaySubject</code></a> 還會在推送錯誤之前推送其緩衝值。這還可以改為用通知工廠回傳一個 observable，它可以對重置的方式和時間進行更細粒度的控制。這樣可以支援有條件重置或延遲重置等行為。</p><p translation-origin=\"off\">If true, the resulting observable will reset internal state on error from source and return to a \"cold\" state. This\nallows the resulting observable to be \"retried\" in the event of an error.\nIf false, when an error comes from the source it will push the error into the connecting subject, and the subject\nwill remain the connecting subject, meaning the resulting observable will not go \"cold\" again, and subsequent retries\nor resubscriptions will resubscribe to that same subject. In all cases, RxJS subjects will emit the same error again, however\n<a href=\"api/index/class/ReplaySubject\"><code>ReplaySubject</code></a> will also push its buffered values before pushing the error.\nIt is also possible to pass a notifier factory returning an observable instead which grants more fine-grained\ncontrol over how and when the reset should happen. This allows behaviors like conditional or delayed resets.</p>\n\n\n          \n          \n        </td>\n      </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"resetOnComplete\"></a><code class=\"\">resetOnComplete</code></td>\n        <td><label class=\"property-type-label\"><code>boolean | (() => <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;any>)</code></label></td>\n        <td>\n          <p translation-result=\"on\">如果為真，則結果 observable 將在源完成時重置內部狀態並回傳『冷』狀態。這允許在完成後『重複』此結果 observable。如果為 false，則當源完成時，它將透過所連線的主體推送完成通知，此主體將保持連線，這意味著結果 observable 不會再次變『冷』，後續重複或重新訂閱將重新訂閱同一個主體。這還可以改為用通知工廠回傳一個 observable，它可以對重置的方式和時間進行更細粒度的控制。這樣可以支援有條件重置或延遲重置等行為。</p><p translation-origin=\"off\">If true, the resulting observable will reset internal state on completion from source and return to a \"cold\" state. This\nallows the resulting observable to be \"repeated\" after it is done.\nIf false, when the source completes, it will push the completion through the connecting subject, and the subject\nwill remain the connecting subject, meaning the resulting observable will not go \"cold\" again, and subsequent repeats\nor resubscriptions will resubscribe to that same subject.\nIt is also possible to pass a notifier factory returning an observable instead which grants more fine-grained\ncontrol over how and when the reset should happen. This allows behaviors like conditional or delayed resets.</p>\n\n\n          \n          \n        </td>\n      </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"resetOnRefCountZero\"></a><code class=\"\">resetOnRefCountZero</code></td>\n        <td><label class=\"property-type-label\"><code>boolean | (() => <a href=\"api/index/class/Observable\" class=\"code-anchor\">Observable</a>&#x3C;any>)</code></label></td>\n        <td>\n          <p translation-result=\"on\">如果為 true，則當結果 observable 的訂閱者的數量由於訂閱者退訂而達到零時，內部狀態將被重置，而結果 observable 將回傳『冷』的狀態。這意味著下一次訂閱結果 observable 時，將建立一個新的主體並再次訂閱源。如果為 false，則當結果 observable 的訂閱者數量由於退訂而達到零時，主體將保持與源的連線，並且對結果的新訂閱將透過同一主體進行連線。這還可以改為用通知工廠回傳一個 observable，它可以對重置的方式和時間進行更細粒度的控制。這樣可以支援有條件重置或延遲重置等行為。</p><p translation-origin=\"off\">If true, when the number of subscribers to the resulting observable reaches zero due to those subscribers unsubscribing, the\ninternal state will be reset and the resulting observable will return to a \"cold\" state. This means that the next\ntime the resulting observable is subscribed to, a new subject will be created and the source will be subscribed to\nagain.\nIf false, when the number of subscribers to the resulting observable reaches zero due to unsubscription, the subject\nwill remain connected to the source, and new subscriptions to the result will be connected through that same subject.\nIt is also possible to pass a notifier factory returning an observable instead which grants more fine-grained\ncontrol over how and when the reset should happen. This allows behaviors like conditional or delayed resets.</p>\n\n\n          \n          \n        </td>\n      </tr>\n    \n    </tbody>\n  </table>\n</section>\n  \n\n\n  \n\n  \n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/operators\n-->\n<!-- links from this doc:\n - /api\n - api/index/class/Observable\n - api/index/class/ReplaySubject\n - api/index/interface/ShareConfig\n - api/index/interface/SubjectLike\n - api/operators\n - api/operators/ShareConfig#connector\n - api/operators/ShareConfig#resetOnComplete\n - api/operators/ShareConfig#resetOnError\n - api/operators/ShareConfig#resetOnRefCountZero\n - api/operators/ShareConfig#shareconfig\n - api/operators/ShareConfig#屬性\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/share.ts?message=docs(operators)%3A%20describe%20your%20change...#L9-L60\n - https://github.com/reactivex/rxjs/tree/7.5.2/src/internal/operators/share.ts#L9-L60\n-->"
}