{
  "id": "api/deprecations",
  "title": "",
  "contents": "\n<section class=\"deprecations\">\n  <h1 id=\"deprecations\">Deprecations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/deprecations#deprecations\"><i class=\"material-icons\">link</i></a></h1>\n  <p class=\"important\">The API listed below will be removed in the next major release!</p>\n  <table>\n\n    <tbody><tr>\n        <td>\n            <a href=\"api/index/class/ConnectableObservable\">ConnectableObservable</a>\n        </td>\n        <td>\n            Will be removed in v8. Use <a href=\"api/index/function/connectable\"><code>connectable</code></a> to create a connectable observable.\nIf you are using the `refCount` method of `ConnectableObservable`, use the <a href=\"api/index/function/share\"><code>share</code></a> operator\ninstead.\nDetails: <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n\n將在 v8 中刪除。使用 <a href=\"api/index/function/connectable\"><code>connectable</code></a> 建立一個可連線的 observable。如果你使用的是 `ConnectableObservable` 的 `refCount` 方法，請改用 <a href=\"api/index/function/share\"><code>share</code></a> 運算子。詳細訊息： <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n        </https:></https:></td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/interface/Operator\">Operator</a>\n        </td>\n        <td>\n            Internal implementation detail, do not use directly. Will be made internal in v8.\n\n內部實現細節，請勿直接使用。將在 v8 中內部化。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/const/asap\">asap</a>\n        </td>\n        <td>\n            Renamed to <a href=\"api/index/const/asapScheduler\"><code>asapScheduler</code></a>. Will be removed in v8.\n\n重新命名為 <a href=\"api/index/const/asapScheduler\"><code>asapScheduler</code></a>。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/const/async\">async</a>\n        </td>\n        <td>\n            Renamed to <a href=\"api/index/const/asyncScheduler\"><code>asyncScheduler</code></a>. Will be removed in v8.\n\n重新命名為 <a href=\"api/index/const/asyncScheduler\"><code>asyncScheduler</code></a>。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/const/queue\">queue</a>\n        </td>\n        <td>\n            Renamed to <a href=\"api/index/const/queueScheduler\"><code>queueScheduler</code></a>. Will be removed in v8.\n\n重新命名為 <a href=\"api/index/const/queueScheduler\"><code>queueScheduler</code></a>。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/const/animationFrame\">animationFrame</a>\n        </td>\n        <td>\n            Renamed to <a href=\"api/index/const/animationFrameScheduler\"><code>animationFrameScheduler</code></a>. Will be removed in v8.\n\n重新命名為 <a href=\"api/index/const/animationFrameScheduler\"><code>animationFrameScheduler</code></a>。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/class/Scheduler\">Scheduler</a>\n        </td>\n        <td>\n            Scheduler is an internal implementation detail of RxJS, and\nshould not be used directly. Rather, create your own class and implement\n<a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a>. Will be made internal in v8.\n\n排程器是 RxJS 的內部實現細節，不應該直接使用。相反，建立你自己的類並實現 <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a>。將在 v8 中內部化。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/class/Notification\">Notification</a>\n        </td>\n        <td>\n            It is NOT recommended to create instances of `Notification` directly.\nRather, try to create POJOs matching the signature outlined in <a href=\"api/index/type-alias/ObservableNotification\"><code>ObservableNotification</code></a>.\nFor example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\nWill be removed in v8.\n\n不建議直接建立 `Notification` 實例。相反，嘗試建立與 <a href=\"api/index/type-alias/ObservableNotification\"><code>ObservableNotification</code></a> 中簡述過的簽名對應的 POJO。例如： `{ kind: 'N', value: 1 }` , `{ kind: 'E', error: new Error('bad') }` 或 `{ kind: 'C' }`。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/NotificationKind\">NotificationKind</a>\n        </td>\n        <td>\n            Use a string literal instead. `NotificationKind` will be replaced with a type alias in v8.\nIt will not be replaced with a const enum as those are not compatible with isolated modules.\n\n請改用字串字面量代替。`NotificationKind` 在 v8 中將被替換為型別別名。它不會被 const 列舉替換，因為它們與隔離（isolated）模組不相容。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/function/empty\">empty</a>\n        </td>\n        <td>\n            Replaced with the <a href=\"api/index/const/EMPTY\"><code>EMPTY</code></a> constant or <a href=\"api/index/function/scheduled\"><code>scheduled</code></a> (e.g. `scheduled([], scheduler)`). Will be removed in v8.\n\n替換為 <a href=\"api/index/const/EMPTY\"><code>EMPTY</code></a> 常數或 <a href=\"api/index/function/scheduled\"><code>scheduled</code></a>（例如 `scheduled([], scheduler)`）。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/function/never\">never</a>\n        </td>\n        <td>\n            Replaced with the <a href=\"api/index/const/NEVER\"><code>NEVER</code></a> constant. Will be removed in v8.\n\n已替換為 <a href=\"api/index/const/NEVER\"><code>NEVER</code></a> 常數。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/function/of\">of</a>\n        </td>\n        <td>\n            The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: <https: rxjs.dev=\"\" deprecations=\"\" scheduler-argument=\"\">\n\n`scheduler` 引數將在 v8 中刪除。請改用 `scheduled`。詳細訊息： <https: rxjs.dev=\"\" deprecations=\"\" scheduler-argument=\"\">\n        </https:></https:></td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/function/pairs\">pairs</a>\n        </td>\n        <td>\n            Use `from(Object.entries(obj))` instead. Will be removed in v8.\n\n使用 `from(Object.entries(obj))` 代替。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/const/combineAll\">combineAll</a>\n        </td>\n        <td>\n            Renamed to <a href=\"api/index/function/combineLatestAll\"><code>combineLatestAll</code></a>. Will be removed in v8.\n\n重新命名為 <a href=\"api/index/function/combineLatestAll\"><code>combineLatestAll</code></a>。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/const/exhaust\">exhaust</a>\n        </td>\n        <td>\n            Renamed to <a href=\"api/index/function/exhaustAll\"><code>exhaustAll</code></a>. Will be removed in v8.\n\n重新命名為 <a href=\"api/index/function/exhaustAll\"><code>exhaustAll</code></a>。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/const/flatMap\">flatMap</a>\n        </td>\n        <td>\n            Renamed to <a href=\"api/index/function/mergeMap\"><code>mergeMap</code></a>. Will be removed in v8.\n\n重新命名為 <a href=\"api/index/function/mergeMap\"><code>mergeMap</code></a>。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/function/multicast\">multicast</a>\n        </td>\n        <td>\n            Will be removed in v8. Use the <a href=\"api/index/function/connectable\"><code>connectable</code></a> observable, the <a href=\"api/index/function/connect\"><code>connect</code></a> operator or the\n<a href=\"api/index/function/share\"><code>share</code></a> operator instead. See the overloads below for equivalent replacement examples of this operator's\nbehaviors.\nDetails: <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n\n將在 v8 中刪除。請改用 <a href=\"api/index/function/connectable\"><code>connectable</code></a> observable、<a href=\"api/index/function/connect\"><code>connect</code></a> 運算子或 <a href=\"api/index/function/share\"><code>share</code></a> 運算子。有關此運算子行為的等效替換範例，請參見其它過載形式。詳細訊息： <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n        </https:></https:></td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/function/pluck\">pluck</a>\n        </td>\n        <td>\n            Use <a href=\"api/index/function/map\"><code>map</code></a> and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8.\n\n使用 <a href=\"api/index/function/map\"><code>map</code></a> 和可選鏈接： `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/function/publish\">publish</a>\n        </td>\n        <td>\n            Will be removed in v8. Use the <a href=\"api/index/function/connectable\"><code>connectable</code></a> observable, the <a href=\"api/index/function/connect\"><code>connect</code></a> operator or the\n<a href=\"api/index/function/share\"><code>share</code></a> operator instead. See the overloads below for equivalent replacement examples of this operator's\nbehaviors.\nDetails: <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n\n將在 v8 中刪除。請改用 <a href=\"api/index/function/connectable\"><code>connectable</code></a> observable、<a href=\"api/index/function/connect\"><code>connect</code></a> 運算子或 <a href=\"api/index/function/share\"><code>share</code></a> 運算子。有關此運算子行為的等效替換範例，請參見其它的過載。詳細訊息： <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n        </https:></https:></td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/function/publishBehavior\">publishBehavior</a>\n        </td>\n        <td>\n            Will be removed in v8. To create a connectable observable that uses a\n<a href=\"api/index/class/BehaviorSubject\"><code>BehaviorSubject</code></a> under the hood, use <a href=\"api/index/function/connectable\"><code>connectable</code></a>.\n`source.pipe(publishBehavior(initValue))` is equivalent to\n`connectable(source, { connector: () => new BehaviorSubject(initValue), resetOnDisconnect: false })`.\nIf you're using <a href=\"api/index/interface/ShareReplayConfig#refCount\"><code>refCount</code></a> after `publishBehavior`, use the <a href=\"api/index/function/share\"><code>share</code></a> operator instead.\n`source.pipe(publishBehavior(initValue), refCount())` is equivalent to\n`source.pipe(share({ connector: () => new BehaviorSubject(initValue), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false  }))`.\nDetails: <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n\n將在 v8 中刪除。要建立一個在底層使用 <a href=\"api/index/class/BehaviorSubject\"><code>BehaviorSubject</code></a> 的可連線 observable，請使用 <a href=\"api/index/function/connectable\"><code>connectable</code></a>。`source.pipe(publishBehavior(initValue))` 等價於 connectable `connectable(source, { connector: () => new BehaviorSubject(initValue), resetOnDisconnect: false })`。如果你在 `publishBehavior` 之後使用 <a href=\"api/index/interface/ShareReplayConfig#refCount\"><code>refCount</code></a>，請改用 <a href=\"api/index/function/share\"><code>share</code></a> 運算子。`source.pipe(publishBehavior(initValue), refCount())` 等價於 `source.pipe(share({ connector: () => new BehaviorSubject(initValue), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false }))`。詳細訊息： <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n        </https:></https:></td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/function/publishLast\">publishLast</a>\n        </td>\n        <td>\n            Will be removed in v8. To create a connectable observable with an\n<a href=\"api/index/class/AsyncSubject\"><code>AsyncSubject</code></a> under the hood, use <a href=\"api/index/function/connectable\"><code>connectable</code></a>.\n`source.pipe(publishLast())` is equivalent to\n`connectable(source, { connector: () => new AsyncSubject(), resetOnDisconnect: false })`.\nIf you're using <a href=\"api/index/interface/ShareReplayConfig#refCount\"><code>refCount</code></a> after `publishLast`, use the <a href=\"api/index/function/share\"><code>share</code></a> operator instead.\n`source.pipe(publishLast(), refCount())` is equivalent to\n`source.pipe(share({ connector: () => new AsyncSubject(), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false }))`.\nDetails: <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n\n將在 v8 中刪除。如果要在底層使用 <a href=\"api/index/class/AsyncSubject\"><code>AsyncSubject</code></a> 建立可連線的 observable，請使用 <a href=\"api/index/function/connectable\"><code>connectable</code></a>。`source.pipe(publishLast())` 等價於 connectable `connectable(source, { connector: () => new AsyncSubject(), resetOnDisconnect: false })`。如果你要在 `publishLast` 之後使用 <a href=\"api/index/interface/ShareReplayConfig#refCount\"><code>refCount</code></a>，請改用 <a href=\"api/index/function/share\"><code>share</code></a> 運算子。`source.pipe(publishLast(), refCount())` 等價於 `source.pipe(share({ connector: () => new AsyncSubject(), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false }))`。詳細訊息： <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n        </https:></https:></td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/function/publishReplay\">publishReplay</a>\n        </td>\n        <td>\n            Will be removed in v8. Use the <a href=\"api/index/function/connectable\"><code>connectable</code></a> observable, the <a href=\"api/index/function/connect\"><code>connect</code></a> operator or the\n<a href=\"api/index/function/share\"><code>share</code></a> operator instead. See the overloads below for equivalent replacement examples of this operator's\nbehaviors.\nDetails: <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n\n將在 v8 中刪除。請改用 <a href=\"api/index/function/connectable\"><code>connectable</code></a> observable、<a href=\"api/index/function/connect\"><code>connect</code></a> 運算子或 <a href=\"api/index/function/share\"><code>share</code></a> 運算子。有關此運算子行為的等效替換範例，請參見其它的過載。詳細訊息： <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n        </https:></https:></td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/function/refCount\">refCount</a>\n        </td>\n        <td>\n            Replaced with the <a href=\"api/index/function/share\"><code>share</code></a> operator. How `share` is used\nwill depend on the connectable observable you created just prior to the\n`refCount` operator.\nDetails: <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n\n已替換為 <a href=\"api/index/function/share\"><code>share</code></a> 運算子。如何使用 `share` 取決於你在 `refCount` 運算子之前建立的可連線 observable。詳細訊息： <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n        </https:></https:></td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/function/startWith\">startWith</a>\n        </td>\n        <td>\n            The `scheduler` parameter will be removed in v8. Use `scheduled` and `concatAll`. Details: <https: rxjs.dev=\"\" deprecations=\"\" scheduler-argument=\"\">\n\n`scheduler` 引數將在 v8 中刪除。使用 `scheduled` 和 `concatAll`。詳細訊息： <https: rxjs.dev=\"\" deprecations=\"\" scheduler-argument=\"\">\n        </https:></https:></td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/type-alias/SubscribableOrPromise\">SubscribableOrPromise</a>\n        </td>\n        <td>\n            Do not use. Most likely you want to use `ObservableInput`. Will be removed in v8.\n\n不要使用。你很可能想使用 `ObservableInput`。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/type-alias/ObservableLike\">ObservableLike</a>\n        </td>\n        <td>\n            Renamed to <a href=\"api/index/interface/InteropObservable\"><code>InteropObservable</code></a>. Will be removed in v8.\n\n重新命名為 <a href=\"api/index/interface/InteropObservable\"><code>InteropObservable</code></a>。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/index/type-alias/ObservedValuesFromArray\">ObservedValuesFromArray</a>\n        </td>\n        <td>\n            Renamed to <a href=\"api/index/type-alias/ObservedValueUnionFromArray\"><code>ObservedValueUnionFromArray</code></a>. Will be removed in v8.\n\n重新命名為 <a href=\"api/index/type-alias/ObservedValueUnionFromArray\"><code>ObservedValueUnionFromArray</code></a>。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/operators/combineAll\">combineAll</a>\n        </td>\n        <td>\n            Renamed to <a href=\"api/index/function/combineLatestAll\"><code>combineLatestAll</code></a>. Will be removed in v8.\n\n重新命名為 <a href=\"api/index/function/combineLatestAll\"><code>combineLatestAll</code></a>。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/operators/combineLatest\">combineLatest</a>\n        </td>\n        <td>\n            Replaced with <a href=\"api/index/function/combineLatestWith\"><code>combineLatestWith</code></a>. Will be removed in v8.\n\n已替換為 <a href=\"api/index/function/combineLatestWith\"><code>combineLatestWith</code></a>。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/operators/concat\">concat</a>\n        </td>\n        <td>\n            Replaced with <a href=\"api/index/function/concatWith\"><code>concatWith</code></a>. Will be removed in v8.\n\n已替換為 <a href=\"api/index/function/concatWith\"><code>concatWith</code></a>。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/operators/exhaust\">exhaust</a>\n        </td>\n        <td>\n            Renamed to <a href=\"api/index/function/exhaustAll\"><code>exhaustAll</code></a>. Will be removed in v8.\n\n重新命名為 <a href=\"api/index/function/exhaustAll\"><code>exhaustAll</code></a>。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/operators/merge\">merge</a>\n        </td>\n        <td>\n            Replaced with <a href=\"api/index/function/mergeWith\"><code>mergeWith</code></a>. Will be removed in v8.\n\n已替換為 <a href=\"api/index/function/mergeWith\"><code>mergeWith</code></a>。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/operators/flatMap\">flatMap</a>\n        </td>\n        <td>\n            Renamed to <a href=\"api/index/function/mergeMap\"><code>mergeMap</code></a>. Will be removed in v8.\n\n重新命名為 <a href=\"api/index/function/mergeMap\"><code>mergeMap</code></a>。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/operators/multicast\">multicast</a>\n        </td>\n        <td>\n            Will be removed in v8. Use the <a href=\"api/index/function/connectable\"><code>connectable</code></a> observable, the <a href=\"api/index/function/connect\"><code>connect</code></a> operator or the\n<a href=\"api/index/function/share\"><code>share</code></a> operator instead. See the overloads below for equivalent replacement examples of this operator's\nbehaviors.\nDetails: <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n\n將在 v8 中刪除。請改用 <a href=\"api/index/function/connectable\"><code>connectable</code></a> observable、<a href=\"api/index/function/connect\"><code>connect</code></a> 運算子或 <a href=\"api/index/function/share\"><code>share</code></a> 運算子。有關此運算子行為的等效替換範例，請參見其它過載形式。詳細訊息： <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n        </https:></https:></td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/operators/partition\">partition</a>\n        </td>\n        <td>\n            Replaced with the `partition` static creation function. Will be removed in v8.\n\n替換為靜態建立函式 `partition`。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/operators/pluck\">pluck</a>\n        </td>\n        <td>\n            Use <a href=\"api/index/function/map\"><code>map</code></a> and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8.\n\n使用 <a href=\"api/index/function/map\"><code>map</code></a> 和可選鏈接： `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/operators/publish\">publish</a>\n        </td>\n        <td>\n            Will be removed in v8. Use the <a href=\"api/index/function/connectable\"><code>connectable</code></a> observable, the <a href=\"api/index/function/connect\"><code>connect</code></a> operator or the\n<a href=\"api/index/function/share\"><code>share</code></a> operator instead. See the overloads below for equivalent replacement examples of this operator's\nbehaviors.\nDetails: <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n\n將在 v8 中刪除。請改用 <a href=\"api/index/function/connectable\"><code>connectable</code></a> observable、<a href=\"api/index/function/connect\"><code>connect</code></a> 運算子或 <a href=\"api/index/function/share\"><code>share</code></a> 運算子。有關此運算子行為的等效替換範例，請參見其它的過載。詳細訊息： <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n        </https:></https:></td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/operators/publishBehavior\">publishBehavior</a>\n        </td>\n        <td>\n            Will be removed in v8. To create a connectable observable that uses a\n<a href=\"api/index/class/BehaviorSubject\"><code>BehaviorSubject</code></a> under the hood, use <a href=\"api/index/function/connectable\"><code>connectable</code></a>.\n`source.pipe(publishBehavior(initValue))` is equivalent to\n`connectable(source, { connector: () => new BehaviorSubject(initValue), resetOnDisconnect: false })`.\nIf you're using <a href=\"api/index/interface/ShareReplayConfig#refCount\"><code>refCount</code></a> after `publishBehavior`, use the <a href=\"api/index/function/share\"><code>share</code></a> operator instead.\n`source.pipe(publishBehavior(initValue), refCount())` is equivalent to\n`source.pipe(share({ connector: () => new BehaviorSubject(initValue), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false  }))`.\nDetails: <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n\n將在 v8 中刪除。要建立一個在底層使用 <a href=\"api/index/class/BehaviorSubject\"><code>BehaviorSubject</code></a> 的可連線 observable，請使用 <a href=\"api/index/function/connectable\"><code>connectable</code></a>。`source.pipe(publishBehavior(initValue))` 等價於 connectable `connectable(source, { connector: () => new BehaviorSubject(initValue), resetOnDisconnect: false })`。如果你在 `publishBehavior` 之後使用 <a href=\"api/index/interface/ShareReplayConfig#refCount\"><code>refCount</code></a>，請改用 <a href=\"api/index/function/share\"><code>share</code></a> 運算子。`source.pipe(publishBehavior(initValue), refCount())` 等價於 `source.pipe(share({ connector: () => new BehaviorSubject(initValue), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false }))`。詳細訊息： <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n        </https:></https:></td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/operators/publishLast\">publishLast</a>\n        </td>\n        <td>\n            Will be removed in v8. To create a connectable observable with an\n<a href=\"api/index/class/AsyncSubject\"><code>AsyncSubject</code></a> under the hood, use <a href=\"api/index/function/connectable\"><code>connectable</code></a>.\n`source.pipe(publishLast())` is equivalent to\n`connectable(source, { connector: () => new AsyncSubject(), resetOnDisconnect: false })`.\nIf you're using <a href=\"api/index/interface/ShareReplayConfig#refCount\"><code>refCount</code></a> after `publishLast`, use the <a href=\"api/index/function/share\"><code>share</code></a> operator instead.\n`source.pipe(publishLast(), refCount())` is equivalent to\n`source.pipe(share({ connector: () => new AsyncSubject(), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false }))`.\nDetails: <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n\n將在 v8 中刪除。如果要在底層使用 <a href=\"api/index/class/AsyncSubject\"><code>AsyncSubject</code></a> 建立可連線的 observable，請使用 <a href=\"api/index/function/connectable\"><code>connectable</code></a>。`source.pipe(publishLast())` 等價於 connectable `connectable(source, { connector: () => new AsyncSubject(), resetOnDisconnect: false })`。如果你要在 `publishLast` 之後使用 <a href=\"api/index/interface/ShareReplayConfig#refCount\"><code>refCount</code></a>，請改用 <a href=\"api/index/function/share\"><code>share</code></a> 運算子。`source.pipe(publishLast(), refCount())` 等價於 `source.pipe(share({ connector: () => new AsyncSubject(), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false }))`。詳細訊息： <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n        </https:></https:></td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/operators/publishReplay\">publishReplay</a>\n        </td>\n        <td>\n            Will be removed in v8. Use the <a href=\"api/index/function/connectable\"><code>connectable</code></a> observable, the <a href=\"api/index/function/connect\"><code>connect</code></a> operator or the\n<a href=\"api/index/function/share\"><code>share</code></a> operator instead. See the overloads below for equivalent replacement examples of this operator's\nbehaviors.\nDetails: <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n\n將在 v8 中刪除。請改用 <a href=\"api/index/function/connectable\"><code>connectable</code></a> observable、<a href=\"api/index/function/connect\"><code>connect</code></a> 運算子或 <a href=\"api/index/function/share\"><code>share</code></a> 運算子。有關此運算子行為的等效替換範例，請參見其它的過載。詳細訊息： <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n        </https:></https:></td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/operators/race\">race</a>\n        </td>\n        <td>\n            Replaced with <a href=\"api/index/function/raceWith\"><code>raceWith</code></a>. Will be removed in v8.\n\n已替換為 <a href=\"api/index/function/raceWith\"><code>raceWith</code></a>。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/operators/refCount\">refCount</a>\n        </td>\n        <td>\n            Replaced with the <a href=\"api/index/function/share\"><code>share</code></a> operator. How `share` is used\nwill depend on the connectable observable you created just prior to the\n`refCount` operator.\nDetails: <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n\n已替換為 <a href=\"api/index/function/share\"><code>share</code></a> 運算子。如何使用 `share` 取決於你在 `refCount` 運算子之前建立的可連線 observable。詳細訊息： <https: rxjs.dev=\"\" deprecations=\"\" multicasting=\"\">\n        </https:></https:></td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/operators/startWith\">startWith</a>\n        </td>\n        <td>\n            The `scheduler` parameter will be removed in v8. Use `scheduled` and `concatAll`. Details: <https: rxjs.dev=\"\" deprecations=\"\" scheduler-argument=\"\">\n\n`scheduler` 引數將在 v8 中刪除。使用 `scheduled` 和 `concatAll`。詳細訊息： <https: rxjs.dev=\"\" deprecations=\"\" scheduler-argument=\"\">\n        </https:></https:></td>\n    </tr>\n    \n    <tr>\n        <td>\n            <a href=\"api/operators/zip\">zip</a>\n        </td>\n        <td>\n            Replaced with <a href=\"api/index/function/zipWith\"><code>zipWith</code></a>. Will be removed in v8.\n\n已替換為 <a href=\"api/index/function/zipWith\"><code>zipWith</code></a>。將在 v8 中刪除。\n        </td>\n    </tr>\n    \n  </tbody></table>\n</section>\n\n\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/deprecations#deprecations\n - api/index/NotificationKind\n - api/index/class/AsyncSubject\n - api/index/class/BehaviorSubject\n - api/index/class/ConnectableObservable\n - api/index/class/Notification\n - api/index/class/Scheduler\n - api/index/const/EMPTY\n - api/index/const/NEVER\n - api/index/const/animationFrame\n - api/index/const/animationFrameScheduler\n - api/index/const/asap\n - api/index/const/asapScheduler\n - api/index/const/async\n - api/index/const/asyncScheduler\n - api/index/const/combineAll\n - api/index/const/exhaust\n - api/index/const/flatMap\n - api/index/const/queue\n - api/index/const/queueScheduler\n - api/index/function/combineLatestAll\n - api/index/function/combineLatestWith\n - api/index/function/concatWith\n - api/index/function/connect\n - api/index/function/connectable\n - api/index/function/empty\n - api/index/function/exhaustAll\n - api/index/function/map\n - api/index/function/mergeMap\n - api/index/function/mergeWith\n - api/index/function/multicast\n - api/index/function/never\n - api/index/function/of\n - api/index/function/pairs\n - api/index/function/pluck\n - api/index/function/publish\n - api/index/function/publishBehavior\n - api/index/function/publishLast\n - api/index/function/publishReplay\n - api/index/function/raceWith\n - api/index/function/refCount\n - api/index/function/scheduled\n - api/index/function/share\n - api/index/function/startWith\n - api/index/function/zipWith\n - api/index/interface/InteropObservable\n - api/index/interface/Operator\n - api/index/interface/SchedulerLike\n - api/index/interface/ShareReplayConfig#refCount\n - api/index/type-alias/ObservableLike\n - api/index/type-alias/ObservableNotification\n - api/index/type-alias/ObservedValueUnionFromArray\n - api/index/type-alias/ObservedValuesFromArray\n - api/index/type-alias/SubscribableOrPromise\n - api/operators/combineAll\n - api/operators/combineLatest\n - api/operators/concat\n - api/operators/exhaust\n - api/operators/flatMap\n - api/operators/merge\n - api/operators/multicast\n - api/operators/partition\n - api/operators/pluck\n - api/operators/publish\n - api/operators/publishBehavior\n - api/operators/publishLast\n - api/operators/publishReplay\n - api/operators/race\n - api/operators/refCount\n - api/operators/startWith\n - api/operators/zip\n-->"
}