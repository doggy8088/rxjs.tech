{"1135":{"id":"1135","label":"以前任何时候曾发送过","options":["ec26"]},"1437":{"id":"1437","label":"并且对每一个新值递归启动一个新的 Observable","options":["ef73"]},"1505":{"id":"1505","label":"根据特定大小的批次","options":["2c39","3166"]},"1529":{"id":"1529","label":"我要把它发送的每个值改成","options":["feb6","fc3a"]},"1531":{"id":"1531","label":"skipLast","path":"api/operators/skipLast","docType":"function"},"1555":{"id":"1555","label":"pipe","path":"api/index/function/pipe","docType":"function"},"1568":{"id":"1568","label":"timeInterval","path":"api/operators/timeInterval","docType":"function"},"1746":{"id":"1746","label":"基于某种标准，并且输出两个 Observable：那些符合此标准的，和不符合此标准的","options":["d08d"]},"3166":{"id":"3166","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["a541"]},"3324":{"id":"3324","label":"基于某个按需创建的 Observable 的发送情况","options":["056d","4082"]},"3680":{"id":"3680","label":"我要启动一个新的 Observable","options":["1bf6"]},"3919":{"id":"3919","label":"使用自定义逻辑","options":["525b"]},"3945":{"id":"3945","label":"我要从它发送的每个值中取出一个属性","options":["bd3a"]},"4082":{"id":"4082","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["59cf"]},"4093":{"id":"4093","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["9e67","89ca","63a2"]},"4601":{"id":"4601","label":"single","path":"api/operators/single","docType":"function"},"4667":{"id":"4667","label":"针对某个数组中的那些值","options":["553b"]},"4691":{"id":"4691","label":"ignoreElements","path":"api/operators/ignoreElements","docType":"function"},"4990":{"id":"4990","label":"并且把分好的组以数组的形式发送","options":["0d78"]},"5175":{"id":"5175","label":"bindCallback","path":"api/index/function/bindCallback","docType":"function"},"5272":{"id":"5272","label":"立即","options":["b067"]},"5641":{"id":"5641","label":"我已经有一个 Observable，并且","options":["1529","3945","e5b2","49c2","d691","30ef","c0cd","35db","e5e9","6601","699d","ea82","98f4","f4f1","1d20","545c","ea76","8cf5","0a10","7edb","9a12"]},"6130":{"id":"6130","label":"distinctUntilChanged","path":"api/operators/distinctUntilChanged","docType":"function"},"6206":{"id":"6206","label":"startWith"},"6278":{"id":"6278","label":"根据一个某个键或对象属性","options":["a256"]},"6601":{"id":"6601","label":"我要知道它发送了多少个值","options":["930c"]},"7069":{"id":"7069","label":"我要切换到另一个 Observable","options":["00dd"]},"7375":{"id":"7375","label":"interval","path":"api/index/function/interval","docType":"function"},"8083":{"id":"8083","label":"takeWhile","path":"api/operators/takeWhile","docType":"function"},"8193":{"id":"8193","label":"zip","path":"api/index/function/zip","docType":"function"},"8622":{"id":"8622","label":"并转换为数组","options":["053a"]},"8771":{"id":"8771","label":"并且即使当前的嵌套 Observable 尚未完结，也要忽略进来的值","options":["ad49"]},"8867":{"id":"8867","label":"mapTo","path":"api/operators/mapTo","docType":"function"},"8869":{"id":"8869","label":"materialize","path":"api/operators/materialize","docType":"function"},"9735":{"id":"9735","label":"基于给定的数量","options":["ffa6"]},"9737":{"id":"9737","label":"使用 AsyncSubject","options":["e8b4"]},"feb6":{"id":"feb6","label":"一个常量值","options":["8867"]},"9b82":{"id":"9b82","label":"map","path":"api/operators/map","docType":"function"},"fc3a":{"id":"fc3a","label":"一个通过公式算出来的值","options":["9b82"]},"bd3a":{"id":"bd3a","label":"pluck"},"83bb":{"id":"83bb","label":"tap","path":"api/operators/tap","docType":"function"},"e5b2":{"id":"e5b2","label":"我要监听即将发送的值，但不想影响它们","options":["83bb"]},"d87c":{"id":"d87c","label":"filter","path":"api/operators/filter","docType":"function"},"820c":{"id":"820c","label":"基于自定义逻辑","options":["d87c"]},"6a85":{"id":"6a85","label":"first","path":"api/operators/first","docType":"function"},"2ea3":{"id":"2ea3","label":"并且只要第一个值","options":["6a85"]},"8fc6":{"id":"8fc6","label":"take","path":"api/operators/take","docType":"function"},"c820":{"id":"c820","label":"基于给定的数量","options":["8fc6"]},"9a8e":{"id":"9a8e","label":"基于自定义逻辑","options":["8083"]},"b90f":{"id":"b90f","label":"如果它们位于此 Observable 的首部","options":["2ea3","c820","9a8e"]},"bd50":{"id":"bd50","label":"elementAt","path":"api/operators/elementAt","docType":"function"},"43c8":{"id":"43c8","label":"如果它们精确的处于第 n 位","options":["bd50"]},"5c5d":{"id":"5c5d","label":"last","path":"api/operators/last","docType":"function"},"af22":{"id":"af22","label":"并且只要最后一个值","options":["5c5d"]},"a967":{"id":"a967","label":"takeLast","path":"api/operators/takeLast","docType":"function"},"d8af":{"id":"d8af","label":"基于给定的数量","options":["a967"]},"cb5f":{"id":"cb5f","label":"如果它们位于此 Observable 的尾部","options":["af22","d8af"]},"21ec":{"id":"21ec","label":"takeUntil","path":"api/operators/takeUntil","docType":"function"},"0e65":{"id":"0e65","label":"直到另一个 Observable 发送了值","options":["21ec"]},"49c2":{"id":"49c2","label":"我要只允许部分值通过","options":["820c","b90f","43c8","cb5f","0e65"]},"7a52":{"id":"7a52","label":"全部","options":["4691"]},"ffa6":{"id":"ffa6","label":"skip","path":"api/operators/skip","docType":"function"},"4de4":{"id":"4de4","label":"skipWhile","path":"api/operators/skipWhile","docType":"function"},"8c59":{"id":"8c59","label":"基于自定义逻辑","options":["4de4"]},"1b64":{"id":"1b64","label":"从此 Observable 的首部","options":["9735","8c59"]},"3c63":{"id":"3c63","label":"从此 Observable 的尾部","options":["1531"]},"4fe1":{"id":"4fe1","label":"skipUntil","path":"api/operators/skipUntil","docType":"function"},"0207":{"id":"0207","label":"直到另一个 Observable 发送了值","options":["4fe1"]},"91fc":{"id":"91fc","label":"发送恰好在当前值前面的那个","options":["6130"]},"ec26":{"id":"ec26","label":"distinct","path":"api/operators/distinct","docType":"function"},"6dce":{"id":"6dce","label":"根据值是否相等","options":["91fc","1135"]},"1f13":{"id":"1f13","label":"distinctUntilKeyChanged","path":"api/operators/distinctUntilKeyChanged","docType":"function"},"a256":{"id":"a256","label":"发送恰好在当前值前面的那个","options":["1f13"]},"a039":{"id":"a039","label":"与某些以前发送的值匹配","options":["6dce","6278"]},"accc":{"id":"accc","label":"throttle","path":"api/operators/throttle","docType":"function"},"028c":{"id":"028c","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["accc"]},"9f7f":{"id":"9f7f","label":"throttleTime","path":"api/operators/throttleTime","docType":"function"},"9c51":{"id":"9c51","label":"这个时间窗口是根据某个时长来决定的","options":["9f7f"]},"fbea":{"id":"fbea","label":"发送每个时间窗口中的第一个值","options":["028c","9c51"]},"8ff2":{"id":"8ff2","label":"audit","path":"api/operators/audit","docType":"function"},"6d02":{"id":"6d02","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["8ff2"]},"aa91":{"id":"aa91","label":"auditTime","path":"api/operators/auditTime","docType":"function"},"0d19":{"id":"0d19","label":"这个时间窗口是根据某个时长来决定的","options":["aa91"]},"db42":{"id":"db42","label":"发送每个时间窗口中的最后一个值","options":["6d02","0d19"]},"a101":{"id":"a101","label":"debounce","path":"api/operators/debounce","docType":"function"},"ab81":{"id":"ab81","label":"此平静的间隔阈值由另一个 Observable 决定","options":["a101"]},"701d":{"id":"701d","label":"debounceTime","path":"api/operators/debounceTime","docType":"function"},"1de3":{"id":"1de3","label":"此平静的间隔阈值是根据某个时长决定的","options":["701d"]},"b8e7":{"id":"b8e7","label":"等足够平静时就发送最后一个值","options":["ab81","1de3"]},"de4f":{"id":"de4f","label":"发生的过于频繁","options":["fbea","db42","b8e7"]},"d691":{"id":"d691","label":"我要忽略某些值","options":["7a52","1b64","3c63","0207","a039","de4f"]},"64ef":{"id":"64ef","label":"reduce","path":"api/operators/reduce","docType":"function"},"b44b":{"id":"b44b","label":"并且只输出最终计算出的值","options":["64ef"]},"f043":{"id":"f043","label":"scan","path":"api/operators/scan","docType":"function"},"8ec2":{"id":"8ec2","label":"并且每当来源发送某个值时就输出计算好的值","options":["f043"]},"030b":{"id":"030b","label":"mergeScan","path":"api/operators/mergeScan","docType":"function"},"5e62":{"id":"5e62","label":"并且当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable","options":["030b"]},"1b89":{"id":"1b89","label":"switchScan","path":"api/operators/switchScan","docType":"function"},"e51a":{"id":"e51a","label":"并且每当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable，同时取消对前一个嵌套 Observable 的订阅","options":["1b89"]},"30ef":{"id":"30ef","label":"我要使用已发送的所有值做某种计算","options":["b44b","8ec2","5e62","e51a"]},"fcfa":{"id":"fcfa","label":"此元数据描述每个通知（next、error 或 complete）","options":["8869"]},"995d":{"id":"995d","label":"次元数据包含从最后一次发送值开始已过去时间","options":["1568"]},"c0cd":{"id":"c0cd","label":"我要用元数据包装它的各个消息","options":["fcfa","995d"]},"388f":{"id":"388f","label":"timeout","path":"api/operators/timeout","docType":"function"},"29e2":{"id":"29e2","label":"我要抛出一个错误","options":["388f"]},"00dd":{"id":"00dd","label":"timeoutWith","path":"api/operators/timeoutWith","docType":"function"},"35db":{"id":"35db","label":"在某个非交互式间隔之后","options":["29e2","7069"]},"e5e9":{"id":"e5e9","label":"我要确保只有一个值","options":["4601"]},"930c":{"id":"930c","label":"count","path":"api/operators/count","docType":"function"},"699d":{"id":"699d","label":"我要在开头放一个值","options":["6206"]},"a16e":{"id":"a16e","label":"delay","path":"api/operators/delay","docType":"function"},"9ddd":{"id":"9ddd","label":"基于给定的时间","options":["a16e"]},"3de1":{"id":"3de1","label":"delayWhen","path":"api/operators/delayWhen","docType":"function"},"f990":{"id":"f990","label":"基于另一个 Observable 的发送情况","options":["3de1"]},"ea82":{"id":"ea82","label":"我要延迟后再发送","options":["9ddd","f990"]},"053a":{"id":"053a","label":"toArray","path":"api/operators/toArray","docType":"function"},"f567":{"id":"f567","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"toPromise"},"c8e9":{"id":"c8e9","label":"并且转换为 Promise","options":["f567"]},"7f48":{"id":"7f48","label":"直到此 Observable 完成","options":["8622","c8e9"]},"61e3":{"id":"61e3","label":"pairwise","path":"api/operators/pairwise","docType":"function"},"e7b5":{"id":"e7b5","label":"连续配对，作为数组","options":["61e3"]},"d08d":{"id":"d08d","label":"partition","path":"api/index/function/partition","docType":"function"},"67c7":{"id":"67c7","label":"bufferCount","path":"api/operators/bufferCount","docType":"function"},"2c39":{"id":"2c39","label":"并且把分好的组以数组形式发送","options":["67c7"]},"a541":{"id":"a541","label":"windowCount","path":"api/operators/windowCount","docType":"function"},"c4d1":{"id":"c4d1","label":"bufferTime","path":"api/operators/bufferTime","docType":"function"},"eb4a":{"id":"eb4a","label":"并且把分好的组以数组的形式发送","options":["c4d1"]},"9b65":{"id":"9b65","label":"windowTime","path":"api/operators/windowTime","docType":"function"},"1d2a":{"id":"1d2a","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["9b65"]},"d2d4":{"id":"d2d4","label":"基于时间","options":["eb4a","1d2a"]},"0d78":{"id":"0d78","label":"buffer","path":"api/operators/buffer","docType":"function"},"97b1":{"id":"97b1","label":"window","path":"api/operators/window","docType":"function"},"53f8":{"id":"53f8","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["97b1"]},"7e81":{"id":"7e81","label":"直到另一个 Observable 发送了值","options":["4990","53f8"]},"81a0":{"id":"81a0","label":"bufferWhen","path":"api/operators/bufferWhen","docType":"function"},"056d":{"id":"056d","label":"并且把分好的组以数组的形式发送","options":["81a0"]},"59cf":{"id":"59cf","label":"windowWhen","path":"api/operators/windowWhen","docType":"function"},"4f80":{"id":"4f80","label":"bufferToggle","path":"api/operators/bufferToggle","docType":"function"},"4cc6":{"id":"4cc6","label":"并且把分好的组以数组的形式发送","options":["4f80"]},"966a":{"id":"966a","label":"windowToggle","path":"api/operators/windowToggle","docType":"function"},"598a":{"id":"598a","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["966a"]},"974c":{"id":"974c","label":"基于另一个 Observable 开始一组，并基于第三个 Observable 结束这一组","options":["4cc6","598a"]},"2dee":{"id":"2dee","label":"groupBy","path":"api/operators/groupBy","docType":"function"},"c608":{"id":"c608","label":"基于根据已发送的值计算出的一个键","options":["2dee"]},"98f4":{"id":"98f4","label":"我要对这些值进行分组","options":["7f48","e7b5","1746","1505","d2d4","7e81","3324","974c","c608"]},"ec9a":{"id":"ec9a","label":"mergeMapTo","path":"api/operators/mergeMapTo","docType":"function"},"e990":{"id":"e990","label":"这里的嵌套 Observable 对每个值都是一样的","options":["ec9a"]},"8b79":{"id":"8b79","label":"mergeMap","path":"api/operators/mergeMap","docType":"function"},"eae9":{"id":"eae9","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["8b79"]},"db2e":{"id":"db2e","label":"并且并行发送全部嵌套 Observable 所发送的值","options":["e990","eae9"]},"6ed5":{"id":"6ed5","label":"concatMapTo","path":"api/operators/concatMapTo","docType":"function"},"0087":{"id":"0087","label":"这里的嵌套 Observable 对每个值都是一样的","options":["6ed5"]},"80ad":{"id":"80ad","label":"concatMap","path":"api/operators/concatMap","docType":"function"},"daed":{"id":"daed","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["80ad"]},"696e":{"id":"696e","label":"并且依次发送每个嵌套 Observable 所发送的值","options":["0087","daed"]},"b9f0":{"id":"b9f0","label":"switchMapTo","path":"api/operators/switchMapTo","docType":"function"},"dc9a":{"id":"dc9a","label":"这里的嵌套 Observable 对每个值都是一样的","options":["b9f0"]},"e153":{"id":"e153","label":"switchMap","path":"api/operators/switchMap","docType":"function"},"06c5":{"id":"06c5","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["e153"]},"a5bb":{"id":"a5bb","label":"并且当新值抵达时，取消前一个嵌套 Observable","options":["dc9a","06c5"]},"ad49":{"id":"ad49","label":"exhaustMap","path":"api/operators/exhaustMap","docType":"function"},"ef73":{"id":"ef73","label":"expand","path":"api/operators/expand","docType":"function"},"f4f1":{"id":"f4f1","label":"我要为每个值开始一个新的 Observable","options":["db2e","696e","a5bb","8771","1437"]},"1d20":{"id":"1d20","label":"我要执行自定义操作","options":["1555"]},"a5eb":{"id":"a5eb","label":"share","path":"api/operators/share","docType":"function"},"61f1":{"id":"61f1","label":"并且在第一个订阅者抵达时尽快启动","options":["a5eb"]},"7ea3":{"id":"7ea3","label":"publish"},"8c45":{"id":"8c45","label":"并且手动或用程序启动它","options":["7ea3"]},"1d10":{"id":"1d10","label":"使用常规 Subject","options":["61f1","8c45"]},"fe47":{"id":"fe47","label":"publishBehavior"},"999d":{"id":"999d","label":"使用 BehaviorSubject","options":["fe47"]},"294e":{"id":"294e","label":"publishReplay"},"98f1":{"id":"98f1","label":"使用 ReplaySubject","options":["294e"]},"e8b4":{"id":"e8b4","label":"publishLast"},"5f3e":{"id":"5f3e","label":"multicast"},"54d3":{"id":"54d3","label":"使用某种特殊的 Subject 实现","options":["5f3e"]},"545c":{"id":"545c","label":"我要在多个订阅者之间共享某个订阅","options":["1d10","999d","98f1","9737","54d3"]},"8ab3":{"id":"8ab3","label":"catchError","path":"api/operators/catchError","docType":"function"},"cad8":{"id":"cad8","label":"我要启动一个新的 Observable","options":["8ab3"]},"b067":{"id":"b067","label":"retry","path":"api/operators/retry","docType":"function"},"0cab":{"id":"0cab","label":"retryWhen","path":"api/operators/retryWhen","docType":"function"},"ca6c":{"id":"ca6c","label":"当另一个 Observable 发送值的时候","options":["0cab"]},"3cf7":{"id":"3cf7","label":"我要重新订阅","options":["5272","ca6c"]},"ea76":{"id":"ea76","label":"当发生错误时","options":["cad8","3cf7"]},"166a":{"id":"166a","label":"repeat","path":"api/operators/repeat","docType":"function"},"9f9f":{"id":"9f9f","label":"立即","options":["166a"]},"bca1":{"id":"bca1","label":"repeatWhen","path":"api/operators/repeatWhen","docType":"function"},"b014":{"id":"b014","label":"当另一个 Observable 发送值的时候","options":["bca1"]},"66bd":{"id":"66bd","label":"我要重新订阅","options":["9f9f","b014"]},"1bf6":{"id":"1bf6","label":"concat","path":"api/index/function/concat","docType":"function"},"8cf5":{"id":"8cf5","label":"当它完成时","options":["66bd","3680"]},"f2d3":{"id":"f2d3","label":"finalize","path":"api/operators/finalize","docType":"function"},"0a10":{"id":"0a10","label":"当它完成、出错或退订时，我要执行某个函数","options":["f2d3"]},"454f":{"id":"454f","label":"subscribeOn","path":"api/operators/subscribeOn","docType":"function"},"0962":{"id":"0962","label":"它会修改从调用到订阅之间的路由","options":["454f"]},"3a33":{"id":"3a33","label":"observeOn","path":"api/operators/observeOn","docType":"function"},"37bf":{"id":"37bf","label":"它会修改从发送值到 Observer 之间的路由","options":["3a33"]},"7edb":{"id":"7edb","label":"我要更改调度器（Scheduler）","options":["0962","37bf"]},"e631":{"id":"e631","label":"race","path":"api/index/function/race","docType":"function"},"c45f":{"id":"c45f","label":"我只想从首先发送值的 Observable 接收各个值","options":["e631"]},"8c9d":{"id":"8c9d","label":"merge","path":"api/index/function/merge","docType":"function"},"ef71":{"id":"ef71","label":"我要输出所有值，而不管是从哪一个发送的","options":["8c9d"]},"52ad":{"id":"52ad","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"9e67":{"id":"9e67","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["52ad"]},"abe1":{"id":"abe1","label":"withLatestFrom","path":"api/operators/withLatestFrom","docType":"function"},"89ca":{"id":"89ca","label":"仅当主 Observable 发送值的时候，使用每个来源发送的最后一个值","options":["abe1"]},"cc11":{"id":"cc11","label":"zip","path":"api/index/function/zip","docType":"function"},"63a2":{"id":"63a2","label":"每个来源中的每个值仅使用一次","options":["cc11"]},"9a12":{"id":"9a12","label":"我要把这个 Observable 和其它的合并，并且","options":["c45f","ef71","4093"]},"0461":{"id":"0461","label":"race","path":"api/index/function/race","docType":"function"},"dee4":{"id":"dee4","label":"我只想从首先发送值的 Observable 接收各个值","options":["0461"]},"cf16":{"id":"cf16","label":"forkJoin","path":"api/index/function/forkJoin","docType":"function"},"453a":{"id":"453a","label":"我想在它们全都完成时得到通知","options":["cf16"]},"b6b3":{"id":"b6b3","label":"merge","path":"api/index/function/merge","docType":"function"},"7f1b":{"id":"7f1b","label":"我要输出所有值，而不管是从哪一个发送的","options":["b6b3"]},"5ad4":{"id":"5ad4","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"a480":{"id":"a480","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["5ad4"]},"311f":{"id":"311f","label":"每个来源中的每个值仅使用一次","options":["8193"]},"430b":{"id":"430b","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["a480","311f"]},"2a98":{"id":"2a98","label":"concat","path":"api/index/function/concat","docType":"function"},"b708":{"id":"b708","label":"我要依次订阅它们","options":["2a98"]},"8e59":{"id":"8e59","label":"我已经有了由某些 Observable 组合成的单一 Observable，并且","options":["dee4","453a","7f1b","430b","b708"]},"525b":{"id":"525b","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"create"},"6caf":{"id":"6caf","label":"generate","path":"api/index/function/generate","docType":"function"},"f89c":{"id":"f89c","label":"使用一个类似于 for 循环的状态机","options":["6caf"]},"d4f7":{"id":"d4f7","label":"throwError","path":"api/index/function/throwError","docType":"function"},"67d0":{"id":"67d0","label":"抛出一个错误","options":["d4f7"]},"08a6":{"id":"08a6","label":"EMPTY","path":"api/index/const/EMPTY","docType":"const"},"da35":{"id":"da35","label":"只完成它，而不发送任何值","options":["08a6"]},"84aa":{"id":"84aa","label":"NEVER","path":"api/index/const/NEVER","docType":"const"},"dfdb":{"id":"dfdb","label":"永远不会发送任何东西","options":["84aa"]},"d8f4":{"id":"d8f4","label":"fromEvent","path":"api/index/function/fromEvent","docType":"function"},"d1eb":{"id":"d1eb","label":"来自 DOM 或 Node.js 或类似的东西","options":["d8f4"]},"3f4e":{"id":"3f4e","label":"fromEventPattern","path":"api/index/function/fromEventPattern","docType":"function"},"372d":{"id":"372d","label":"它使用某个 API 来添加或移除事件处理器","options":["3f4e"]},"760a":{"id":"760a","label":"从一个现有的事件源","options":["d1eb","372d"]},"d3ac":{"id":"d3ac","label":"from","path":"api/index/function/from","docType":"function"},"c2f6":{"id":"c2f6","label":"来自某个 Promise 或事件源","options":["d3ac"]},"553b":{"id":"553b","label":"from","path":"api/index/function/from","docType":"function"},"1f6a":{"id":"1f6a","label":"range","path":"api/index/function/range","docType":"function"},"ca1d":{"id":"ca1d","label":"针对某个数字范围内的那些值","options":["1f6a"]},"6a56":{"id":"6a56","label":"of"},"44c1":{"id":"44c1","label":"针对通过参数给出的那些值","options":["6a56"]},"6eb7":{"id":"6eb7","label":"它是可迭代者","options":["4667","ca1d","44c1"]},"88f3":{"id":"88f3","label":"均匀的","options":["7375"]},"f31c":{"id":"f31c","label":"timer","path":"api/index/function/timer","docType":"function"},"fe03":{"id":"fe03","label":"带有一个可选的首次延迟","options":["f31c"]},"3d28":{"id":"3d28","label":"它基于定时器发送一些值","options":["88f3","fe03"]},"02f1":{"id":"02f1","label":"defer","path":"api/index/function/defer","docType":"function"},"bfd9":{"id":"bfd9","label":"它在被订阅时才按需创建","options":["02f1"]},"2fe6":{"id":"2fe6","label":"我要创建一个新的 Observable","options":["3919","f89c","67d0","da35","dfdb","760a","c2f6","6eb7","3d28","bfd9"]},"1a34":{"id":"1a34","label":"支持常规的回调 API","options":["5175"]},"0e3b":{"id":"0e3b","label":"bindNodeCallback","path":"api/index/function/bindNodeCallback","docType":"function"},"85dd":{"id":"85dd","label":"支持 Node.js 风格的回调 API","options":["0e3b"]},"17c3":{"id":"17c3","label":"我要把某个回调函数转换为 Observable","options":["1a34","85dd"]},"7b11":{"id":"7b11","label":"我还没有任何 Observable，并且","options":["2fe6","17c3"]},"initial":{"id":"initial","options":["5641","8e59","7b11"]}}