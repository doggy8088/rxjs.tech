{"1211":{"id":"1211","label":"它是可迭代者","options":["2742","ecd7","9122"]},"1263":{"id":"1263","label":"发生的过于频繁","options":["bb88","f024","34f0"]},"1558":{"id":"1558","label":"elementAt","path":"api/operators/elementAt","docType":"function"},"1771":{"id":"1771","label":"windowWhen","path":"api/operators/windowWhen","docType":"function"},"1819":{"id":"1819","label":"当另一个 Observable 发送值的时候","options":["b9fb"]},"2742":{"id":"2742","label":"针对某个数组中的那些值","options":["f05a"]},"3011":{"id":"3011","label":"我要从它发送的每个值中取出一个属性","options":["e253"]},"3275":{"id":"3275","label":"takeUntil","path":"api/operators/takeUntil","docType":"function"},"3564":{"id":"3564","label":"last","path":"api/operators/last","docType":"function"},"3598":{"id":"3598","label":"并且只输出最终计算出的值","options":["7e9e"]},"3919":{"id":"3919","label":"bufferCount","path":"api/operators/bufferCount","docType":"function"},"4678":{"id":"4678","label":"并且依次发送每个嵌套 Observable 所发送的值","options":["8dc4","be11"]},"4821":{"id":"4821","label":"takeWhile","path":"api/operators/takeWhile","docType":"function"},"4833":{"id":"4833","label":"我只想从首先发送值的 Observable 接收各个值","options":["fd82"]},"5287":{"id":"5287","label":"并且每当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable，同时取消对前一个嵌套 Observable 的订阅","options":["005c"]},"5415":{"id":"5415","label":"它使用某个 API 来添加或移除事件处理器","options":["44e0"]},"5454":{"id":"5454","label":"并转换为数组","options":["ddc4"]},"5630":{"id":"5630","label":"每个来源中的每个值仅使用一次","options":["7148"]},"5792":{"id":"5792","label":"concat","path":"api/index/function/concat","docType":"function"},"5902":{"id":"5902","label":"withLatestFrom","path":"api/operators/withLatestFrom","docType":"function"},"6080":{"id":"6080","label":"bufferWhen","path":"api/operators/bufferWhen","docType":"function"},"6125":{"id":"6125","label":"debounceTime","path":"api/operators/debounceTime","docType":"function"},"6531":{"id":"6531","label":"次元数据包含从最后一次发送值开始已过去时间","options":["b09a"]},"6639":{"id":"6639","label":"我要监听即将发送的值，但不想影响它们","options":["0316"]},"6771":{"id":"6771","label":"当它完成时","options":["06c7","3cc9"]},"7148":{"id":"7148","label":"zip","path":"api/index/function/zip","docType":"function"},"7279":{"id":"7279","label":"使用常规 Subject","options":["4ece","b8cf"]},"7376":{"id":"7376","label":"single","path":"api/operators/single","docType":"function"},"7508":{"id":"7508","label":"subscribeOn","path":"api/operators/subscribeOn","docType":"function"},"8087":{"id":"8087","label":"基于根据已发送的值计算出的一个键","options":["f749"]},"9122":{"id":"9122","label":"针对通过参数给出的那些值","options":["6d38"]},"9766":{"id":"9766","label":"并且当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable","options":["9aa0"]},"9869":{"id":"9869","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["f05e"]},"1e17":{"id":"1e17","label":"mapTo","path":"api/operators/mapTo","docType":"function"},"251e":{"id":"251e","label":"一个常量值","options":["1e17"]},"3ded":{"id":"3ded","label":"map","path":"api/operators/map","docType":"function"},"86f7":{"id":"86f7","label":"一个通过公式算出来的值","options":["3ded"]},"1f07":{"id":"1f07","label":"我要把它发送的每个值改成","options":["251e","86f7"]},"e253":{"id":"e253","label":"pluck"},"0316":{"id":"0316","label":"tap","path":"api/operators/tap","docType":"function"},"e5e1":{"id":"e5e1","label":"filter","path":"api/operators/filter","docType":"function"},"fe9b":{"id":"fe9b","label":"基于自定义逻辑","options":["e5e1"]},"e058":{"id":"e058","label":"first","path":"api/operators/first","docType":"function"},"a818":{"id":"a818","label":"并且只要第一个值","options":["e058"]},"7d8f":{"id":"7d8f","label":"take","path":"api/operators/take","docType":"function"},"2b28":{"id":"2b28","label":"基于给定的数量","options":["7d8f"]},"3b96":{"id":"3b96","label":"基于自定义逻辑","options":["4821"]},"c253":{"id":"c253","label":"如果它们位于此 Observable 的首部","options":["a818","2b28","3b96"]},"4f47":{"id":"4f47","label":"如果它们精确的处于第 n 位","options":["1558"]},"1f0c":{"id":"1f0c","label":"并且只要最后一个值","options":["3564"]},"dc00":{"id":"dc00","label":"takeLast","path":"api/operators/takeLast","docType":"function"},"fead":{"id":"fead","label":"基于给定的数量","options":["dc00"]},"20fa":{"id":"20fa","label":"如果它们位于此 Observable 的尾部","options":["1f0c","fead"]},"e58b":{"id":"e58b","label":"直到另一个 Observable 发送了值","options":["3275"]},"f11c":{"id":"f11c","label":"我要只允许部分值通过","options":["fe9b","c253","4f47","20fa","e58b"]},"f08f":{"id":"f08f","label":"ignoreElements","path":"api/operators/ignoreElements","docType":"function"},"df05":{"id":"df05","label":"全部","options":["f08f"]},"73dc":{"id":"73dc","label":"skip","path":"api/operators/skip","docType":"function"},"14d5":{"id":"14d5","label":"基于给定的数量","options":["73dc"]},"05ae":{"id":"05ae","label":"skipWhile","path":"api/operators/skipWhile","docType":"function"},"cbf4":{"id":"cbf4","label":"基于自定义逻辑","options":["05ae"]},"e04d":{"id":"e04d","label":"从此 Observable 的首部","options":["14d5","cbf4"]},"0fac":{"id":"0fac","label":"skipLast","path":"api/operators/skipLast","docType":"function"},"6dc0":{"id":"6dc0","label":"从此 Observable 的尾部","options":["0fac"]},"9fe1":{"id":"9fe1","label":"skipUntil","path":"api/operators/skipUntil","docType":"function"},"cc0d":{"id":"cc0d","label":"直到另一个 Observable 发送了值","options":["9fe1"]},"9e58":{"id":"9e58","label":"distinctUntilChanged","path":"api/operators/distinctUntilChanged","docType":"function"},"74fc":{"id":"74fc","label":"发送恰好在当前值前面的那个","options":["9e58"]},"0e99":{"id":"0e99","label":"distinct","path":"api/operators/distinct","docType":"function"},"f8e8":{"id":"f8e8","label":"以前任何时候曾发送过","options":["0e99"]},"c699":{"id":"c699","label":"根据值是否相等","options":["74fc","f8e8"]},"78c7":{"id":"78c7","label":"distinctUntilKeyChanged","path":"api/operators/distinctUntilKeyChanged","docType":"function"},"c1ee":{"id":"c1ee","label":"发送恰好在当前值前面的那个","options":["78c7"]},"be08":{"id":"be08","label":"根据一个某个键或对象属性","options":["c1ee"]},"9b51":{"id":"9b51","label":"与某些以前发送的值匹配","options":["c699","be08"]},"9feb":{"id":"9feb","label":"throttle","path":"api/operators/throttle","docType":"function"},"0398":{"id":"0398","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["9feb"]},"c76f":{"id":"c76f","label":"throttleTime","path":"api/operators/throttleTime","docType":"function"},"b1e2":{"id":"b1e2","label":"这个时间窗口是根据某个时长来决定的","options":["c76f"]},"bb88":{"id":"bb88","label":"发送每个时间窗口中的第一个值","options":["0398","b1e2"]},"aa73":{"id":"aa73","label":"audit","path":"api/operators/audit","docType":"function"},"51ba":{"id":"51ba","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["aa73"]},"a74e":{"id":"a74e","label":"auditTime","path":"api/operators/auditTime","docType":"function"},"89b9":{"id":"89b9","label":"这个时间窗口是根据某个时长来决定的","options":["a74e"]},"f024":{"id":"f024","label":"发送每个时间窗口中的最后一个值","options":["51ba","89b9"]},"41bf":{"id":"41bf","label":"debounce","path":"api/operators/debounce","docType":"function"},"fcf5":{"id":"fcf5","label":"此平静的间隔阈值由另一个 Observable 决定","options":["41bf"]},"cccc":{"id":"cccc","label":"此平静的间隔阈值是根据某个时长决定的","options":["6125"]},"34f0":{"id":"34f0","label":"等足够平静时就发送最后一个值","options":["fcf5","cccc"]},"7f0c":{"id":"7f0c","label":"我要忽略某些值","options":["df05","e04d","6dc0","cc0d","9b51","1263"]},"7e9e":{"id":"7e9e","label":"reduce","path":"api/operators/reduce","docType":"function"},"010d":{"id":"010d","label":"scan","path":"api/operators/scan","docType":"function"},"70da":{"id":"70da","label":"并且每当来源发送某个值时就输出计算好的值","options":["010d"]},"9aa0":{"id":"9aa0","label":"mergeScan","path":"api/operators/mergeScan","docType":"function"},"005c":{"id":"005c","label":"switchScan","path":"api/operators/switchScan","docType":"function"},"6ad2":{"id":"6ad2","label":"我要使用已发送的所有值做某种计算","options":["3598","70da","9766","5287"]},"cba9":{"id":"cba9","label":"materialize","path":"api/operators/materialize","docType":"function"},"8a98":{"id":"8a98","label":"此元数据描述每个通知（next、error 或 complete）","options":["cba9"]},"b09a":{"id":"b09a","label":"timeInterval","path":"api/operators/timeInterval","docType":"function"},"a136":{"id":"a136","label":"我要用元数据包装它的各个消息","options":["8a98","6531"]},"8ba9":{"id":"8ba9","label":"timeout","path":"api/operators/timeout","docType":"function"},"16f9":{"id":"16f9","label":"我要抛出一个错误","options":["8ba9"]},"3f53":{"id":"3f53","label":"timeoutWith","path":"api/operators/timeoutWith","docType":"function"},"4d37":{"id":"4d37","label":"我要切换到另一个 Observable","options":["3f53"]},"230a":{"id":"230a","label":"在某个非交互式间隔之后","options":["16f9","4d37"]},"86bd":{"id":"86bd","label":"我要确保只有一个值","options":["7376"]},"5ac7":{"id":"5ac7","label":"count","path":"api/operators/count","docType":"function"},"bbfa":{"id":"bbfa","label":"我要知道它发送了多少个值","options":["5ac7"]},"5d55":{"id":"5d55","label":"startWith"},"dbe0":{"id":"dbe0","label":"我要在开头放一个值","options":["5d55"]},"b8dd":{"id":"b8dd","label":"delay","path":"api/operators/delay","docType":"function"},"844d":{"id":"844d","label":"基于给定的时间","options":["b8dd"]},"9efd":{"id":"9efd","label":"delayWhen","path":"api/operators/delayWhen","docType":"function"},"844c":{"id":"844c","label":"基于另一个 Observable 的发送情况","options":["9efd"]},"23ea":{"id":"23ea","label":"我要延迟后再发送","options":["844d","844c"]},"ddc4":{"id":"ddc4","label":"toArray","path":"api/operators/toArray","docType":"function"},"caed":{"id":"caed","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"toPromise"},"3f26":{"id":"3f26","label":"并且转换为 Promise","options":["caed"]},"576c":{"id":"576c","label":"直到此 Observable 完成","options":["5454","3f26"]},"b2ec":{"id":"b2ec","label":"pairwise","path":"api/operators/pairwise","docType":"function"},"a0be":{"id":"a0be","label":"连续配对，作为数组","options":["b2ec"]},"d787":{"id":"d787","label":"partition","path":"api/index/function/partition","docType":"function"},"23df":{"id":"23df","label":"基于某种标准，并且输出两个 Observable：那些符合此标准的，和不符合此标准的","options":["d787"]},"d994":{"id":"d994","label":"并且把分好的组以数组形式发送","options":["3919"]},"5ca1":{"id":"5ca1","label":"windowCount","path":"api/operators/windowCount","docType":"function"},"aeea":{"id":"aeea","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["5ca1"]},"61c8":{"id":"61c8","label":"根据特定大小的批次","options":["d994","aeea"]},"777c":{"id":"777c","label":"立即","options":["507d"]},"134e":{"id":"134e","label":"并且把分好的组以数组的形式发送","options":["777c"]},"264f":{"id":"264f","label":"windowTime","path":"api/operators/windowTime","docType":"function"},"33c7":{"id":"33c7","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["264f"]},"465f":{"id":"465f","label":"基于时间","options":["134e","33c7"]},"8f56":{"id":"8f56","label":"buffer","path":"api/operators/buffer","docType":"function"},"10b2":{"id":"10b2","label":"并且把分好的组以数组的形式发送","options":["8f56"]},"a07b":{"id":"a07b","label":"window","path":"api/operators/window","docType":"function"},"8d34":{"id":"8d34","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["a07b"]},"0cfe":{"id":"0cfe","label":"直到另一个 Observable 发送了值","options":["10b2","8d34"]},"ec14":{"id":"ec14","label":"并且把分好的组以数组的形式发送","options":["6080"]},"44c5":{"id":"44c5","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["1771"]},"62af":{"id":"62af","label":"基于某个按需创建的 Observable 的发送情况","options":["ec14","44c5"]},"9ffa":{"id":"9ffa","label":"bufferToggle","path":"api/operators/bufferToggle","docType":"function"},"d871":{"id":"d871","label":"并且把分好的组以数组的形式发送","options":["9ffa"]},"1b49":{"id":"1b49","label":"windowToggle","path":"api/operators/windowToggle","docType":"function"},"a21d":{"id":"a21d","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["1b49"]},"b63d":{"id":"b63d","label":"基于另一个 Observable 开始一组，并基于第三个 Observable 结束这一组","options":["d871","a21d"]},"f749":{"id":"f749","label":"groupBy","path":"api/operators/groupBy","docType":"function"},"67f4":{"id":"67f4","label":"我要对这些值进行分组","options":["576c","a0be","23df","61c8","465f","0cfe","62af","b63d","8087"]},"eae0":{"id":"eae0","label":"mergeMapTo","path":"api/operators/mergeMapTo","docType":"function"},"89b1":{"id":"89b1","label":"这里的嵌套 Observable 对每个值都是一样的","options":["eae0"]},"1e3f":{"id":"1e3f","label":"mergeMap","path":"api/operators/mergeMap","docType":"function"},"b2cd":{"id":"b2cd","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["1e3f"]},"eadc":{"id":"eadc","label":"并且并行发送全部嵌套 Observable 所发送的值","options":["89b1","b2cd"]},"e914":{"id":"e914","label":"concatMapTo","path":"api/operators/concatMapTo","docType":"function"},"8dc4":{"id":"8dc4","label":"这里的嵌套 Observable 对每个值都是一样的","options":["e914"]},"f17c":{"id":"f17c","label":"concatMap","path":"api/operators/concatMap","docType":"function"},"be11":{"id":"be11","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["f17c"]},"ba24":{"id":"ba24","label":"switchMapTo","path":"api/operators/switchMapTo","docType":"function"},"5bd3":{"id":"5bd3","label":"这里的嵌套 Observable 对每个值都是一样的","options":["ba24"]},"143b":{"id":"143b","label":"switchMap","path":"api/operators/switchMap","docType":"function"},"906b":{"id":"906b","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["143b"]},"165e":{"id":"165e","label":"并且当新值抵达时，取消前一个嵌套 Observable","options":["5bd3","906b"]},"dabe":{"id":"dabe","label":"exhaustMap","path":"api/operators/exhaustMap","docType":"function"},"c4b5":{"id":"c4b5","label":"并且即使当前的嵌套 Observable 尚未完结，也要忽略进来的值","options":["dabe"]},"ed0d":{"id":"ed0d","label":"expand","path":"api/operators/expand","docType":"function"},"b962":{"id":"b962","label":"并且对每一个新值递归启动一个新的 Observable","options":["ed0d"]},"0c1b":{"id":"0c1b","label":"我要为每个值开始一个新的 Observable","options":["eadc","4678","165e","c4b5","b962"]},"352d":{"id":"352d","label":"pipe","path":"api/index/function/pipe","docType":"function"},"018d":{"id":"018d","label":"我要执行自定义操作","options":["352d"]},"416d":{"id":"416d","label":"share","path":"api/operators/share","docType":"function"},"4ece":{"id":"4ece","label":"并且在第一个订阅者抵达时尽快启动","options":["416d"]},"3c77":{"id":"3c77","label":"publish"},"b8cf":{"id":"b8cf","label":"并且手动或用程序启动它","options":["3c77"]},"f2a3":{"id":"f2a3","label":"publishBehavior"},"da8c":{"id":"da8c","label":"使用 BehaviorSubject","options":["f2a3"]},"aa35":{"id":"aa35","label":"publishReplay"},"e686":{"id":"e686","label":"使用 ReplaySubject","options":["aa35"]},"faf7":{"id":"faf7","label":"publishLast"},"0717":{"id":"0717","label":"使用 AsyncSubject","options":["faf7"]},"c9ca":{"id":"c9ca","label":"multicast"},"bb6b":{"id":"bb6b","label":"使用某种特殊的 Subject 实现","options":["c9ca"]},"06cb":{"id":"06cb","label":"我要在多个订阅者之间共享某个订阅","options":["7279","da8c","e686","0717","bb6b"]},"c00f":{"id":"c00f","label":"catchError","path":"api/operators/catchError","docType":"function"},"c854":{"id":"c854","label":"我要启动一个新的 Observable","options":["c00f"]},"507d":{"id":"507d","label":"retry","path":"api/operators/retry","docType":"function"},"e794":{"id":"e794","label":"retryWhen","path":"api/operators/retryWhen","docType":"function"},"09ca":{"id":"09ca","label":"当另一个 Observable 发送值的时候","options":["e794"]},"40dd":{"id":"40dd","label":"我要重新订阅","options":["777c","09ca"]},"181b":{"id":"181b","label":"当发生错误时","options":["c854","40dd"]},"eb55":{"id":"eb55","label":"repeat","path":"api/operators/repeat","docType":"function"},"f765":{"id":"f765","label":"立即","options":["eb55"]},"b9fb":{"id":"b9fb","label":"repeatWhen","path":"api/operators/repeatWhen","docType":"function"},"06c7":{"id":"06c7","label":"我要重新订阅","options":["f765","1819"]},"04f1":{"id":"04f1","label":"concat","path":"api/index/function/concat","docType":"function"},"3cc9":{"id":"3cc9","label":"我要启动一个新的 Observable","options":["04f1"]},"ff29":{"id":"ff29","label":"finalize","path":"api/operators/finalize","docType":"function"},"9b6e":{"id":"9b6e","label":"当它完成、出错或退订时，我要执行某个函数","options":["ff29"]},"646f":{"id":"646f","label":"它会修改从调用到订阅之间的路由","options":["7508"]},"e91e":{"id":"e91e","label":"observeOn","path":"api/operators/observeOn","docType":"function"},"5e66":{"id":"5e66","label":"它会修改从发送值到 Observer 之间的路由","options":["e91e"]},"909f":{"id":"909f","label":"我要更改调度器（Scheduler）","options":["646f","5e66"]},"d5d0":{"id":"d5d0","label":"race","path":"api/index/function/race","docType":"function"},"2d43":{"id":"2d43","label":"我只想从首先发送值的 Observable 接收各个值","options":["d5d0"]},"89b5":{"id":"89b5","label":"merge","path":"api/index/function/merge","docType":"function"},"addd":{"id":"addd","label":"我要输出所有值，而不管是从哪一个发送的","options":["89b5"]},"f05e":{"id":"f05e","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"06ab":{"id":"06ab","label":"仅当主 Observable 发送值的时候，使用每个来源发送的最后一个值","options":["5902"]},"a36b":{"id":"a36b","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["9869","06ab","5630"]},"bdd1":{"id":"bdd1","label":"我要把这个 Observable 和其它的合并，并且","options":["2d43","addd","a36b"]},"500b":{"id":"500b","label":"我已经有一个 Observable，并且","options":["1f07","3011","6639","f11c","7f0c","6ad2","a136","230a","86bd","bbfa","dbe0","23ea","67f4","0c1b","018d","06cb","181b","6771","9b6e","909f","bdd1"]},"fd82":{"id":"fd82","label":"race","path":"api/index/function/race","docType":"function"},"b963":{"id":"b963","label":"forkJoin","path":"api/index/function/forkJoin","docType":"function"},"b40d":{"id":"b40d","label":"我想在它们全都完成时得到通知","options":["b963"]},"cb22":{"id":"cb22","label":"merge","path":"api/index/function/merge","docType":"function"},"c429":{"id":"c429","label":"我要输出所有值，而不管是从哪一个发送的","options":["cb22"]},"a459":{"id":"a459","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"a2f4":{"id":"a2f4","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["a459"]},"cdb6":{"id":"cdb6","label":"zip","path":"api/index/function/zip","docType":"function"},"cfb7":{"id":"cfb7","label":"每个来源中的每个值仅使用一次","options":["cdb6"]},"f003":{"id":"f003","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["a2f4","cfb7"]},"b269":{"id":"b269","label":"我要依次订阅它们","options":["5792"]},"f4c0":{"id":"f4c0","label":"我已经有了由某些 Observable 组合成的单一 Observable，并且","options":["4833","b40d","c429","f003","b269"]},"f087":{"id":"f087","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"create"},"b6bf":{"id":"b6bf","label":"使用自定义逻辑","options":["f087"]},"fa79":{"id":"fa79","label":"generate","path":"api/index/function/generate","docType":"function"},"3bef":{"id":"3bef","label":"使用一个类似于 for 循环的状态机","options":["fa79"]},"b9d9":{"id":"b9d9","label":"throwError","path":"api/index/function/throwError","docType":"function"},"6f2d":{"id":"6f2d","label":"抛出一个错误","options":["b9d9"]},"3fad":{"id":"3fad","label":"EMPTY","path":"api/index/const/EMPTY","docType":"const"},"8c5c":{"id":"8c5c","label":"只完成它，而不发送任何值","options":["3fad"]},"41cc":{"id":"41cc","label":"NEVER","path":"api/index/const/NEVER","docType":"const"},"530e":{"id":"530e","label":"永远不会发送任何东西","options":["41cc"]},"dedf":{"id":"dedf","label":"fromEvent","path":"api/index/function/fromEvent","docType":"function"},"60cf":{"id":"60cf","label":"来自 DOM 或 Node.js 或类似的东西","options":["dedf"]},"44e0":{"id":"44e0","label":"fromEventPattern","path":"api/index/function/fromEventPattern","docType":"function"},"846f":{"id":"846f","label":"从一个现有的事件源","options":["60cf","5415"]},"fd2a":{"id":"fd2a","label":"from","path":"api/index/function/from","docType":"function"},"a38c":{"id":"a38c","label":"来自某个 Promise 或事件源","options":["fd2a"]},"f05a":{"id":"f05a","label":"from","path":"api/index/function/from","docType":"function"},"e4ee":{"id":"e4ee","label":"range","path":"api/index/function/range","docType":"function"},"ecd7":{"id":"ecd7","label":"针对某个数字范围内的那些值","options":["e4ee"]},"6d38":{"id":"6d38","label":"of"},"4eb1":{"id":"4eb1","label":"interval","path":"api/index/function/interval","docType":"function"},"80d7":{"id":"80d7","label":"均匀的","options":["4eb1"]},"2be3":{"id":"2be3","label":"timer","path":"api/index/function/timer","docType":"function"},"6d8b":{"id":"6d8b","label":"带有一个可选的首次延迟","options":["2be3"]},"6f98":{"id":"6f98","label":"它基于定时器发送一些值","options":["80d7","6d8b"]},"d62a":{"id":"d62a","label":"defer","path":"api/index/function/defer","docType":"function"},"d175":{"id":"d175","label":"它在被订阅时才按需创建","options":["d62a"]},"a051":{"id":"a051","label":"我要创建一个新的 Observable","options":["b6bf","3bef","6f2d","8c5c","530e","846f","a38c","1211","6f98","d175"]},"4d79":{"id":"4d79","label":"bindCallback","path":"api/index/function/bindCallback","docType":"function"},"5f05":{"id":"5f05","label":"支持常规的回调 API","options":["4d79"]},"86d7":{"id":"86d7","label":"bindNodeCallback","path":"api/index/function/bindNodeCallback","docType":"function"},"cc22":{"id":"cc22","label":"支持 Node.js 风格的回调 API","options":["86d7"]},"0dbb":{"id":"0dbb","label":"我要把某个回调函数转换为 Observable","options":["5f05","cc22"]},"74d9":{"id":"74d9","label":"我还没有任何 Observable，并且","options":["a051","0dbb"]},"initial":{"id":"initial","options":["500b","f4c0","74d9"]}}