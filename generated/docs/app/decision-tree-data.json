{"1462":{"id":"1462","label":"基于另一个 Observable 的发送情况","options":["8380"]},"1588":{"id":"1588","label":"等足够平静时就发送最后一个值","options":["7c22","d9b3"]},"1626":{"id":"1626","label":"基于另一个 Observable 开始一组，并基于第三个 Observable 结束这一组","options":["b044","aacc"]},"1708":{"id":"1708","label":"exhaustMap","path":"api/operators/exhaustMap","docType":"function"},"1982":{"id":"1982","label":"windowCount","path":"api/operators/windowCount","docType":"function"},"2129":{"id":"2129","label":"带有一个可选的首次延迟","options":["50a2"]},"2150":{"id":"2150","label":"它在被订阅时才按需创建","options":["ac78"]},"2245":{"id":"2245","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["4e1b","58a6"]},"2397":{"id":"2397","label":"take","path":"api/operators/take","docType":"function"},"3377":{"id":"3377","label":"bufferTime","path":"api/operators/bufferTime","docType":"function"},"3437":{"id":"3437","label":"windowWhen","path":"api/operators/windowWhen","docType":"function"},"3690":{"id":"3690","label":"takeLast","path":"api/operators/takeLast","docType":"function"},"3737":{"id":"3737","label":"我要延迟后再发送","options":["6e9d","1462"]},"3780":{"id":"3780","label":"mapTo","path":"api/operators/mapTo","docType":"function"},"3827":{"id":"3827","label":"基于根据已发送的值计算出的一个键","options":["ef4b"]},"4087":{"id":"4087","label":"来自某个 Promise 或事件源","options":["7989"]},"4758":{"id":"4758","label":"publish"},"5646":{"id":"5646","label":"scan","path":"api/operators/scan","docType":"function"},"5707":{"id":"5707","label":"catchError","path":"api/operators/catchError","docType":"function"},"6550":{"id":"6550","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["1982"]},"6782":{"id":"6782","label":"在某个非交互式间隔之后","options":["ab26","ed8c"]},"7248":{"id":"7248","label":"我还没有任何 Observable，并且","options":["15f9","39b8"]},"7305":{"id":"7305","label":"并且当新值抵达时，取消前一个嵌套 Observable","options":["c9a1","79fb"]},"7306":{"id":"7306","label":"我要依次订阅它们","options":["3d45"]},"7554":{"id":"7554","label":"使用一个类似于 for 循环的状态机","options":["ca58"]},"7748":{"id":"7748","label":"这个时间窗口是根据某个时长来决定的","options":["1acc"]},"7961":{"id":"7961","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["c85a"]},"7989":{"id":"7989","label":"from","path":"api/index/function/from","docType":"function"},"8079":{"id":"8079","label":"如果它们位于此 Observable 的首部","options":["c22a","8e5e","7dc2"]},"8380":{"id":"8380","label":"delayWhen","path":"api/operators/delayWhen","docType":"function"},"8473":{"id":"8473","label":"我要把它发送的每个值改成","options":["a6d5","4df6"]},"8486":{"id":"8486","label":"filter","path":"api/operators/filter","docType":"function"},"8662":{"id":"8662","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["f9b9"]},"8749":{"id":"8749","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["751b"]},"a6d5":{"id":"a6d5","label":"一个常量值","options":["3780"]},"ed17":{"id":"ed17","label":"map","path":"api/operators/map","docType":"function"},"4df6":{"id":"4df6","label":"一个通过公式算出来的值","options":["ed17"]},"a1c6":{"id":"a1c6","label":"pluck"},"01fe":{"id":"01fe","label":"我要从它发送的每个值中取出一个属性","options":["a1c6"]},"ecb6":{"id":"ecb6","label":"tap","path":"api/operators/tap","docType":"function"},"53b2":{"id":"53b2","label":"我要监听即将发送的值，但不想影响它们","options":["ecb6"]},"e111":{"id":"e111","label":"基于自定义逻辑","options":["8486"]},"76de":{"id":"76de","label":"first","path":"api/operators/first","docType":"function"},"c22a":{"id":"c22a","label":"并且只要第一个值","options":["76de"]},"8e5e":{"id":"8e5e","label":"基于给定的数量","options":["2397"]},"dddd":{"id":"dddd","label":"takeWhile","path":"api/operators/takeWhile","docType":"function"},"7dc2":{"id":"7dc2","label":"基于自定义逻辑","options":["dddd"]},"c1b7":{"id":"c1b7","label":"elementAt","path":"api/operators/elementAt","docType":"function"},"74db":{"id":"74db","label":"如果它们精确的处于第 n 位","options":["c1b7"]},"7fe8":{"id":"7fe8","label":"last","path":"api/operators/last","docType":"function"},"eda1":{"id":"eda1","label":"并且只要最后一个值","options":["7fe8"]},"69b4":{"id":"69b4","label":"基于给定的数量","options":["3690"]},"db13":{"id":"db13","label":"如果它们位于此 Observable 的尾部","options":["eda1","69b4"]},"7cbe":{"id":"7cbe","label":"takeUntil","path":"api/operators/takeUntil","docType":"function"},"47c7":{"id":"47c7","label":"直到另一个 Observable 发送了值","options":["7cbe"]},"6b70":{"id":"6b70","label":"我要只允许部分值通过","options":["e111","8079","74db","db13","47c7"]},"2dc8":{"id":"2dc8","label":"ignoreElements","path":"api/operators/ignoreElements","docType":"function"},"bd34":{"id":"bd34","label":"全部","options":["2dc8"]},"c7e0":{"id":"c7e0","label":"skip","path":"api/operators/skip","docType":"function"},"eeaa":{"id":"eeaa","label":"基于给定的数量","options":["c7e0"]},"5aa7":{"id":"5aa7","label":"skipWhile","path":"api/operators/skipWhile","docType":"function"},"fe80":{"id":"fe80","label":"基于自定义逻辑","options":["5aa7"]},"afb2":{"id":"afb2","label":"从此 Observable 的首部","options":["eeaa","fe80"]},"cab0":{"id":"cab0","label":"skipLast","path":"api/operators/skipLast","docType":"function"},"c60c":{"id":"c60c","label":"从此 Observable 的尾部","options":["cab0"]},"187b":{"id":"187b","label":"skipUntil","path":"api/operators/skipUntil","docType":"function"},"276b":{"id":"276b","label":"直到另一个 Observable 发送了值","options":["187b"]},"dd6c":{"id":"dd6c","label":"distinctUntilChanged","path":"api/operators/distinctUntilChanged","docType":"function"},"7b5b":{"id":"7b5b","label":"发送恰好在当前值前面的那个","options":["dd6c"]},"1cb6":{"id":"1cb6","label":"distinct","path":"api/operators/distinct","docType":"function"},"0f7d":{"id":"0f7d","label":"以前任何时候曾发送过","options":["1cb6"]},"ad26":{"id":"ad26","label":"根据值是否相等","options":["7b5b","0f7d"]},"4ce0":{"id":"4ce0","label":"distinctUntilKeyChanged","path":"api/operators/distinctUntilKeyChanged","docType":"function"},"460a":{"id":"460a","label":"发送恰好在当前值前面的那个","options":["4ce0"]},"bea6":{"id":"bea6","label":"根据一个某个键或对象属性","options":["460a"]},"aa89":{"id":"aa89","label":"与某些以前发送的值匹配","options":["ad26","bea6"]},"818f":{"id":"818f","label":"throttle","path":"api/operators/throttle","docType":"function"},"eca7":{"id":"eca7","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["818f"]},"1e96":{"id":"1e96","label":"throttleTime","path":"api/operators/throttleTime","docType":"function"},"989c":{"id":"989c","label":"这个时间窗口是根据某个时长来决定的","options":["1e96"]},"2b2a":{"id":"2b2a","label":"发送每个时间窗口中的第一个值","options":["eca7","989c"]},"c85a":{"id":"c85a","label":"audit","path":"api/operators/audit","docType":"function"},"1acc":{"id":"1acc","label":"auditTime","path":"api/operators/auditTime","docType":"function"},"0500":{"id":"0500","label":"发送每个时间窗口中的最后一个值","options":["7961","7748"]},"d086":{"id":"d086","label":"debounce","path":"api/operators/debounce","docType":"function"},"7c22":{"id":"7c22","label":"此平静的间隔阈值由另一个 Observable 决定","options":["d086"]},"04ac":{"id":"04ac","label":"debounceTime","path":"api/operators/debounceTime","docType":"function"},"d9b3":{"id":"d9b3","label":"此平静的间隔阈值是根据某个时长决定的","options":["04ac"]},"d3c5":{"id":"d3c5","label":"发生的过于频繁","options":["2b2a","0500","1588"]},"d408":{"id":"d408","label":"我要忽略某些值","options":["bd34","afb2","c60c","276b","aa89","d3c5"]},"600a":{"id":"600a","label":"reduce","path":"api/operators/reduce","docType":"function"},"c936":{"id":"c936","label":"并且只输出最终计算出的值","options":["600a"]},"7b34":{"id":"7b34","label":"并且每当来源发送某个值时就输出计算好的值","options":["5646"]},"c003":{"id":"c003","label":"mergeScan","path":"api/operators/mergeScan","docType":"function"},"bc3d":{"id":"bc3d","label":"并且当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable","options":["c003"]},"4f91":{"id":"4f91","label":"switchScan","path":"api/operators/switchScan","docType":"function"},"a365":{"id":"a365","label":"并且每当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable，同时取消对前一个嵌套 Observable 的订阅","options":["4f91"]},"8b25":{"id":"8b25","label":"我要使用已发送的所有值做某种计算","options":["c936","7b34","bc3d","a365"]},"b999":{"id":"b999","label":"materialize","path":"api/operators/materialize","docType":"function"},"a301":{"id":"a301","label":"此元数据描述每个通知（next、error 或 complete）","options":["b999"]},"abab":{"id":"abab","label":"timeInterval","path":"api/operators/timeInterval","docType":"function"},"2fcf":{"id":"2fcf","label":"次元数据包含从最后一次发送值开始已过去时间","options":["abab"]},"d86d":{"id":"d86d","label":"我要用元数据包装它的各个消息","options":["a301","2fcf"]},"684c":{"id":"684c","label":"timeout","path":"api/operators/timeout","docType":"function"},"ab26":{"id":"ab26","label":"我要抛出一个错误","options":["684c"]},"867e":{"id":"867e","label":"timeoutWith","path":"api/operators/timeoutWith","docType":"function"},"ed8c":{"id":"ed8c","label":"我要切换到另一个 Observable","options":["867e"]},"cff3":{"id":"cff3","label":"single","path":"api/operators/single","docType":"function"},"ee1a":{"id":"ee1a","label":"我要确保只有一个值","options":["cff3"]},"ba55":{"id":"ba55","label":"count","path":"api/operators/count","docType":"function"},"c3df":{"id":"c3df","label":"我要知道它发送了多少个值","options":["ba55"]},"261f":{"id":"261f","label":"startWith"},"c486":{"id":"c486","label":"我要在开头放一个值","options":["261f"]},"90fb":{"id":"90fb","label":"delay","path":"api/operators/delay","docType":"function"},"6e9d":{"id":"6e9d","label":"基于给定的时间","options":["90fb"]},"c960":{"id":"c960","label":"toArray","path":"api/operators/toArray","docType":"function"},"6ac3":{"id":"6ac3","label":"并转换为数组","options":["c960"]},"88e1":{"id":"88e1","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"toPromise"},"4d70":{"id":"4d70","label":"并且转换为 Promise","options":["88e1"]},"bf21":{"id":"bf21","label":"直到此 Observable 完成","options":["6ac3","4d70"]},"9ba3":{"id":"9ba3","label":"pairwise","path":"api/operators/pairwise","docType":"function"},"39ee":{"id":"39ee","label":"连续配对，作为数组","options":["9ba3"]},"290b":{"id":"290b","label":"partition","path":"api/index/function/partition","docType":"function"},"e205":{"id":"e205","label":"基于某种标准，并且输出两个 Observable：那些符合此标准的，和不符合此标准的","options":["290b"]},"a313":{"id":"a313","label":"bufferCount","path":"api/operators/bufferCount","docType":"function"},"a888":{"id":"a888","label":"并且把分好的组以数组形式发送","options":["a313"]},"678d":{"id":"678d","label":"根据特定大小的批次","options":["a888","6550"]},"ccfe":{"id":"ccfe","label":"并且把分好的组以数组的形式发送","options":["3377"]},"751b":{"id":"751b","label":"windowTime","path":"api/operators/windowTime","docType":"function"},"6c9e":{"id":"6c9e","label":"基于时间","options":["ccfe","8749"]},"ae66":{"id":"ae66","label":"buffer","path":"api/operators/buffer","docType":"function"},"9f3d":{"id":"9f3d","label":"并且把分好的组以数组的形式发送","options":["ae66"]},"7a86":{"id":"7a86","label":"window","path":"api/operators/window","docType":"function"},"d735":{"id":"d735","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["7a86"]},"1ffc":{"id":"1ffc","label":"直到另一个 Observable 发送了值","options":["9f3d","d735"]},"d50a":{"id":"d50a","label":"bufferWhen","path":"api/operators/bufferWhen","docType":"function"},"1e81":{"id":"1e81","label":"并且把分好的组以数组的形式发送","options":["d50a"]},"f1be":{"id":"f1be","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["3437"]},"685a":{"id":"685a","label":"基于某个按需创建的 Observable 的发送情况","options":["1e81","f1be"]},"c3ba":{"id":"c3ba","label":"bufferToggle","path":"api/operators/bufferToggle","docType":"function"},"b044":{"id":"b044","label":"并且把分好的组以数组的形式发送","options":["c3ba"]},"d0b8":{"id":"d0b8","label":"windowToggle","path":"api/operators/windowToggle","docType":"function"},"aacc":{"id":"aacc","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["d0b8"]},"ef4b":{"id":"ef4b","label":"groupBy","path":"api/operators/groupBy","docType":"function"},"ed61":{"id":"ed61","label":"我要对这些值进行分组","options":["bf21","39ee","e205","678d","6c9e","1ffc","685a","1626","3827"]},"30ec":{"id":"30ec","label":"mergeMapTo","path":"api/operators/mergeMapTo","docType":"function"},"c035":{"id":"c035","label":"这里的嵌套 Observable 对每个值都是一样的","options":["30ec"]},"c93c":{"id":"c93c","label":"mergeMap","path":"api/operators/mergeMap","docType":"function"},"a35b":{"id":"a35b","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["c93c"]},"3c6d":{"id":"3c6d","label":"并且并行发送全部嵌套 Observable 所发送的值","options":["c035","a35b"]},"744f":{"id":"744f","label":"concatMapTo","path":"api/operators/concatMapTo","docType":"function"},"fdbe":{"id":"fdbe","label":"这里的嵌套 Observable 对每个值都是一样的","options":["744f"]},"5ffe":{"id":"5ffe","label":"concatMap","path":"api/operators/concatMap","docType":"function"},"f4dd":{"id":"f4dd","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["5ffe"]},"9e8c":{"id":"9e8c","label":"并且依次发送每个嵌套 Observable 所发送的值","options":["fdbe","f4dd"]},"ce79":{"id":"ce79","label":"switchMapTo","path":"api/operators/switchMapTo","docType":"function"},"c9a1":{"id":"c9a1","label":"这里的嵌套 Observable 对每个值都是一样的","options":["ce79"]},"e49d":{"id":"e49d","label":"switchMap","path":"api/operators/switchMap","docType":"function"},"79fb":{"id":"79fb","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["e49d"]},"f06a":{"id":"f06a","label":"并且即使当前的嵌套 Observable 尚未完结，也要忽略进来的值","options":["1708"]},"d087":{"id":"d087","label":"expand","path":"api/operators/expand","docType":"function"},"8a12":{"id":"8a12","label":"并且对每一个新值递归启动一个新的 Observable","options":["d087"]},"b264":{"id":"b264","label":"我要为每个值开始一个新的 Observable","options":["3c6d","9e8c","7305","f06a","8a12"]},"bbca":{"id":"bbca","label":"pipe","path":"api/index/function/pipe","docType":"function"},"5fac":{"id":"5fac","label":"我要执行自定义操作","options":["bbca"]},"ccba":{"id":"ccba","label":"share","path":"api/operators/share","docType":"function"},"b6e2":{"id":"b6e2","label":"立即","options":["ed8b"]},"1c83":{"id":"1c83","label":"并且手动或用程序启动它","options":["4758"]},"06ec":{"id":"06ec","label":"使用常规 Subject","options":["b6e2","1c83"]},"9b5c":{"id":"9b5c","label":"publishBehavior"},"5ed2":{"id":"5ed2","label":"使用 BehaviorSubject","options":["9b5c"]},"e10c":{"id":"e10c","label":"publishReplay"},"004b":{"id":"004b","label":"使用 ReplaySubject","options":["e10c"]},"72db":{"id":"72db","label":"publishLast"},"29cf":{"id":"29cf","label":"使用 AsyncSubject","options":["72db"]},"6eb8":{"id":"6eb8","label":"multicast"},"e74e":{"id":"e74e","label":"使用某种特殊的 Subject 实现","options":["6eb8"]},"30f8":{"id":"30f8","label":"我要在多个订阅者之间共享某个订阅","options":["06ec","5ed2","004b","29cf","e74e"]},"747a":{"id":"747a","label":"我要启动一个新的 Observable","options":["5707"]},"760f":{"id":"760f","label":"retry","path":"api/operators/retry","docType":"function"},"1df2":{"id":"1df2","label":"立即","options":["760f"]},"7dad":{"id":"7dad","label":"retryWhen","path":"api/operators/retryWhen","docType":"function"},"866c":{"id":"866c","label":"当另一个 Observable 发送值的时候","options":["7dad"]},"fe3e":{"id":"fe3e","label":"我要重新订阅","options":["1df2","866c"]},"df27":{"id":"df27","label":"当发生错误时","options":["747a","fe3e"]},"ed8b":{"id":"ed8b","label":"repeat","path":"api/operators/repeat","docType":"function"},"506e":{"id":"506e","label":"repeatWhen","path":"api/operators/repeatWhen","docType":"function"},"dc6b":{"id":"dc6b","label":"当另一个 Observable 发送值的时候","options":["506e"]},"0107":{"id":"0107","label":"我要重新订阅","options":["b6e2","dc6b"]},"e358":{"id":"e358","label":"concat","path":"api/index/function/concat","docType":"function"},"2c8e":{"id":"2c8e","label":"我要启动一个新的 Observable","options":["e358"]},"f8b9":{"id":"f8b9","label":"当它完成时","options":["0107","2c8e"]},"023e":{"id":"023e","label":"finalize","path":"api/operators/finalize","docType":"function"},"9c94":{"id":"9c94","label":"当它完成、出错或退订时，我要执行某个函数","options":["023e"]},"96fc":{"id":"96fc","label":"subscribeOn","path":"api/operators/subscribeOn","docType":"function"},"2e4b":{"id":"2e4b","label":"它会修改从调用到订阅之间的路由","options":["96fc"]},"ed53":{"id":"ed53","label":"observeOn","path":"api/operators/observeOn","docType":"function"},"3a6c":{"id":"3a6c","label":"它会修改从发送值到 Observer 之间的路由","options":["ed53"]},"7d3f":{"id":"7d3f","label":"我要更改调度器（Scheduler）","options":["2e4b","3a6c"]},"fd49":{"id":"fd49","label":"race","path":"api/index/function/race","docType":"function"},"123d":{"id":"123d","label":"我只想从首先发送值的 Observable 接收各个值","options":["fd49"]},"905f":{"id":"905f","label":"merge","path":"api/index/function/merge","docType":"function"},"c8e6":{"id":"c8e6","label":"我要输出所有值，而不管是从哪一个发送的","options":["905f"]},"f9b9":{"id":"f9b9","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"26d3":{"id":"26d3","label":"withLatestFrom","path":"api/operators/withLatestFrom","docType":"function"},"6a43":{"id":"6a43","label":"仅当主 Observable 发送值的时候，使用每个来源发送的最后一个值","options":["26d3"]},"bc40":{"id":"bc40","label":"zip","path":"api/index/function/zip","docType":"function"},"e656":{"id":"e656","label":"每个来源中的每个值仅使用一次","options":["bc40"]},"95e3":{"id":"95e3","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["8662","6a43","e656"]},"0fd3":{"id":"0fd3","label":"我要把这个 Observable 和其它的合并，并且","options":["123d","c8e6","95e3"]},"4f4d":{"id":"4f4d","label":"我已经有一个 Observable，并且","options":["8473","01fe","53b2","6b70","d408","8b25","d86d","6782","ee1a","c3df","c486","3737","ed61","b264","5fac","30f8","df27","f8b9","9c94","7d3f","0fd3"]},"d7ac":{"id":"d7ac","label":"race","path":"api/index/function/race","docType":"function"},"9e80":{"id":"9e80","label":"我只想从首先发送值的 Observable 接收各个值","options":["d7ac"]},"1a88":{"id":"1a88","label":"forkJoin","path":"api/index/function/forkJoin","docType":"function"},"be20":{"id":"be20","label":"我想在它们全都完成时得到通知","options":["1a88"]},"7ddf":{"id":"7ddf","label":"merge","path":"api/index/function/merge","docType":"function"},"ed92":{"id":"ed92","label":"我要输出所有值，而不管是从哪一个发送的","options":["7ddf"]},"6ffc":{"id":"6ffc","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"4e1b":{"id":"4e1b","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["6ffc"]},"4aef":{"id":"4aef","label":"zip","path":"api/index/function/zip","docType":"function"},"58a6":{"id":"58a6","label":"每个来源中的每个值仅使用一次","options":["4aef"]},"3d45":{"id":"3d45","label":"concat","path":"api/index/function/concat","docType":"function"},"53f7":{"id":"53f7","label":"我已经有了由某些 Observable 组合成的单一 Observable，并且","options":["9e80","be20","ed92","2245","7306"]},"5afa":{"id":"5afa","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"create"},"d7b3":{"id":"d7b3","label":"使用自定义逻辑","options":["5afa"]},"ca58":{"id":"ca58","label":"generate","path":"api/index/function/generate","docType":"function"},"d34c":{"id":"d34c","label":"throwError","path":"api/index/function/throwError","docType":"function"},"ddbe":{"id":"ddbe","label":"抛出一个错误","options":["d34c"]},"47df":{"id":"47df","label":"EMPTY","path":"api/index/const/EMPTY","docType":"const"},"7e3d":{"id":"7e3d","label":"只完成它，而不发送任何值","options":["47df"]},"e31b":{"id":"e31b","label":"NEVER","path":"api/index/const/NEVER","docType":"const"},"736a":{"id":"736a","label":"永远不会发送任何东西","options":["e31b"]},"5ce2":{"id":"5ce2","label":"fromEvent","path":"api/index/function/fromEvent","docType":"function"},"a068":{"id":"a068","label":"来自 DOM 或 Node.js 或类似的东西","options":["5ce2"]},"258d":{"id":"258d","label":"fromEventPattern","path":"api/index/function/fromEventPattern","docType":"function"},"5fa1":{"id":"5fa1","label":"它使用某个 API 来添加或移除事件处理器","options":["258d"]},"cdb9":{"id":"cdb9","label":"从一个现有的事件源","options":["a068","5fa1"]},"e557":{"id":"e557","label":"from","path":"api/index/function/from","docType":"function"},"193f":{"id":"193f","label":"针对某个数组中的那些值","options":["e557"]},"4ad1":{"id":"4ad1","label":"range","path":"api/index/function/range","docType":"function"},"015b":{"id":"015b","label":"针对某个数字范围内的那些值","options":["4ad1"]},"cf0e":{"id":"cf0e","label":"of"},"7c04":{"id":"7c04","label":"针对通过参数给出的那些值","options":["cf0e"]},"568a":{"id":"568a","label":"它是可迭代者","options":["193f","015b","7c04"]},"0972":{"id":"0972","label":"interval","path":"api/index/function/interval","docType":"function"},"7e49":{"id":"7e49","label":"均匀的","options":["0972"]},"50a2":{"id":"50a2","label":"timer","path":"api/index/function/timer","docType":"function"},"31a3":{"id":"31a3","label":"它基于定时器发送一些值","options":["7e49","2129"]},"ac78":{"id":"ac78","label":"defer","path":"api/index/function/defer","docType":"function"},"15f9":{"id":"15f9","label":"我要创建一个新的 Observable","options":["d7b3","7554","ddbe","7e3d","736a","cdb9","4087","568a","31a3","2150"]},"0e2d":{"id":"0e2d","label":"bindCallback","path":"api/index/function/bindCallback","docType":"function"},"7aca":{"id":"7aca","label":"支持常规的回调 API","options":["0e2d"]},"0d77":{"id":"0d77","label":"bindNodeCallback","path":"api/index/function/bindNodeCallback","docType":"function"},"09ec":{"id":"09ec","label":"支持 Node.js 风格的回调 API","options":["0d77"]},"39b8":{"id":"39b8","label":"我要把某个回调函数转换为 Observable","options":["7aca","09ec"]},"initial":{"id":"initial","options":["4f4d","53f7","7248"]}}