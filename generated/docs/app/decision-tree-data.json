{"1164":{"id":"1164","label":"pipe","path":"api/index/function/pipe","docType":"function"},"2036":{"id":"2036","label":"它是可迭代者","options":["0989","6f44","274e"]},"2049":{"id":"2049","label":"均匀的","options":["4b1a"]},"2239":{"id":"2239","label":"我要延迟后再发送","options":["3b35","3d45"]},"2240":{"id":"2240","label":"一个常量值","options":["8d43"]},"2703":{"id":"2703","label":"来自 DOM 或 Node.js 或类似的东西","options":["4845"]},"3299":{"id":"3299","label":"并且当新值抵达时，取消前一个嵌套 Observable","options":["7a9a","d5b9"]},"3611":{"id":"3611","label":"并且在第一个订阅者抵达时尽快启动","options":["a706"]},"3863":{"id":"3863","label":"first","path":"api/operators/first","docType":"function"},"4226":{"id":"4226","label":"我只想从首先发送值的 Observable 接收各个值","options":["971b"]},"4257":{"id":"4257","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"4352":{"id":"4352","label":"timeInterval","path":"api/operators/timeInterval","docType":"function"},"4563":{"id":"4563","label":"并且手动或用程序启动它","options":["18f3"]},"4578":{"id":"4578","label":"基于某种标准，并且输出两个 Observable：那些符合此标准的，和不符合此标准的","options":["0db2"]},"4720":{"id":"4720","label":"merge","path":"api/index/function/merge","docType":"function"},"4845":{"id":"4845","label":"fromEvent","path":"api/index/function/fromEvent","docType":"function"},"4913":{"id":"4913","label":"并且即使当前的嵌套 Observable 尚未完结，也要忽略进来的值","options":["cb51"]},"5276":{"id":"5276","label":"我要忽略某些值","options":["299f","b27f","324f","e429","176e","d556"]},"5404":{"id":"5404","label":"并且只要第一个值","options":["3863"]},"5478":{"id":"5478","label":"ignoreElements","path":"api/operators/ignoreElements","docType":"function"},"6458":{"id":"6458","label":"skipUntil","path":"api/operators/skipUntil","docType":"function"},"6889":{"id":"6889","label":"multicast"},"6920":{"id":"6920","label":"我想在它们全都完成时得到通知","options":["9ecc"]},"7570":{"id":"7570","label":"每个来源中的每个值仅使用一次","options":["858d"]},"7628":{"id":"7628","label":"在某个非交互式间隔之后","options":["8813","4d4d"]},"7655":{"id":"7655","label":"zip","path":"api/index/function/zip","docType":"function"},"7772":{"id":"7772","label":"tap","path":"api/operators/tap","docType":"function"},"7822":{"id":"7822","label":"throttleTime","path":"api/operators/throttleTime","docType":"function"},"8021":{"id":"8021","label":"如果它们位于此 Observable 的尾部","options":["384f","64e8"]},"8118":{"id":"8118","label":"race","path":"api/index/function/race","docType":"function"},"8482":{"id":"8482","label":"我要用元数据包装它的各个消息","options":["7c94","609d"]},"8563":{"id":"8563","label":"debounceTime","path":"api/operators/debounceTime","docType":"function"},"8569":{"id":"8569","label":"我要把它发送的每个值改成","options":["2240","ca33"]},"8656":{"id":"8656","label":"并且把分好的组以数组的形式发送","options":["7ef8"]},"8813":{"id":"8813","label":"我要抛出一个错误","options":["0221"]},"9136":{"id":"9136","label":"windowToggle","path":"api/operators/windowToggle","docType":"function"},"9358":{"id":"9358","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["454e"]},"9608":{"id":"9608","label":"我要对这些值进行分组","options":["4b95","fac6","4578","5f1b","bd71","5cc0","b0b7","e9e3","b385"]},"9676":{"id":"9676","label":"我已经有了由某些 Observable 组合成的单一 Observable，并且","options":["205d","6920","92e8","94cd","2e94"]},"9946":{"id":"9946","label":"switchMap","path":"api/operators/switchMap","docType":"function"},"8d43":{"id":"8d43","label":"mapTo","path":"api/operators/mapTo","docType":"function"},"bc9a":{"id":"bc9a","label":"map","path":"api/operators/map","docType":"function"},"ca33":{"id":"ca33","label":"一个通过公式算出来的值","options":["bc9a"]},"08f9":{"id":"08f9","label":"pluck"},"dc05":{"id":"dc05","label":"我要从它发送的每个值中取出一个属性","options":["08f9"]},"eab4":{"id":"eab4","label":"我要监听即将发送的值，但不想影响它们","options":["7772"]},"f795":{"id":"f795","label":"filter","path":"api/operators/filter","docType":"function"},"0832":{"id":"0832","label":"基于自定义逻辑","options":["f795"]},"918e":{"id":"918e","label":"take","path":"api/operators/take","docType":"function"},"b2da":{"id":"b2da","label":"基于给定的数量","options":["918e"]},"b4cc":{"id":"b4cc","label":"takeWhile","path":"api/operators/takeWhile","docType":"function"},"cbbd":{"id":"cbbd","label":"基于自定义逻辑","options":["b4cc"]},"383c":{"id":"383c","label":"如果它们位于此 Observable 的首部","options":["5404","b2da","cbbd"]},"f3b8":{"id":"f3b8","label":"elementAt","path":"api/operators/elementAt","docType":"function"},"2d2a":{"id":"2d2a","label":"如果它们精确的处于第 n 位","options":["f3b8"]},"5e92":{"id":"5e92","label":"last","path":"api/operators/last","docType":"function"},"384f":{"id":"384f","label":"并且只要最后一个值","options":["5e92"]},"4c9d":{"id":"4c9d","label":"takeLast","path":"api/operators/takeLast","docType":"function"},"64e8":{"id":"64e8","label":"基于给定的数量","options":["4c9d"]},"be23":{"id":"be23","label":"takeUntil","path":"api/operators/takeUntil","docType":"function"},"15c2":{"id":"15c2","label":"直到另一个 Observable 发送了值","options":["be23"]},"0abe":{"id":"0abe","label":"我要只允许部分值通过","options":["0832","383c","2d2a","8021","15c2"]},"299f":{"id":"299f","label":"全部","options":["5478"]},"db16":{"id":"db16","label":"skip","path":"api/operators/skip","docType":"function"},"89df":{"id":"89df","label":"基于给定的数量","options":["db16"]},"811d":{"id":"811d","label":"skipWhile","path":"api/operators/skipWhile","docType":"function"},"88a3":{"id":"88a3","label":"基于自定义逻辑","options":["811d"]},"b27f":{"id":"b27f","label":"从此 Observable 的首部","options":["89df","88a3"]},"5b50":{"id":"5b50","label":"skipLast","path":"api/operators/skipLast","docType":"function"},"324f":{"id":"324f","label":"从此 Observable 的尾部","options":["5b50"]},"e429":{"id":"e429","label":"直到另一个 Observable 发送了值","options":["6458"]},"cb3d":{"id":"cb3d","label":"distinctUntilChanged","path":"api/operators/distinctUntilChanged","docType":"function"},"f540":{"id":"f540","label":"发送恰好在当前值前面的那个","options":["cb3d"]},"44b1":{"id":"44b1","label":"distinct","path":"api/operators/distinct","docType":"function"},"f71c":{"id":"f71c","label":"以前任何时候曾发送过","options":["44b1"]},"9ddc":{"id":"9ddc","label":"根据值是否相等","options":["f540","f71c"]},"dc7b":{"id":"dc7b","label":"distinctUntilKeyChanged","path":"api/operators/distinctUntilKeyChanged","docType":"function"},"0a88":{"id":"0a88","label":"发送恰好在当前值前面的那个","options":["dc7b"]},"dabc":{"id":"dabc","label":"根据一个某个键或对象属性","options":["0a88"]},"176e":{"id":"176e","label":"与某些以前发送的值匹配","options":["9ddc","dabc"]},"afbe":{"id":"afbe","label":"throttle","path":"api/operators/throttle","docType":"function"},"2b62":{"id":"2b62","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["afbe"]},"0723":{"id":"0723","label":"这个时间窗口是根据某个时长来决定的","options":["7822"]},"6a71":{"id":"6a71","label":"发送每个时间窗口中的第一个值","options":["2b62","0723"]},"9c5d":{"id":"9c5d","label":"audit","path":"api/operators/audit","docType":"function"},"b917":{"id":"b917","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["9c5d"]},"334e":{"id":"334e","label":"auditTime","path":"api/operators/auditTime","docType":"function"},"90ab":{"id":"90ab","label":"这个时间窗口是根据某个时长来决定的","options":["334e"]},"0146":{"id":"0146","label":"发送每个时间窗口中的最后一个值","options":["b917","90ab"]},"6ad0":{"id":"6ad0","label":"debounce","path":"api/operators/debounce","docType":"function"},"c69f":{"id":"c69f","label":"此平静的间隔阈值由另一个 Observable 决定","options":["6ad0"]},"09c2":{"id":"09c2","label":"此平静的间隔阈值是根据某个时长决定的","options":["8563"]},"b49a":{"id":"b49a","label":"等足够平静时就发送最后一个值","options":["c69f","09c2"]},"d556":{"id":"d556","label":"发生的过于频繁","options":["6a71","0146","b49a"]},"d999":{"id":"d999","label":"reduce","path":"api/operators/reduce","docType":"function"},"bf9f":{"id":"bf9f","label":"并且只输出最终计算出的值","options":["d999"]},"b66a":{"id":"b66a","label":"scan","path":"api/operators/scan","docType":"function"},"f1e6":{"id":"f1e6","label":"并且每当来源发送某个值时就输出计算好的值","options":["b66a"]},"877a":{"id":"877a","label":"mergeScan","path":"api/operators/mergeScan","docType":"function"},"b482":{"id":"b482","label":"并且当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable","options":["877a"]},"e058":{"id":"e058","label":"switchScan","path":"api/operators/switchScan","docType":"function"},"627c":{"id":"627c","label":"并且每当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable，同时取消对前一个嵌套 Observable 的订阅","options":["e058"]},"f227":{"id":"f227","label":"我要使用已发送的所有值做某种计算","options":["bf9f","f1e6","b482","627c"]},"8fff":{"id":"8fff","label":"materialize","path":"api/operators/materialize","docType":"function"},"7c94":{"id":"7c94","label":"此元数据描述每个通知（next、error 或 complete）","options":["8fff"]},"609d":{"id":"609d","label":"次元数据包含从最后一次发送值开始已过去时间","options":["4352"]},"0221":{"id":"0221","label":"timeout","path":"api/operators/timeout","docType":"function"},"f9f4":{"id":"f9f4","label":"timeoutWith","path":"api/operators/timeoutWith","docType":"function"},"4d4d":{"id":"4d4d","label":"我要切换到另一个 Observable","options":["f9f4"]},"e324":{"id":"e324","label":"single","path":"api/operators/single","docType":"function"},"d706":{"id":"d706","label":"我要确保只有一个值","options":["e324"]},"0c5b":{"id":"0c5b","label":"count","path":"api/operators/count","docType":"function"},"bc20":{"id":"bc20","label":"我要知道它发送了多少个值","options":["0c5b"]},"d8eb":{"id":"d8eb","label":"startWith"},"ab8c":{"id":"ab8c","label":"我要在开头放一个值","options":["d8eb"]},"e209":{"id":"e209","label":"delay","path":"api/operators/delay","docType":"function"},"3b35":{"id":"3b35","label":"基于给定的时间","options":["e209"]},"b181":{"id":"b181","label":"delayWhen","path":"api/operators/delayWhen","docType":"function"},"3d45":{"id":"3d45","label":"基于另一个 Observable 的发送情况","options":["b181"]},"dcc9":{"id":"dcc9","label":"toArray","path":"api/operators/toArray","docType":"function"},"5b33":{"id":"5b33","label":"并转换为数组","options":["dcc9"]},"70fe":{"id":"70fe","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"toPromise"},"f425":{"id":"f425","label":"并且转换为 Promise","options":["70fe"]},"4b95":{"id":"4b95","label":"直到此 Observable 完成","options":["5b33","f425"]},"0d8c":{"id":"0d8c","label":"pairwise","path":"api/operators/pairwise","docType":"function"},"fac6":{"id":"fac6","label":"连续配对，作为数组","options":["0d8c"]},"0db2":{"id":"0db2","label":"partition","path":"api/index/function/partition","docType":"function"},"46a5":{"id":"46a5","label":"bufferCount","path":"api/operators/bufferCount","docType":"function"},"f63f":{"id":"f63f","label":"并且把分好的组以数组形式发送","options":["46a5"]},"62ca":{"id":"62ca","label":"windowCount","path":"api/operators/windowCount","docType":"function"},"415b":{"id":"415b","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["62ca"]},"5f1b":{"id":"5f1b","label":"根据特定大小的批次","options":["f63f","415b"]},"db02":{"id":"db02","label":"bufferTime","path":"api/operators/bufferTime","docType":"function"},"dce1":{"id":"dce1","label":"并且把分好的组以数组的形式发送","options":["db02"]},"6b82":{"id":"6b82","label":"windowTime","path":"api/operators/windowTime","docType":"function"},"0f08":{"id":"0f08","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["6b82"]},"bd71":{"id":"bd71","label":"基于时间","options":["dce1","0f08"]},"2ca6":{"id":"2ca6","label":"buffer","path":"api/operators/buffer","docType":"function"},"ba66":{"id":"ba66","label":"并且把分好的组以数组的形式发送","options":["2ca6"]},"454e":{"id":"454e","label":"window","path":"api/operators/window","docType":"function"},"5cc0":{"id":"5cc0","label":"直到另一个 Observable 发送了值","options":["ba66","9358"]},"7ef8":{"id":"7ef8","label":"bufferWhen","path":"api/operators/bufferWhen","docType":"function"},"9e29":{"id":"9e29","label":"windowWhen","path":"api/operators/windowWhen","docType":"function"},"e5f5":{"id":"e5f5","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["9e29"]},"b0b7":{"id":"b0b7","label":"基于某个按需创建的 Observable 的发送情况","options":["8656","e5f5"]},"49bc":{"id":"49bc","label":"bufferToggle","path":"api/operators/bufferToggle","docType":"function"},"14ae":{"id":"14ae","label":"并且把分好的组以数组的形式发送","options":["49bc"]},"ee1d":{"id":"ee1d","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["9136"]},"e9e3":{"id":"e9e3","label":"基于另一个 Observable 开始一组，并基于第三个 Observable 结束这一组","options":["14ae","ee1d"]},"46a3":{"id":"46a3","label":"groupBy","path":"api/operators/groupBy","docType":"function"},"b385":{"id":"b385","label":"基于根据已发送的值计算出的一个键","options":["46a3"]},"4a18":{"id":"4a18","label":"mergeMapTo","path":"api/operators/mergeMapTo","docType":"function"},"18e9":{"id":"18e9","label":"这里的嵌套 Observable 对每个值都是一样的","options":["4a18"]},"9ed4":{"id":"9ed4","label":"mergeMap","path":"api/operators/mergeMap","docType":"function"},"2c5b":{"id":"2c5b","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["9ed4"]},"911c":{"id":"911c","label":"并且并行发送全部嵌套 Observable 所发送的值","options":["18e9","2c5b"]},"60b9":{"id":"60b9","label":"concatMapTo","path":"api/operators/concatMapTo","docType":"function"},"aff1":{"id":"aff1","label":"这里的嵌套 Observable 对每个值都是一样的","options":["60b9"]},"6ec8":{"id":"6ec8","label":"concatMap","path":"api/operators/concatMap","docType":"function"},"7dd8":{"id":"7dd8","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["6ec8"]},"d66b":{"id":"d66b","label":"并且依次发送每个嵌套 Observable 所发送的值","options":["aff1","7dd8"]},"711b":{"id":"711b","label":"switchMapTo","path":"api/operators/switchMapTo","docType":"function"},"7a9a":{"id":"7a9a","label":"这里的嵌套 Observable 对每个值都是一样的","options":["711b"]},"d5b9":{"id":"d5b9","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["9946"]},"cb51":{"id":"cb51","label":"exhaustMap","path":"api/operators/exhaustMap","docType":"function"},"28e4":{"id":"28e4","label":"expand","path":"api/operators/expand","docType":"function"},"c56c":{"id":"c56c","label":"并且对每一个新值递归启动一个新的 Observable","options":["28e4"]},"621a":{"id":"621a","label":"我要为每个值开始一个新的 Observable","options":["911c","d66b","3299","4913","c56c"]},"2b75":{"id":"2b75","label":"我要执行自定义操作","options":["1164"]},"a706":{"id":"a706","label":"share","path":"api/operators/share","docType":"function"},"18f3":{"id":"18f3","label":"publish"},"cfd3":{"id":"cfd3","label":"使用常规 Subject","options":["3611","4563"]},"777e":{"id":"777e","label":"publishBehavior"},"11b6":{"id":"11b6","label":"使用 BehaviorSubject","options":["777e"]},"344a":{"id":"344a","label":"publishReplay"},"adc9":{"id":"adc9","label":"使用 ReplaySubject","options":["344a"]},"9a32":{"id":"9a32","label":"publishLast"},"636e":{"id":"636e","label":"使用 AsyncSubject","options":["9a32"]},"dea2":{"id":"dea2","label":"使用某种特殊的 Subject 实现","options":["6889"]},"0b95":{"id":"0b95","label":"我要在多个订阅者之间共享某个订阅","options":["cfd3","11b6","adc9","636e","dea2"]},"3e77":{"id":"3e77","label":"catchError","path":"api/operators/catchError","docType":"function"},"7cdf":{"id":"7cdf","label":"我要启动一个新的 Observable","options":["3e77"]},"e79a":{"id":"e79a","label":"retry","path":"api/operators/retry","docType":"function"},"fdae":{"id":"fdae","label":"立即","options":["e79a"]},"bb8d":{"id":"bb8d","label":"retryWhen","path":"api/operators/retryWhen","docType":"function"},"f2c7":{"id":"f2c7","label":"当另一个 Observable 发送值的时候","options":["bb8d"]},"0f66":{"id":"0f66","label":"我要重新订阅","options":["fdae","f2c7"]},"8c52":{"id":"8c52","label":"当发生错误时","options":["7cdf","0f66"]},"98c6":{"id":"98c6","label":"repeat","path":"api/operators/repeat","docType":"function"},"c6d8":{"id":"c6d8","label":"立即","options":["98c6"]},"d9d2":{"id":"d9d2","label":"repeatWhen","path":"api/operators/repeatWhen","docType":"function"},"ecbc":{"id":"ecbc","label":"当另一个 Observable 发送值的时候","options":["d9d2"]},"89aa":{"id":"89aa","label":"我要重新订阅","options":["c6d8","ecbc"]},"2c05":{"id":"2c05","label":"concat","path":"api/index/function/concat","docType":"function"},"bc2c":{"id":"bc2c","label":"我要启动一个新的 Observable","options":["2c05"]},"6d5f":{"id":"6d5f","label":"当它完成时","options":["89aa","bc2c"]},"9cb0":{"id":"9cb0","label":"finalize","path":"api/operators/finalize","docType":"function"},"0ef2":{"id":"0ef2","label":"当它完成、出错或退订时，我要执行某个函数","options":["9cb0"]},"11cb":{"id":"11cb","label":"subscribeOn","path":"api/operators/subscribeOn","docType":"function"},"221b":{"id":"221b","label":"它会修改从调用到订阅之间的路由","options":["11cb"]},"a70f":{"id":"a70f","label":"observeOn","path":"api/operators/observeOn","docType":"function"},"82c4":{"id":"82c4","label":"它会修改从发送值到 Observer 之间的路由","options":["a70f"]},"c442":{"id":"c442","label":"我要更改调度器（Scheduler）","options":["221b","82c4"]},"971b":{"id":"971b","label":"race","path":"api/index/function/race","docType":"function"},"d202":{"id":"d202","label":"我要输出所有值，而不管是从哪一个发送的","options":["4720"]},"62a4":{"id":"62a4","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"bc5b":{"id":"bc5b","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["62a4"]},"71c9":{"id":"71c9","label":"withLatestFrom","path":"api/operators/withLatestFrom","docType":"function"},"25a7":{"id":"25a7","label":"仅当主 Observable 发送值的时候，使用每个来源发送的最后一个值","options":["71c9"]},"52d4":{"id":"52d4","label":"每个来源中的每个值仅使用一次","options":["7655"]},"16a5":{"id":"16a5","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["bc5b","25a7","52d4"]},"96d7":{"id":"96d7","label":"我要把这个 Observable 和其它的合并，并且","options":["4226","d202","16a5"]},"53c9":{"id":"53c9","label":"我已经有一个 Observable，并且","options":["8569","dc05","eab4","0abe","5276","f227","8482","7628","d706","bc20","ab8c","2239","9608","621a","2b75","0b95","8c52","6d5f","0ef2","c442","96d7"]},"205d":{"id":"205d","label":"我只想从首先发送值的 Observable 接收各个值","options":["8118"]},"9ecc":{"id":"9ecc","label":"forkJoin","path":"api/index/function/forkJoin","docType":"function"},"56c7":{"id":"56c7","label":"merge","path":"api/index/function/merge","docType":"function"},"92e8":{"id":"92e8","label":"我要输出所有值，而不管是从哪一个发送的","options":["56c7"]},"bca1":{"id":"bca1","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["4257"]},"858d":{"id":"858d","label":"zip","path":"api/index/function/zip","docType":"function"},"94cd":{"id":"94cd","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["bca1","7570"]},"09b1":{"id":"09b1","label":"concat","path":"api/index/function/concat","docType":"function"},"2e94":{"id":"2e94","label":"我要依次订阅它们","options":["09b1"]},"0a6a":{"id":"0a6a","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"create"},"316b":{"id":"316b","label":"使用自定义逻辑","options":["0a6a"]},"bf35":{"id":"bf35","label":"generate","path":"api/index/function/generate","docType":"function"},"3d27":{"id":"3d27","label":"使用一个类似于 for 循环的状态机","options":["bf35"]},"b6d1":{"id":"b6d1","label":"throwError","path":"api/index/function/throwError","docType":"function"},"a1d9":{"id":"a1d9","label":"抛出一个错误","options":["b6d1"]},"5a54":{"id":"5a54","label":"EMPTY","path":"api/index/const/EMPTY","docType":"const"},"a4f9":{"id":"a4f9","label":"只完成它，而不发送任何值","options":["5a54"]},"084f":{"id":"084f","label":"NEVER","path":"api/index/const/NEVER","docType":"const"},"c070":{"id":"c070","label":"永远不会发送任何东西","options":["084f"]},"39f5":{"id":"39f5","label":"fromEventPattern","path":"api/index/function/fromEventPattern","docType":"function"},"6f55":{"id":"6f55","label":"它使用某个 API 来添加或移除事件处理器","options":["39f5"]},"546b":{"id":"546b","label":"从一个现有的事件源","options":["2703","6f55"]},"c955":{"id":"c955","label":"from","path":"api/index/function/from","docType":"function"},"9c1c":{"id":"9c1c","label":"来自某个 Promise 或事件源","options":["c955"]},"2e6a":{"id":"2e6a","label":"from","path":"api/index/function/from","docType":"function"},"0989":{"id":"0989","label":"针对某个数组中的那些值","options":["2e6a"]},"cb9d":{"id":"cb9d","label":"range","path":"api/index/function/range","docType":"function"},"6f44":{"id":"6f44","label":"针对某个数字范围内的那些值","options":["cb9d"]},"c58a":{"id":"c58a","label":"of"},"274e":{"id":"274e","label":"针对通过参数给出的那些值","options":["c58a"]},"4b1a":{"id":"4b1a","label":"interval","path":"api/index/function/interval","docType":"function"},"aff5":{"id":"aff5","label":"timer","path":"api/index/function/timer","docType":"function"},"d3a2":{"id":"d3a2","label":"带有一个可选的首次延迟","options":["aff5"]},"d780":{"id":"d780","label":"它基于定时器发送一些值","options":["2049","d3a2"]},"eb9e":{"id":"eb9e","label":"defer","path":"api/index/function/defer","docType":"function"},"e52a":{"id":"e52a","label":"它在被订阅时才按需创建","options":["eb9e"]},"c326":{"id":"c326","label":"我要创建一个新的 Observable","options":["316b","3d27","a1d9","a4f9","c070","546b","9c1c","2036","d780","e52a"]},"911e":{"id":"911e","label":"bindCallback","path":"api/index/function/bindCallback","docType":"function"},"4a0c":{"id":"4a0c","label":"支持常规的回调 API","options":["911e"]},"ad00":{"id":"ad00","label":"bindNodeCallback","path":"api/index/function/bindNodeCallback","docType":"function"},"06a1":{"id":"06a1","label":"支持 Node.js 风格的回调 API","options":["ad00"]},"dc1e":{"id":"dc1e","label":"我要把某个回调函数转换为 Observable","options":["4a0c","06a1"]},"0992":{"id":"0992","label":"我还没有任何 Observable，并且","options":["c326","dc1e"]},"initial":{"id":"initial","options":["53c9","9676","0992"]}}