{"1021":{"id":"1021","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["8b75"]},"1610":{"id":"1610","label":"并且把分好的组以数组形式发送","options":["f5a6"]},"1644":{"id":"1644","label":"从此 Observable 的首部","options":["cd7d","1fb7"]},"1725":{"id":"1725","label":"repeatWhen","path":"api/operators/repeatWhen","docType":"function"},"2010":{"id":"2010","label":"reduce","path":"api/operators/reduce","docType":"function"},"2708":{"id":"2708","label":"这个时间窗口是根据某个时长来决定的","options":["7199"]},"3328":{"id":"3328","label":"直到另一个 Observable 发送了值","options":["487a","dc6e"]},"3516":{"id":"3516","label":"bufferToggle","path":"api/operators/bufferToggle","docType":"function"},"4267":{"id":"4267","label":"发送恰好在当前值前面的那个","options":["10a5"]},"4449":{"id":"4449","label":"我只想从首先发送值的 Observable 接收各个值","options":["0066"]},"4584":{"id":"4584","label":"我要延迟后再发送","options":["6ab5","f088"]},"4663":{"id":"4663","label":"partition","path":"api/index/function/partition","docType":"function"},"4703":{"id":"4703","label":"map","path":"api/operators/map","docType":"function"},"4752":{"id":"4752","label":"我要在多个订阅者之间共享某个订阅","options":["0dd7","14cc","da3d","38de","9bc2"]},"4921":{"id":"4921","label":"zip","path":"api/index/function/zip","docType":"function"},"5066":{"id":"5066","label":"并且手动或用程序启动它","options":["69a0"]},"5293":{"id":"5293","label":"这里的嵌套 Observable 对每个值都是一样的","options":["0a89"]},"5444":{"id":"5444","label":"并且把分好的组以数组的形式发送","options":["b551"]},"5599":{"id":"5599","label":"直到另一个 Observable 发送了值","options":["cd9b"]},"5936":{"id":"5936","label":"pairwise","path":"api/operators/pairwise","docType":"function"},"5992":{"id":"5992","label":"pipe","path":"api/index/function/pipe","docType":"function"},"6101":{"id":"6101","label":"windowTime","path":"api/operators/windowTime","docType":"function"},"6114":{"id":"6114","label":"concat","path":"api/index/function/concat","docType":"function"},"6205":{"id":"6205","label":"filter","path":"api/operators/filter","docType":"function"},"6316":{"id":"6316","label":"发生的过于频繁","options":["f719","ab24","80d9"]},"6445":{"id":"6445","label":"share","path":"api/operators/share","docType":"function"},"6649":{"id":"6649","label":"timer","path":"api/index/function/timer","docType":"function"},"6720":{"id":"6720","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"toPromise"},"6761":{"id":"6761","label":"在某个非交互式间隔之后","options":["9a1b","c391"]},"7199":{"id":"7199","label":"auditTime","path":"api/operators/auditTime","docType":"function"},"7451":{"id":"7451","label":"repeat","path":"api/operators/repeat","docType":"function"},"7555":{"id":"7555","label":"从此 Observable 的尾部","options":["49a6"]},"7815":{"id":"7815","label":"立即","options":["7451"]},"8079":{"id":"8079","label":"我要创建一个新的 Observable","options":["44ee","d1e0","ecb6","3ed9","fc52","e497","a674","8994","64e9","0e6f"]},"8329":{"id":"8329","label":"zip","path":"api/index/function/zip","docType":"function"},"8775":{"id":"8775","label":"此平静的间隔阈值由另一个 Observable 决定","options":["14d2"]},"8994":{"id":"8994","label":"它是可迭代者","options":["9a8b","9a28","a294"]},"9308":{"id":"9308","label":"并且对每一个新值递归启动一个新的 Observable","options":["254e"]},"9486":{"id":"9486","label":"我要输出所有值，而不管是从哪一个发送的","options":["8d6b"]},"9673":{"id":"9673","label":"takeWhile","path":"api/operators/takeWhile","docType":"function"},"9750":{"id":"9750","label":"以前任何时候曾发送过","options":["cc75"]},"8d0a":{"id":"8d0a","label":"mapTo","path":"api/operators/mapTo","docType":"function"},"a9a4":{"id":"a9a4","label":"一个常量值","options":["8d0a"]},"057b":{"id":"057b","label":"一个通过公式算出来的值","options":["4703"]},"7ccb":{"id":"7ccb","label":"我要把它发送的每个值改成","options":["a9a4","057b"]},"b6c0":{"id":"b6c0","label":"pluck"},"4dff":{"id":"4dff","label":"我要从它发送的每个值中取出一个属性","options":["b6c0"]},"74dd":{"id":"74dd","label":"tap","path":"api/operators/tap","docType":"function"},"3d22":{"id":"3d22","label":"我要监听即将发送的值，但不想影响它们","options":["74dd"]},"35c5":{"id":"35c5","label":"基于自定义逻辑","options":["6205"]},"4d81":{"id":"4d81","label":"first","path":"api/operators/first","docType":"function"},"d6fc":{"id":"d6fc","label":"并且只要第一个值","options":["4d81"]},"f868":{"id":"f868","label":"take","path":"api/operators/take","docType":"function"},"be8b":{"id":"be8b","label":"基于给定的数量","options":["f868"]},"419e":{"id":"419e","label":"基于自定义逻辑","options":["9673"]},"ff25":{"id":"ff25","label":"如果它们位于此 Observable 的首部","options":["d6fc","be8b","419e"]},"dd2e":{"id":"dd2e","label":"elementAt","path":"api/operators/elementAt","docType":"function"},"e8b9":{"id":"e8b9","label":"如果它们精确的处于第 n 位","options":["dd2e"]},"ebee":{"id":"ebee","label":"last","path":"api/operators/last","docType":"function"},"c611":{"id":"c611","label":"并且只要最后一个值","options":["ebee"]},"7c98":{"id":"7c98","label":"takeLast","path":"api/operators/takeLast","docType":"function"},"8f94":{"id":"8f94","label":"基于给定的数量","options":["7c98"]},"40d1":{"id":"40d1","label":"如果它们位于此 Observable 的尾部","options":["c611","8f94"]},"cd9b":{"id":"cd9b","label":"takeUntil","path":"api/operators/takeUntil","docType":"function"},"bf3f":{"id":"bf3f","label":"我要只允许部分值通过","options":["35c5","ff25","e8b9","40d1","5599"]},"d260":{"id":"d260","label":"ignoreElements","path":"api/operators/ignoreElements","docType":"function"},"092f":{"id":"092f","label":"全部","options":["d260"]},"9ad3":{"id":"9ad3","label":"skip","path":"api/operators/skip","docType":"function"},"cd7d":{"id":"cd7d","label":"基于给定的数量","options":["9ad3"]},"7b64":{"id":"7b64","label":"skipWhile","path":"api/operators/skipWhile","docType":"function"},"1fb7":{"id":"1fb7","label":"基于自定义逻辑","options":["7b64"]},"49a6":{"id":"49a6","label":"skipLast","path":"api/operators/skipLast","docType":"function"},"8b95":{"id":"8b95","label":"skipUntil","path":"api/operators/skipUntil","docType":"function"},"6a65":{"id":"6a65","label":"直到另一个 Observable 发送了值","options":["8b95"]},"4b27":{"id":"4b27","label":"distinctUntilChanged","path":"api/operators/distinctUntilChanged","docType":"function"},"22a7":{"id":"22a7","label":"发送恰好在当前值前面的那个","options":["4b27"]},"cc75":{"id":"cc75","label":"distinct","path":"api/operators/distinct","docType":"function"},"c714":{"id":"c714","label":"根据值是否相等","options":["22a7","9750"]},"10a5":{"id":"10a5","label":"distinctUntilKeyChanged","path":"api/operators/distinctUntilKeyChanged","docType":"function"},"c9a7":{"id":"c9a7","label":"根据一个某个键或对象属性","options":["4267"]},"504c":{"id":"504c","label":"与某些以前发送的值匹配","options":["c714","c9a7"]},"67b8":{"id":"67b8","label":"throttle","path":"api/operators/throttle","docType":"function"},"164b":{"id":"164b","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["67b8"]},"093b":{"id":"093b","label":"throttleTime","path":"api/operators/throttleTime","docType":"function"},"58fe":{"id":"58fe","label":"这个时间窗口是根据某个时长来决定的","options":["093b"]},"f719":{"id":"f719","label":"发送每个时间窗口中的第一个值","options":["164b","58fe"]},"1a15":{"id":"1a15","label":"audit","path":"api/operators/audit","docType":"function"},"30d6":{"id":"30d6","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["1a15"]},"ab24":{"id":"ab24","label":"发送每个时间窗口中的最后一个值","options":["30d6","2708"]},"14d2":{"id":"14d2","label":"debounce","path":"api/operators/debounce","docType":"function"},"af7f":{"id":"af7f","label":"debounceTime","path":"api/operators/debounceTime","docType":"function"},"7bbf":{"id":"7bbf","label":"此平静的间隔阈值是根据某个时长决定的","options":["af7f"]},"80d9":{"id":"80d9","label":"等足够平静时就发送最后一个值","options":["8775","7bbf"]},"8ed7":{"id":"8ed7","label":"我要忽略某些值","options":["092f","1644","7555","6a65","504c","6316"]},"7ca2":{"id":"7ca2","label":"并且只输出最终计算出的值","options":["2010"]},"9bbc":{"id":"9bbc","label":"scan","path":"api/operators/scan","docType":"function"},"1c87":{"id":"1c87","label":"并且每当来源发送某个值时就输出计算好的值","options":["9bbc"]},"5d26":{"id":"5d26","label":"mergeScan","path":"api/operators/mergeScan","docType":"function"},"64d7":{"id":"64d7","label":"并且当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable","options":["5d26"]},"279f":{"id":"279f","label":"switchScan","path":"api/operators/switchScan","docType":"function"},"5bc1":{"id":"5bc1","label":"并且每当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable，同时取消对前一个嵌套 Observable 的订阅","options":["279f"]},"f39d":{"id":"f39d","label":"我要使用已发送的所有值做某种计算","options":["7ca2","1c87","64d7","5bc1"]},"7ae5":{"id":"7ae5","label":"materialize","path":"api/operators/materialize","docType":"function"},"c020":{"id":"c020","label":"此元数据描述每个通知（next、error 或 complete）","options":["7ae5"]},"5a1c":{"id":"5a1c","label":"timeInterval","path":"api/operators/timeInterval","docType":"function"},"50a8":{"id":"50a8","label":"次元数据包含从最后一次发送值开始已过去时间","options":["5a1c"]},"1d95":{"id":"1d95","label":"我要用元数据包装它的各个消息","options":["c020","50a8"]},"9d4a":{"id":"9d4a","label":"timeout","path":"api/operators/timeout","docType":"function"},"9a1b":{"id":"9a1b","label":"我要抛出一个错误","options":["9d4a"]},"5eea":{"id":"5eea","label":"timeoutWith","path":"api/operators/timeoutWith","docType":"function"},"c391":{"id":"c391","label":"我要切换到另一个 Observable","options":["5eea"]},"fa86":{"id":"fa86","label":"single","path":"api/operators/single","docType":"function"},"f8c5":{"id":"f8c5","label":"我要确保只有一个值","options":["fa86"]},"288c":{"id":"288c","label":"count","path":"api/operators/count","docType":"function"},"7b7f":{"id":"7b7f","label":"我要知道它发送了多少个值","options":["288c"]},"eb5e":{"id":"eb5e","label":"startWith"},"be0a":{"id":"be0a","label":"我要在开头放一个值","options":["eb5e"]},"e4ca":{"id":"e4ca","label":"delay","path":"api/operators/delay","docType":"function"},"6ab5":{"id":"6ab5","label":"基于给定的时间","options":["e4ca"]},"25fe":{"id":"25fe","label":"delayWhen","path":"api/operators/delayWhen","docType":"function"},"f088":{"id":"f088","label":"基于另一个 Observable 的发送情况","options":["25fe"]},"658e":{"id":"658e","label":"toArray","path":"api/operators/toArray","docType":"function"},"ddc6":{"id":"ddc6","label":"并转换为数组","options":["658e"]},"ca97":{"id":"ca97","label":"并且转换为 Promise","options":["6720"]},"8cb6":{"id":"8cb6","label":"直到此 Observable 完成","options":["ddc6","ca97"]},"845f":{"id":"845f","label":"连续配对，作为数组","options":["5936"]},"9ce0":{"id":"9ce0","label":"基于某种标准，并且输出两个 Observable：那些符合此标准的，和不符合此标准的","options":["4663"]},"f5a6":{"id":"f5a6","label":"bufferCount","path":"api/operators/bufferCount","docType":"function"},"b390":{"id":"b390","label":"windowCount","path":"api/operators/windowCount","docType":"function"},"45f4":{"id":"45f4","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["b390"]},"53c3":{"id":"53c3","label":"根据特定大小的批次","options":["1610","45f4"]},"fc00":{"id":"fc00","label":"bufferTime","path":"api/operators/bufferTime","docType":"function"},"3faf":{"id":"3faf","label":"并且把分好的组以数组的形式发送","options":["fc00"]},"fdb1":{"id":"fdb1","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["6101"]},"507a":{"id":"507a","label":"基于时间","options":["3faf","fdb1"]},"8edb":{"id":"8edb","label":"buffer","path":"api/operators/buffer","docType":"function"},"487a":{"id":"487a","label":"并且把分好的组以数组的形式发送","options":["8edb"]},"49f8":{"id":"49f8","label":"window","path":"api/operators/window","docType":"function"},"dc6e":{"id":"dc6e","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["49f8"]},"b551":{"id":"b551","label":"bufferWhen","path":"api/operators/bufferWhen","docType":"function"},"611e":{"id":"611e","label":"windowWhen","path":"api/operators/windowWhen","docType":"function"},"7bd2":{"id":"7bd2","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["611e"]},"c041":{"id":"c041","label":"基于某个按需创建的 Observable 的发送情况","options":["5444","7bd2"]},"d317":{"id":"d317","label":"并且把分好的组以数组的形式发送","options":["3516"]},"ce38":{"id":"ce38","label":"windowToggle","path":"api/operators/windowToggle","docType":"function"},"a167":{"id":"a167","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["ce38"]},"0ed7":{"id":"0ed7","label":"基于另一个 Observable 开始一组，并基于第三个 Observable 结束这一组","options":["d317","a167"]},"80b5":{"id":"80b5","label":"groupBy","path":"api/operators/groupBy","docType":"function"},"253b":{"id":"253b","label":"基于根据已发送的值计算出的一个键","options":["80b5"]},"cba9":{"id":"cba9","label":"我要对这些值进行分组","options":["8cb6","845f","9ce0","53c3","507a","3328","c041","0ed7","253b"]},"bd6f":{"id":"bd6f","label":"mergeMapTo","path":"api/operators/mergeMapTo","docType":"function"},"d46b":{"id":"d46b","label":"这里的嵌套 Observable 对每个值都是一样的","options":["bd6f"]},"6d49":{"id":"6d49","label":"mergeMap","path":"api/operators/mergeMap","docType":"function"},"a9da":{"id":"a9da","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["6d49"]},"c02c":{"id":"c02c","label":"并且并行发送全部嵌套 Observable 所发送的值","options":["d46b","a9da"]},"9e4c":{"id":"9e4c","label":"concatMapTo","path":"api/operators/concatMapTo","docType":"function"},"7c46":{"id":"7c46","label":"这里的嵌套 Observable 对每个值都是一样的","options":["9e4c"]},"1da5":{"id":"1da5","label":"concatMap","path":"api/operators/concatMap","docType":"function"},"7ddd":{"id":"7ddd","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["1da5"]},"e0b2":{"id":"e0b2","label":"并且依次发送每个嵌套 Observable 所发送的值","options":["7c46","7ddd"]},"0a89":{"id":"0a89","label":"switchMapTo","path":"api/operators/switchMapTo","docType":"function"},"d0f4":{"id":"d0f4","label":"switchMap","path":"api/operators/switchMap","docType":"function"},"29a6":{"id":"29a6","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["d0f4"]},"b11e":{"id":"b11e","label":"并且当新值抵达时，取消前一个嵌套 Observable","options":["5293","29a6"]},"fb6f":{"id":"fb6f","label":"exhaustMap","path":"api/operators/exhaustMap","docType":"function"},"1cd2":{"id":"1cd2","label":"并且即使当前的嵌套 Observable 尚未完结，也要忽略进来的值","options":["fb6f"]},"254e":{"id":"254e","label":"expand","path":"api/operators/expand","docType":"function"},"c9d6":{"id":"c9d6","label":"我要为每个值开始一个新的 Observable","options":["c02c","e0b2","b11e","1cd2","9308"]},"08a8":{"id":"08a8","label":"我要执行自定义操作","options":["5992"]},"b185":{"id":"b185","label":"并且在第一个订阅者抵达时尽快启动","options":["6445"]},"69a0":{"id":"69a0","label":"publish"},"0dd7":{"id":"0dd7","label":"使用常规 Subject","options":["b185","5066"]},"81ad":{"id":"81ad","label":"publishBehavior"},"14cc":{"id":"14cc","label":"使用 BehaviorSubject","options":["81ad"]},"58e9":{"id":"58e9","label":"publishReplay"},"da3d":{"id":"da3d","label":"使用 ReplaySubject","options":["58e9"]},"2d8f":{"id":"2d8f","label":"publishLast"},"38de":{"id":"38de","label":"使用 AsyncSubject","options":["2d8f"]},"0b6f":{"id":"0b6f","label":"multicast"},"9bc2":{"id":"9bc2","label":"使用某种特殊的 Subject 实现","options":["0b6f"]},"adee":{"id":"adee","label":"catchError","path":"api/operators/catchError","docType":"function"},"c377":{"id":"c377","label":"我要启动一个新的 Observable","options":["adee"]},"0f9d":{"id":"0f9d","label":"retry","path":"api/operators/retry","docType":"function"},"cc9d":{"id":"cc9d","label":"立即","options":["0f9d"]},"198f":{"id":"198f","label":"retryWhen","path":"api/operators/retryWhen","docType":"function"},"98db":{"id":"98db","label":"当另一个 Observable 发送值的时候","options":["198f"]},"fcf3":{"id":"fcf3","label":"我要重新订阅","options":["cc9d","98db"]},"18d5":{"id":"18d5","label":"当发生错误时","options":["c377","fcf3"]},"6cf2":{"id":"6cf2","label":"当另一个 Observable 发送值的时候","options":["1725"]},"124d":{"id":"124d","label":"我要重新订阅","options":["7815","6cf2"]},"8b73":{"id":"8b73","label":"concat","path":"api/index/function/concat","docType":"function"},"934e":{"id":"934e","label":"我要启动一个新的 Observable","options":["8b73"]},"5c50":{"id":"5c50","label":"当它完成时","options":["124d","934e"]},"2eeb":{"id":"2eeb","label":"finalize","path":"api/operators/finalize","docType":"function"},"88fa":{"id":"88fa","label":"当它完成、出错或退订时，我要执行某个函数","options":["2eeb"]},"c137":{"id":"c137","label":"subscribeOn","path":"api/operators/subscribeOn","docType":"function"},"1ff4":{"id":"1ff4","label":"它会修改从调用到订阅之间的路由","options":["c137"]},"b4fe":{"id":"b4fe","label":"observeOn","path":"api/operators/observeOn","docType":"function"},"82a6":{"id":"82a6","label":"它会修改从发送值到 Observer 之间的路由","options":["b4fe"]},"35ff":{"id":"35ff","label":"我要更改调度器（Scheduler）","options":["1ff4","82a6"]},"0066":{"id":"0066","label":"race","path":"api/index/function/race","docType":"function"},"8d6b":{"id":"8d6b","label":"merge","path":"api/index/function/merge","docType":"function"},"8b75":{"id":"8b75","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"943d":{"id":"943d","label":"withLatestFrom","path":"api/operators/withLatestFrom","docType":"function"},"88eb":{"id":"88eb","label":"仅当主 Observable 发送值的时候，使用每个来源发送的最后一个值","options":["943d"]},"707c":{"id":"707c","label":"每个来源中的每个值仅使用一次","options":["8329"]},"36ae":{"id":"36ae","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["1021","88eb","707c"]},"f3a0":{"id":"f3a0","label":"我要把这个 Observable 和其它的合并，并且","options":["4449","9486","36ae"]},"b05b":{"id":"b05b","label":"我已经有一个 Observable，并且","options":["7ccb","4dff","3d22","bf3f","8ed7","f39d","1d95","6761","f8c5","7b7f","be0a","4584","cba9","c9d6","08a8","4752","18d5","5c50","88fa","35ff","f3a0"]},"a38a":{"id":"a38a","label":"race","path":"api/index/function/race","docType":"function"},"ccc5":{"id":"ccc5","label":"我只想从首先发送值的 Observable 接收各个值","options":["a38a"]},"7cfa":{"id":"7cfa","label":"forkJoin","path":"api/index/function/forkJoin","docType":"function"},"d002":{"id":"d002","label":"我想在它们全都完成时得到通知","options":["7cfa"]},"a5c8":{"id":"a5c8","label":"merge","path":"api/index/function/merge","docType":"function"},"6e58":{"id":"6e58","label":"我要输出所有值，而不管是从哪一个发送的","options":["a5c8"]},"ad54":{"id":"ad54","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"fda1":{"id":"fda1","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["ad54"]},"84a1":{"id":"84a1","label":"每个来源中的每个值仅使用一次","options":["4921"]},"882f":{"id":"882f","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["fda1","84a1"]},"d639":{"id":"d639","label":"我要依次订阅它们","options":["6114"]},"b221":{"id":"b221","label":"我已经有了由某些 Observable 组合成的单一 Observable，并且","options":["ccc5","d002","6e58","882f","d639"]},"72e0":{"id":"72e0","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"create"},"44ee":{"id":"44ee","label":"使用自定义逻辑","options":["72e0"]},"d9fc":{"id":"d9fc","label":"generate","path":"api/index/function/generate","docType":"function"},"d1e0":{"id":"d1e0","label":"使用一个类似于 for 循环的状态机","options":["d9fc"]},"83d4":{"id":"83d4","label":"throwError","path":"api/index/function/throwError","docType":"function"},"ecb6":{"id":"ecb6","label":"抛出一个错误","options":["83d4"]},"3cae":{"id":"3cae","label":"EMPTY","path":"api/index/const/EMPTY","docType":"const"},"3ed9":{"id":"3ed9","label":"只完成它，而不发送任何值","options":["3cae"]},"0c50":{"id":"0c50","label":"NEVER","path":"api/index/const/NEVER","docType":"const"},"fc52":{"id":"fc52","label":"永远不会发送任何东西","options":["0c50"]},"f346":{"id":"f346","label":"fromEvent","path":"api/index/function/fromEvent","docType":"function"},"09c8":{"id":"09c8","label":"来自 DOM 或 Node.js 或类似的东西","options":["f346"]},"fdc4":{"id":"fdc4","label":"fromEventPattern","path":"api/index/function/fromEventPattern","docType":"function"},"be11":{"id":"be11","label":"它使用某个 API 来添加或移除事件处理器","options":["fdc4"]},"e497":{"id":"e497","label":"从一个现有的事件源","options":["09c8","be11"]},"216e":{"id":"216e","label":"from","path":"api/index/function/from","docType":"function"},"a674":{"id":"a674","label":"来自某个 Promise 或事件源","options":["216e"]},"afef":{"id":"afef","label":"from","path":"api/index/function/from","docType":"function"},"9a8b":{"id":"9a8b","label":"针对某个数组中的那些值","options":["afef"]},"18a7":{"id":"18a7","label":"range","path":"api/index/function/range","docType":"function"},"9a28":{"id":"9a28","label":"针对某个数字范围内的那些值","options":["18a7"]},"6de2":{"id":"6de2","label":"of"},"a294":{"id":"a294","label":"针对通过参数给出的那些值","options":["6de2"]},"c437":{"id":"c437","label":"interval","path":"api/index/function/interval","docType":"function"},"29a9":{"id":"29a9","label":"均匀的","options":["c437"]},"6d40":{"id":"6d40","label":"带有一个可选的首次延迟","options":["6649"]},"64e9":{"id":"64e9","label":"它基于定时器发送一些值","options":["29a9","6d40"]},"a1f2":{"id":"a1f2","label":"defer","path":"api/index/function/defer","docType":"function"},"0e6f":{"id":"0e6f","label":"它在被订阅时才按需创建","options":["a1f2"]},"65b7":{"id":"65b7","label":"bindCallback","path":"api/index/function/bindCallback","docType":"function"},"b65b":{"id":"b65b","label":"支持常规的回调 API","options":["65b7"]},"7c2c":{"id":"7c2c","label":"bindNodeCallback","path":"api/index/function/bindNodeCallback","docType":"function"},"65fd":{"id":"65fd","label":"支持 Node.js 风格的回调 API","options":["7c2c"]},"93e9":{"id":"93e9","label":"我要把某个回调函数转换为 Observable","options":["b65b","65fd"]},"b8ca":{"id":"b8ca","label":"我还没有任何 Observable，并且","options":["8079","93e9"]},"initial":{"id":"initial","options":["b05b","b221","b8ca"]}}