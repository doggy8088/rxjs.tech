{"1080":{"id":"1080","label":"立即","options":["f1bf"]},"1238":{"id":"1238","label":"我要确保只有一个值","options":["8a3e"]},"1535":{"id":"1535","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["ac5a"]},"1879":{"id":"1879","label":"debounce","path":"api/operators/debounce","docType":"function"},"2181":{"id":"2181","label":"这个时间窗口是根据某个时长来决定的","options":["3304"]},"2254":{"id":"2254","label":"我要知道它发送了多少个值","options":["79cf"]},"2400":{"id":"2400","label":"根据值是否相等","options":["4de5","7dfb"]},"2779":{"id":"2779","label":"skip","path":"api/operators/skip","docType":"function"},"3156":{"id":"3156","label":"当它完成、出错或退订时，我要执行某个函数","options":["15c6"]},"3304":{"id":"3304","label":"auditTime","path":"api/operators/auditTime","docType":"function"},"3627":{"id":"3627","label":"只完成它，而不发送任何值","options":["71d8"]},"3933":{"id":"3933","label":"takeWhile","path":"api/operators/takeWhile","docType":"function"},"4333":{"id":"4333","label":"我只想从首先发送值的 Observable 接收各个值","options":["077e"]},"4740":{"id":"4740","label":"of"},"4851":{"id":"4851","label":"pluck"},"5633":{"id":"5633","label":"根据一个某个键或对象属性","options":["da2c"]},"5859":{"id":"5859","label":"我要用元数据包装它的各个消息","options":["0382","e172"]},"6056":{"id":"6056","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["dc12"]},"6105":{"id":"6105","label":"支持常规的回调 API","options":["e743"]},"6237":{"id":"6237","label":"mergeScan","path":"api/operators/mergeScan","docType":"function"},"6707":{"id":"6707","label":"使用某种特殊的 Subject 实现","options":["03e9"]},"6951":{"id":"6951","label":"如果它们位于此 Observable 的尾部","options":["3e18","5e16"]},"7363":{"id":"7363","label":"concatMap","path":"api/operators/concatMap","docType":"function"},"7416":{"id":"7416","label":"windowTime","path":"api/operators/windowTime","docType":"function"},"7594":{"id":"7594","label":"我想在它们全都完成时得到通知","options":["42e3"]},"7903":{"id":"7903","label":"bufferWhen","path":"api/operators/bufferWhen","docType":"function"},"8158":{"id":"8158","label":"我要执行自定义操作","options":["1b92"]},"8168":{"id":"8168","label":"如果它们精确的处于第 n 位","options":["d7ee"]},"8224":{"id":"8224","label":"从一个现有的事件源","options":["b9af","f924"]},"9128":{"id":"9128","label":"每个来源中的每个值仅使用一次","options":["edc3"]},"9386":{"id":"9386","label":"一个常量值","options":["0e42"]},"9450":{"id":"9450","label":"exhaustMap","path":"api/operators/exhaustMap","docType":"function"},"9451":{"id":"9451","label":"zip","path":"api/index/function/zip","docType":"function"},"9452":{"id":"9452","label":"并且每当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable，同时取消对前一个嵌套 Observable 的订阅","options":["1cab"]},"0e42":{"id":"0e42","label":"mapTo","path":"api/operators/mapTo","docType":"function"},"1d83":{"id":"1d83","label":"map","path":"api/operators/map","docType":"function"},"9e31":{"id":"9e31","label":"一个通过公式算出来的值","options":["1d83"]},"85bb":{"id":"85bb","label":"我要把它发送的每个值改成","options":["9386","9e31"]},"dd11":{"id":"dd11","label":"我要从它发送的每个值中取出一个属性","options":["4851"]},"282c":{"id":"282c","label":"tap","path":"api/operators/tap","docType":"function"},"e95c":{"id":"e95c","label":"我要监听即将发送的值，但不想影响它们","options":["282c"]},"595d":{"id":"595d","label":"filter","path":"api/operators/filter","docType":"function"},"4c3d":{"id":"4c3d","label":"基于自定义逻辑","options":["595d"]},"514f":{"id":"514f","label":"first","path":"api/operators/first","docType":"function"},"23c3":{"id":"23c3","label":"并且只要第一个值","options":["514f"]},"5e86":{"id":"5e86","label":"take","path":"api/operators/take","docType":"function"},"bbac":{"id":"bbac","label":"基于给定的数量","options":["5e86"]},"641d":{"id":"641d","label":"基于自定义逻辑","options":["3933"]},"aecd":{"id":"aecd","label":"如果它们位于此 Observable 的首部","options":["23c3","bbac","641d"]},"d7ee":{"id":"d7ee","label":"elementAt","path":"api/operators/elementAt","docType":"function"},"c337":{"id":"c337","label":"last","path":"api/operators/last","docType":"function"},"3e18":{"id":"3e18","label":"并且只要最后一个值","options":["c337"]},"8e86":{"id":"8e86","label":"takeLast","path":"api/operators/takeLast","docType":"function"},"5e16":{"id":"5e16","label":"基于给定的数量","options":["8e86"]},"f6af":{"id":"f6af","label":"takeUntil","path":"api/operators/takeUntil","docType":"function"},"dab1":{"id":"dab1","label":"直到另一个 Observable 发送了值","options":["f6af"]},"89a7":{"id":"89a7","label":"我要只允许部分值通过","options":["4c3d","aecd","8168","6951","dab1"]},"6bae":{"id":"6bae","label":"ignoreElements","path":"api/operators/ignoreElements","docType":"function"},"70c1":{"id":"70c1","label":"全部","options":["6bae"]},"122a":{"id":"122a","label":"基于给定的数量","options":["2779"]},"962d":{"id":"962d","label":"skipWhile","path":"api/operators/skipWhile","docType":"function"},"132b":{"id":"132b","label":"基于自定义逻辑","options":["962d"]},"cf92":{"id":"cf92","label":"从此 Observable 的首部","options":["122a","132b"]},"ccf8":{"id":"ccf8","label":"skipLast","path":"api/operators/skipLast","docType":"function"},"b596":{"id":"b596","label":"从此 Observable 的尾部","options":["ccf8"]},"3a6a":{"id":"3a6a","label":"skipUntil","path":"api/operators/skipUntil","docType":"function"},"acb4":{"id":"acb4","label":"直到另一个 Observable 发送了值","options":["3a6a"]},"eb7c":{"id":"eb7c","label":"distinctUntilChanged","path":"api/operators/distinctUntilChanged","docType":"function"},"4de5":{"id":"4de5","label":"发送恰好在当前值前面的那个","options":["eb7c"]},"dc08":{"id":"dc08","label":"distinct","path":"api/operators/distinct","docType":"function"},"7dfb":{"id":"7dfb","label":"以前任何时候曾发送过","options":["dc08"]},"de8d":{"id":"de8d","label":"distinctUntilKeyChanged","path":"api/operators/distinctUntilKeyChanged","docType":"function"},"da2c":{"id":"da2c","label":"发送恰好在当前值前面的那个","options":["de8d"]},"c75f":{"id":"c75f","label":"与某些以前发送的值匹配","options":["2400","5633"]},"144a":{"id":"144a","label":"throttle","path":"api/operators/throttle","docType":"function"},"0305":{"id":"0305","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["144a"]},"e9c6":{"id":"e9c6","label":"throttleTime","path":"api/operators/throttleTime","docType":"function"},"b461":{"id":"b461","label":"这个时间窗口是根据某个时长来决定的","options":["e9c6"]},"9dbb":{"id":"9dbb","label":"发送每个时间窗口中的第一个值","options":["0305","b461"]},"d229":{"id":"d229","label":"audit","path":"api/operators/audit","docType":"function"},"34fc":{"id":"34fc","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["d229"]},"f325":{"id":"f325","label":"发送每个时间窗口中的最后一个值","options":["34fc","2181"]},"6a63":{"id":"6a63","label":"此平静的间隔阈值由另一个 Observable 决定","options":["1879"]},"252f":{"id":"252f","label":"debounceTime","path":"api/operators/debounceTime","docType":"function"},"18de":{"id":"18de","label":"此平静的间隔阈值是根据某个时长决定的","options":["252f"]},"e9ac":{"id":"e9ac","label":"等足够平静时就发送最后一个值","options":["6a63","18de"]},"7f36":{"id":"7f36","label":"发生的过于频繁","options":["9dbb","f325","e9ac"]},"9e57":{"id":"9e57","label":"我要忽略某些值","options":["70c1","cf92","b596","acb4","c75f","7f36"]},"779e":{"id":"779e","label":"reduce","path":"api/operators/reduce","docType":"function"},"dfa3":{"id":"dfa3","label":"并且只输出最终计算出的值","options":["779e"]},"8f4e":{"id":"8f4e","label":"scan","path":"api/operators/scan","docType":"function"},"e995":{"id":"e995","label":"并且每当来源发送某个值时就输出计算好的值","options":["8f4e"]},"f483":{"id":"f483","label":"并且当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable","options":["6237"]},"1cab":{"id":"1cab","label":"switchScan","path":"api/operators/switchScan","docType":"function"},"2f8e":{"id":"2f8e","label":"我要使用已发送的所有值做某种计算","options":["dfa3","e995","f483","9452"]},"9daf":{"id":"9daf","label":"materialize","path":"api/operators/materialize","docType":"function"},"0382":{"id":"0382","label":"此元数据描述每个通知（next、error 或 complete）","options":["9daf"]},"0314":{"id":"0314","label":"timeInterval","path":"api/operators/timeInterval","docType":"function"},"e172":{"id":"e172","label":"次元数据包含从最后一次发送值开始已过去时间","options":["0314"]},"5dc3":{"id":"5dc3","label":"timeout","path":"api/operators/timeout","docType":"function"},"719e":{"id":"719e","label":"我要抛出一个错误","options":["5dc3"]},"edcd":{"id":"edcd","label":"timeoutWith","path":"api/operators/timeoutWith","docType":"function"},"d38f":{"id":"d38f","label":"我要切换到另一个 Observable","options":["edcd"]},"b4b1":{"id":"b4b1","label":"在某个非交互式间隔之后","options":["719e","d38f"]},"8a3e":{"id":"8a3e","label":"single","path":"api/operators/single","docType":"function"},"79cf":{"id":"79cf","label":"count","path":"api/operators/count","docType":"function"},"0252":{"id":"0252","label":"startWith"},"97e6":{"id":"97e6","label":"我要在开头放一个值","options":["0252"]},"64a3":{"id":"64a3","label":"delay","path":"api/operators/delay","docType":"function"},"60bd":{"id":"60bd","label":"基于给定的时间","options":["64a3"]},"08df":{"id":"08df","label":"delayWhen","path":"api/operators/delayWhen","docType":"function"},"0b83":{"id":"0b83","label":"基于另一个 Observable 的发送情况","options":["08df"]},"e28a":{"id":"e28a","label":"我要延迟后再发送","options":["60bd","0b83"]},"99a6":{"id":"99a6","label":"toArray","path":"api/operators/toArray","docType":"function"},"c999":{"id":"c999","label":"并转换为数组","options":["99a6"]},"daa2":{"id":"daa2","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"toPromise"},"e9fb":{"id":"e9fb","label":"并且转换为 Promise","options":["daa2"]},"93c6":{"id":"93c6","label":"直到此 Observable 完成","options":["c999","e9fb"]},"c31c":{"id":"c31c","label":"pairwise","path":"api/operators/pairwise","docType":"function"},"dbdc":{"id":"dbdc","label":"连续配对，作为数组","options":["c31c"]},"da0d":{"id":"da0d","label":"partition","path":"api/index/function/partition","docType":"function"},"76e1":{"id":"76e1","label":"基于某种标准，并且输出两个 Observable：那些符合此标准的，和不符合此标准的","options":["da0d"]},"6d30":{"id":"6d30","label":"bufferCount","path":"api/operators/bufferCount","docType":"function"},"2ff0":{"id":"2ff0","label":"并且把分好的组以数组形式发送","options":["6d30"]},"6bc5":{"id":"6bc5","label":"windowCount","path":"api/operators/windowCount","docType":"function"},"4c89":{"id":"4c89","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["6bc5"]},"6da3":{"id":"6da3","label":"根据特定大小的批次","options":["2ff0","4c89"]},"f7e1":{"id":"f7e1","label":"bufferTime","path":"api/operators/bufferTime","docType":"function"},"c01e":{"id":"c01e","label":"并且把分好的组以数组的形式发送","options":["f7e1"]},"7ca6":{"id":"7ca6","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["7416"]},"8b7a":{"id":"8b7a","label":"基于时间","options":["c01e","7ca6"]},"07ab":{"id":"07ab","label":"buffer","path":"api/operators/buffer","docType":"function"},"8e48":{"id":"8e48","label":"并且把分好的组以数组的形式发送","options":["07ab"]},"1e7e":{"id":"1e7e","label":"window","path":"api/operators/window","docType":"function"},"b1c3":{"id":"b1c3","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["1e7e"]},"0394":{"id":"0394","label":"直到另一个 Observable 发送了值","options":["8e48","b1c3"]},"2e18":{"id":"2e18","label":"并且把分好的组以数组的形式发送","options":["7903"]},"ac5a":{"id":"ac5a","label":"windowWhen","path":"api/operators/windowWhen","docType":"function"},"c81a":{"id":"c81a","label":"基于某个按需创建的 Observable 的发送情况","options":["2e18","1535"]},"3de4":{"id":"3de4","label":"bufferToggle","path":"api/operators/bufferToggle","docType":"function"},"460a":{"id":"460a","label":"并且把分好的组以数组的形式发送","options":["3de4"]},"dc12":{"id":"dc12","label":"windowToggle","path":"api/operators/windowToggle","docType":"function"},"bc65":{"id":"bc65","label":"基于另一个 Observable 开始一组，并基于第三个 Observable 结束这一组","options":["460a","6056"]},"cc72":{"id":"cc72","label":"groupBy","path":"api/operators/groupBy","docType":"function"},"443f":{"id":"443f","label":"基于根据已发送的值计算出的一个键","options":["cc72"]},"d919":{"id":"d919","label":"我要对这些值进行分组","options":["93c6","dbdc","76e1","6da3","8b7a","0394","c81a","bc65","443f"]},"ceaf":{"id":"ceaf","label":"mergeMapTo","path":"api/operators/mergeMapTo","docType":"function"},"6e29":{"id":"6e29","label":"这里的嵌套 Observable 对每个值都是一样的","options":["ceaf"]},"cab6":{"id":"cab6","label":"mergeMap","path":"api/operators/mergeMap","docType":"function"},"8e91":{"id":"8e91","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["cab6"]},"d45a":{"id":"d45a","label":"并且并行发送全部嵌套 Observable 所发送的值","options":["6e29","8e91"]},"de9c":{"id":"de9c","label":"concatMapTo","path":"api/operators/concatMapTo","docType":"function"},"e175":{"id":"e175","label":"这里的嵌套 Observable 对每个值都是一样的","options":["de9c"]},"0af4":{"id":"0af4","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["7363"]},"38bd":{"id":"38bd","label":"并且依次发送每个嵌套 Observable 所发送的值","options":["e175","0af4"]},"b670":{"id":"b670","label":"switchMapTo","path":"api/operators/switchMapTo","docType":"function"},"032a":{"id":"032a","label":"这里的嵌套 Observable 对每个值都是一样的","options":["b670"]},"79ea":{"id":"79ea","label":"switchMap","path":"api/operators/switchMap","docType":"function"},"3ac0":{"id":"3ac0","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["79ea"]},"020e":{"id":"020e","label":"并且当新值抵达时，取消前一个嵌套 Observable","options":["032a","3ac0"]},"c6e0":{"id":"c6e0","label":"并且即使当前的嵌套 Observable 尚未完结，也要忽略进来的值","options":["9450"]},"1b9a":{"id":"1b9a","label":"expand","path":"api/operators/expand","docType":"function"},"3d72":{"id":"3d72","label":"并且对每一个新值递归启动一个新的 Observable","options":["1b9a"]},"eca6":{"id":"eca6","label":"我要为每个值开始一个新的 Observable","options":["d45a","38bd","020e","c6e0","3d72"]},"1b92":{"id":"1b92","label":"pipe","path":"api/index/function/pipe","docType":"function"},"ba36":{"id":"ba36","label":"share","path":"api/operators/share","docType":"function"},"572b":{"id":"572b","label":"并且在第一个订阅者抵达时尽快启动","options":["ba36"]},"c2cc":{"id":"c2cc","label":"publish"},"c629":{"id":"c629","label":"并且手动或用程序启动它","options":["c2cc"]},"f00d":{"id":"f00d","label":"使用常规 Subject","options":["572b","c629"]},"ad17":{"id":"ad17","label":"publishBehavior"},"d61f":{"id":"d61f","label":"使用 BehaviorSubject","options":["ad17"]},"aa1e":{"id":"aa1e","label":"publishReplay"},"693c":{"id":"693c","label":"使用 ReplaySubject","options":["aa1e"]},"a453":{"id":"a453","label":"publishLast"},"d8d8":{"id":"d8d8","label":"使用 AsyncSubject","options":["a453"]},"03e9":{"id":"03e9","label":"multicast"},"fa50":{"id":"fa50","label":"我要在多个订阅者之间共享某个订阅","options":["f00d","d61f","693c","d8d8","6707"]},"e65c":{"id":"e65c","label":"catchError","path":"api/operators/catchError","docType":"function"},"ff5a":{"id":"ff5a","label":"我要启动一个新的 Observable","options":["e65c"]},"f1bf":{"id":"f1bf","label":"retry","path":"api/operators/retry","docType":"function"},"6df7":{"id":"6df7","label":"retryWhen","path":"api/operators/retryWhen","docType":"function"},"eac3":{"id":"eac3","label":"当另一个 Observable 发送值的时候","options":["6df7"]},"be08":{"id":"be08","label":"我要重新订阅","options":["1080","eac3"]},"9ab3":{"id":"9ab3","label":"当发生错误时","options":["ff5a","be08"]},"f647":{"id":"f647","label":"repeat","path":"api/operators/repeat","docType":"function"},"50e5":{"id":"50e5","label":"立即","options":["f647"]},"ac67":{"id":"ac67","label":"repeatWhen","path":"api/operators/repeatWhen","docType":"function"},"379b":{"id":"379b","label":"当另一个 Observable 发送值的时候","options":["ac67"]},"f1bb":{"id":"f1bb","label":"我要重新订阅","options":["50e5","379b"]},"bf9b":{"id":"bf9b","label":"concat","path":"api/index/function/concat","docType":"function"},"164e":{"id":"164e","label":"我要启动一个新的 Observable","options":["bf9b"]},"989f":{"id":"989f","label":"当它完成时","options":["f1bb","164e"]},"15c6":{"id":"15c6","label":"finalize","path":"api/operators/finalize","docType":"function"},"379a":{"id":"379a","label":"subscribeOn","path":"api/operators/subscribeOn","docType":"function"},"eb6c":{"id":"eb6c","label":"它会修改从调用到订阅之间的路由","options":["379a"]},"6e39":{"id":"6e39","label":"observeOn","path":"api/operators/observeOn","docType":"function"},"c9d9":{"id":"c9d9","label":"它会修改从发送值到 Observer 之间的路由","options":["6e39"]},"63b4":{"id":"63b4","label":"我要更改调度器（Scheduler）","options":["eb6c","c9d9"]},"c3df":{"id":"c3df","label":"race","path":"api/index/function/race","docType":"function"},"10cb":{"id":"10cb","label":"我只想从首先发送值的 Observable 接收各个值","options":["c3df"]},"84b6":{"id":"84b6","label":"merge","path":"api/index/function/merge","docType":"function"},"d5f5":{"id":"d5f5","label":"我要输出所有值，而不管是从哪一个发送的","options":["84b6"]},"38e8":{"id":"38e8","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"efbe":{"id":"efbe","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["38e8"]},"a1d0":{"id":"a1d0","label":"withLatestFrom","path":"api/operators/withLatestFrom","docType":"function"},"cc12":{"id":"cc12","label":"仅当主 Observable 发送值的时候，使用每个来源发送的最后一个值","options":["a1d0"]},"fdb5":{"id":"fdb5","label":"每个来源中的每个值仅使用一次","options":["9451"]},"50c3":{"id":"50c3","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["efbe","cc12","fdb5"]},"3f5c":{"id":"3f5c","label":"我要把这个 Observable 和其它的合并，并且","options":["10cb","d5f5","50c3"]},"a557":{"id":"a557","label":"我已经有一个 Observable，并且","options":["85bb","dd11","e95c","89a7","9e57","2f8e","5859","b4b1","1238","2254","97e6","e28a","d919","eca6","8158","fa50","9ab3","989f","3156","63b4","3f5c"]},"077e":{"id":"077e","label":"race","path":"api/index/function/race","docType":"function"},"42e3":{"id":"42e3","label":"forkJoin","path":"api/index/function/forkJoin","docType":"function"},"20be":{"id":"20be","label":"merge","path":"api/index/function/merge","docType":"function"},"4ada":{"id":"4ada","label":"我要输出所有值，而不管是从哪一个发送的","options":["20be"]},"e699":{"id":"e699","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"db57":{"id":"db57","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["e699"]},"edc3":{"id":"edc3","label":"zip","path":"api/index/function/zip","docType":"function"},"0447":{"id":"0447","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["db57","9128"]},"767b":{"id":"767b","label":"concat","path":"api/index/function/concat","docType":"function"},"3dd8":{"id":"3dd8","label":"我要依次订阅它们","options":["767b"]},"eabb":{"id":"eabb","label":"我已经有了由某些 Observable 组合成的单一 Observable，并且","options":["4333","7594","4ada","0447","3dd8"]},"e6c6":{"id":"e6c6","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"create"},"a480":{"id":"a480","label":"使用自定义逻辑","options":["e6c6"]},"97df":{"id":"97df","label":"generate","path":"api/index/function/generate","docType":"function"},"64f8":{"id":"64f8","label":"使用一个类似于 for 循环的状态机","options":["97df"]},"e6b4":{"id":"e6b4","label":"throwError","path":"api/index/function/throwError","docType":"function"},"dcc8":{"id":"dcc8","label":"抛出一个错误","options":["e6b4"]},"71d8":{"id":"71d8","label":"EMPTY","path":"api/index/const/EMPTY","docType":"const"},"9abf":{"id":"9abf","label":"NEVER","path":"api/index/const/NEVER","docType":"const"},"26d4":{"id":"26d4","label":"永远不会发送任何东西","options":["9abf"]},"baa6":{"id":"baa6","label":"fromEvent","path":"api/index/function/fromEvent","docType":"function"},"b9af":{"id":"b9af","label":"来自 DOM 或 Node.js 或类似的东西","options":["baa6"]},"c14e":{"id":"c14e","label":"fromEventPattern","path":"api/index/function/fromEventPattern","docType":"function"},"f924":{"id":"f924","label":"它使用某个 API 来添加或移除事件处理器","options":["c14e"]},"ab49":{"id":"ab49","label":"from","path":"api/index/function/from","docType":"function"},"a189":{"id":"a189","label":"来自某个 Promise 或事件源","options":["ab49"]},"8fe4":{"id":"8fe4","label":"from","path":"api/index/function/from","docType":"function"},"d5c1":{"id":"d5c1","label":"针对某个数组中的那些值","options":["8fe4"]},"99fe":{"id":"99fe","label":"range","path":"api/index/function/range","docType":"function"},"22af":{"id":"22af","label":"针对某个数字范围内的那些值","options":["99fe"]},"59e6":{"id":"59e6","label":"针对通过参数给出的那些值","options":["4740"]},"3da1":{"id":"3da1","label":"它是可迭代者","options":["d5c1","22af","59e6"]},"ca9c":{"id":"ca9c","label":"interval","path":"api/index/function/interval","docType":"function"},"7e65":{"id":"7e65","label":"均匀的","options":["ca9c"]},"542a":{"id":"542a","label":"timer","path":"api/index/function/timer","docType":"function"},"2d3c":{"id":"2d3c","label":"带有一个可选的首次延迟","options":["542a"]},"404e":{"id":"404e","label":"它基于定时器发送一些值","options":["7e65","2d3c"]},"46d4":{"id":"46d4","label":"defer","path":"api/index/function/defer","docType":"function"},"806b":{"id":"806b","label":"它在被订阅时才按需创建","options":["46d4"]},"0de3":{"id":"0de3","label":"我要创建一个新的 Observable","options":["a480","64f8","dcc8","3627","26d4","8224","a189","3da1","404e","806b"]},"e743":{"id":"e743","label":"bindCallback","path":"api/index/function/bindCallback","docType":"function"},"d625":{"id":"d625","label":"bindNodeCallback","path":"api/index/function/bindNodeCallback","docType":"function"},"b71f":{"id":"b71f","label":"支持 Node.js 风格的回调 API","options":["d625"]},"fd28":{"id":"fd28","label":"我要把某个回调函数转换为 Observable","options":["6105","b71f"]},"b629":{"id":"b629","label":"我还没有任何 Observable，并且","options":["0de3","fd28"]},"initial":{"id":"initial","options":["a557","eabb","b629"]}}