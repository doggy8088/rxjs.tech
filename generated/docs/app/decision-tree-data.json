{"1120":{"id":"1120","label":"timeoutWith","path":"api/operators/timeoutWith","docType":"function"},"1425":{"id":"1425","label":"toArray","path":"api/operators/toArray","docType":"function"},"1602":{"id":"1602","label":"这里的嵌套 Observable 对每个值都是一样的","options":["b4e6"]},"1647":{"id":"1647","label":"first","path":"api/operators/first","docType":"function"},"3152":{"id":"3152","label":"基于自定义逻辑","options":["0233"]},"3367":{"id":"3367","label":"我想在它们全都完成时得到通知","options":["8495"]},"3847":{"id":"3847","label":"of"},"4622":{"id":"4622","label":"我要创建一个新的 Observable","options":["fd9b","8a20","c03d","754d","36b4","6708","f4f8","9a19","6ef3","7aa8"]},"4654":{"id":"4654","label":"直到此 Observable 完成","options":["6dee","ddb8"]},"4675":{"id":"4675","label":"并且把分好的组以数组的形式发送","options":["5389"]},"5389":{"id":"5389","label":"bufferWhen","path":"api/operators/bufferWhen","docType":"function"},"5533":{"id":"5533","label":"publishBehavior"},"5669":{"id":"5669","label":"我要为每个值开始一个新的 Observable","options":["25ef","fa5d","90cb","16fa","1dd3"]},"6335":{"id":"6335","label":"我要知道它发送了多少个值","options":["dc5d"]},"6708":{"id":"6708","label":"从一个现有的事件源","options":["6f12","dea3"]},"6920":{"id":"6920","label":"我只想从首先发送值的 Observable 接收各个值","options":["5f09"]},"7481":{"id":"7481","label":"当发生错误时","options":["6bf2","ba28"]},"7865":{"id":"7865","label":"并且手动或用程序启动它","options":["0a8c"]},"7879":{"id":"7879","label":"我要监听即将发送的值，但不想影响它们","options":["05aa"]},"8388":{"id":"8388","label":"每个来源中的每个值仅使用一次","options":["678c"]},"8495":{"id":"8495","label":"forkJoin","path":"api/index/function/forkJoin","docType":"function"},"8650":{"id":"8650","label":"基于某个按需创建的 Observable 的发送情况","options":["4675","60c7"]},"9222":{"id":"9222","label":"EMPTY","path":"api/index/const/EMPTY","docType":"const"},"9299":{"id":"9299","label":"我已经有了由某些 Observable 组合成的单一 Observable，并且","options":["d5a4","3367","90cb","f6b4","a152"]},"e096":{"id":"e096","label":"mapTo","path":"api/operators/mapTo","docType":"function"},"dba1":{"id":"dba1","label":"一个常量值","options":["e096"]},"52d6":{"id":"52d6","label":"map","path":"api/operators/map","docType":"function"},"d115":{"id":"d115","label":"一个通过公式算出来的值","options":["52d6"]},"45de":{"id":"45de","label":"我要把它发送的每个值改成","options":["dba1","d115"]},"a8dc":{"id":"a8dc","label":"pluck"},"6b26":{"id":"6b26","label":"我要从它发送的每个值中取出一个属性","options":["a8dc"]},"05aa":{"id":"05aa","label":"tap","path":"api/operators/tap","docType":"function"},"43d7":{"id":"43d7","label":"filter","path":"api/operators/filter","docType":"function"},"5bb3":{"id":"5bb3","label":"基于自定义逻辑","options":["43d7"]},"0454":{"id":"0454","label":"并且只要第一个值","options":["1647"]},"c66a":{"id":"c66a","label":"take","path":"api/operators/take","docType":"function"},"ac4a":{"id":"ac4a","label":"基于给定的数量","options":["c66a"]},"da65":{"id":"da65","label":"takeWhile","path":"api/operators/takeWhile","docType":"function"},"783a":{"id":"783a","label":"基于自定义逻辑","options":["da65"]},"f5cb":{"id":"f5cb","label":"如果它们位于此 Observable 的首部","options":["0454","ac4a","783a"]},"d159":{"id":"d159","label":"elementAt","path":"api/operators/elementAt","docType":"function"},"08a5":{"id":"08a5","label":"如果它们精确的处于第 n 位","options":["d159"]},"6e6f":{"id":"6e6f","label":"last","path":"api/operators/last","docType":"function"},"dd1f":{"id":"dd1f","label":"并且只要最后一个值","options":["6e6f"]},"6e51":{"id":"6e51","label":"takeLast","path":"api/operators/takeLast","docType":"function"},"25c8":{"id":"25c8","label":"基于给定的数量","options":["6e51"]},"010b":{"id":"010b","label":"如果它们位于此 Observable 的尾部","options":["dd1f","25c8"]},"f400":{"id":"f400","label":"takeUntil","path":"api/operators/takeUntil","docType":"function"},"1a3f":{"id":"1a3f","label":"直到另一个 Observable 发送了值","options":["f400"]},"612e":{"id":"612e","label":"我要只允许部分值通过","options":["5bb3","f5cb","08a5","010b","1a3f"]},"9dcb":{"id":"9dcb","label":"ignoreElements","path":"api/operators/ignoreElements","docType":"function"},"ece5":{"id":"ece5","label":"全部","options":["9dcb"]},"4cdb":{"id":"4cdb","label":"skip","path":"api/operators/skip","docType":"function"},"ee78":{"id":"ee78","label":"基于给定的数量","options":["4cdb"]},"0233":{"id":"0233","label":"skipWhile","path":"api/operators/skipWhile","docType":"function"},"b404":{"id":"b404","label":"从此 Observable 的首部","options":["ee78","3152"]},"a87b":{"id":"a87b","label":"skipLast","path":"api/operators/skipLast","docType":"function"},"5bd9":{"id":"5bd9","label":"从此 Observable 的尾部","options":["a87b"]},"bdb2":{"id":"bdb2","label":"skipUntil","path":"api/operators/skipUntil","docType":"function"},"c744":{"id":"c744","label":"直到另一个 Observable 发送了值","options":["bdb2"]},"ec09":{"id":"ec09","label":"distinctUntilChanged","path":"api/operators/distinctUntilChanged","docType":"function"},"59b6":{"id":"59b6","label":"发送恰好在当前值前面的那个","options":["ec09"]},"439f":{"id":"439f","label":"distinct","path":"api/operators/distinct","docType":"function"},"39b8":{"id":"39b8","label":"以前任何时候曾发送过","options":["439f"]},"1abe":{"id":"1abe","label":"根据值是否相等","options":["59b6","39b8"]},"2f35":{"id":"2f35","label":"distinctUntilKeyChanged","path":"api/operators/distinctUntilKeyChanged","docType":"function"},"eb39":{"id":"eb39","label":"发送恰好在当前值前面的那个","options":["2f35"]},"9c68":{"id":"9c68","label":"根据一个某个键或对象属性","options":["eb39"]},"64b7":{"id":"64b7","label":"与某些以前发送的值匹配","options":["1abe","9c68"]},"6aaf":{"id":"6aaf","label":"throttle","path":"api/operators/throttle","docType":"function"},"98d3":{"id":"98d3","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["6aaf"]},"61c0":{"id":"61c0","label":"throttleTime","path":"api/operators/throttleTime","docType":"function"},"822a":{"id":"822a","label":"这个时间窗口是根据某个时长来决定的","options":["61c0"]},"11b5":{"id":"11b5","label":"发送每个时间窗口中的第一个值","options":["98d3","822a"]},"12dc":{"id":"12dc","label":"audit","path":"api/operators/audit","docType":"function"},"ce82":{"id":"ce82","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["12dc"]},"c4e1":{"id":"c4e1","label":"auditTime","path":"api/operators/auditTime","docType":"function"},"7e87":{"id":"7e87","label":"这个时间窗口是根据某个时长来决定的","options":["c4e1"]},"9fd9":{"id":"9fd9","label":"发送每个时间窗口中的最后一个值","options":["ce82","7e87"]},"45a2":{"id":"45a2","label":"debounce","path":"api/operators/debounce","docType":"function"},"0de9":{"id":"0de9","label":"此平静的间隔阈值由另一个 Observable 决定","options":["45a2"]},"ca9e":{"id":"ca9e","label":"debounceTime","path":"api/operators/debounceTime","docType":"function"},"2de4":{"id":"2de4","label":"此平静的间隔阈值是根据某个时长决定的","options":["ca9e"]},"8a7d":{"id":"8a7d","label":"等足够平静时就发送最后一个值","options":["0de9","2de4"]},"2ef7":{"id":"2ef7","label":"发生的过于频繁","options":["11b5","9fd9","8a7d"]},"c7f3":{"id":"c7f3","label":"我要忽略某些值","options":["ece5","b404","5bd9","c744","64b7","2ef7"]},"83c9":{"id":"83c9","label":"reduce","path":"api/operators/reduce","docType":"function"},"bd7c":{"id":"bd7c","label":"并且只输出最终计算出的值","options":["83c9"]},"e2eb":{"id":"e2eb","label":"scan","path":"api/operators/scan","docType":"function"},"a88b":{"id":"a88b","label":"并且每当来源发送某个值时就输出计算好的值","options":["e2eb"]},"c8e7":{"id":"c8e7","label":"mergeScan","path":"api/operators/mergeScan","docType":"function"},"d358":{"id":"d358","label":"并且当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable","options":["c8e7"]},"0b29":{"id":"0b29","label":"switchScan","path":"api/operators/switchScan","docType":"function"},"17c4":{"id":"17c4","label":"并且每当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable，同时取消对前一个嵌套 Observable 的订阅","options":["0b29"]},"791f":{"id":"791f","label":"我要使用已发送的所有值做某种计算","options":["bd7c","a88b","d358","17c4"]},"a60d":{"id":"a60d","label":"materialize","path":"api/operators/materialize","docType":"function"},"126b":{"id":"126b","label":"此元数据描述每个通知（next、error 或 complete）","options":["a60d"]},"aaba":{"id":"aaba","label":"timeInterval","path":"api/operators/timeInterval","docType":"function"},"fdd6":{"id":"fdd6","label":"次元数据包含从最后一次发送值开始已过去时间","options":["aaba"]},"57ca":{"id":"57ca","label":"我要用元数据包装它的各个消息","options":["126b","fdd6"]},"eeee":{"id":"eeee","label":"timeout","path":"api/operators/timeout","docType":"function"},"f397":{"id":"f397","label":"我要抛出一个错误","options":["eeee"]},"24a9":{"id":"24a9","label":"我要切换到另一个 Observable","options":["1120"]},"f294":{"id":"f294","label":"在某个非交互式间隔之后","options":["f397","24a9"]},"9ac5":{"id":"9ac5","label":"single","path":"api/operators/single","docType":"function"},"f0b1":{"id":"f0b1","label":"我要确保只有一个值","options":["9ac5"]},"dc5d":{"id":"dc5d","label":"count","path":"api/operators/count","docType":"function"},"1e4e":{"id":"1e4e","label":"startWith"},"5d66":{"id":"5d66","label":"我要在开头放一个值","options":["1e4e"]},"1d06":{"id":"1d06","label":"delay","path":"api/operators/delay","docType":"function"},"bf39":{"id":"bf39","label":"基于给定的时间","options":["1d06"]},"fea1":{"id":"fea1","label":"delayWhen","path":"api/operators/delayWhen","docType":"function"},"40aa":{"id":"40aa","label":"基于另一个 Observable 的发送情况","options":["fea1"]},"e41d":{"id":"e41d","label":"我要延迟后再发送","options":["bf39","40aa"]},"6dee":{"id":"6dee","label":"并转换为数组","options":["1425"]},"b46e":{"id":"b46e","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"toPromise"},"ddb8":{"id":"ddb8","label":"并且转换为 Promise","options":["b46e"]},"40e2":{"id":"40e2","label":"pairwise","path":"api/operators/pairwise","docType":"function"},"9e36":{"id":"9e36","label":"连续配对，作为数组","options":["40e2"]},"88f7":{"id":"88f7","label":"partition","path":"api/index/function/partition","docType":"function"},"942f":{"id":"942f","label":"基于某种标准，并且输出两个 Observable：那些符合此标准的，和不符合此标准的","options":["88f7"]},"97aa":{"id":"97aa","label":"bufferCount","path":"api/operators/bufferCount","docType":"function"},"12d8":{"id":"12d8","label":"并且把分好的组以数组形式发送","options":["97aa"]},"7eb2":{"id":"7eb2","label":"windowCount","path":"api/operators/windowCount","docType":"function"},"079e":{"id":"079e","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["7eb2"]},"eb44":{"id":"eb44","label":"根据特定大小的批次","options":["12d8","079e"]},"ca1d":{"id":"ca1d","label":"bufferTime","path":"api/operators/bufferTime","docType":"function"},"14cf":{"id":"14cf","label":"并且把分好的组以数组的形式发送","options":["ca1d"]},"55b6":{"id":"55b6","label":"windowTime","path":"api/operators/windowTime","docType":"function"},"eacb":{"id":"eacb","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["55b6"]},"e477":{"id":"e477","label":"基于时间","options":["14cf","eacb"]},"5e26":{"id":"5e26","label":"buffer","path":"api/operators/buffer","docType":"function"},"0272":{"id":"0272","label":"并且把分好的组以数组的形式发送","options":["5e26"]},"f73d":{"id":"f73d","label":"window","path":"api/operators/window","docType":"function"},"8c34":{"id":"8c34","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["f73d"]},"b2d6":{"id":"b2d6","label":"直到另一个 Observable 发送了值","options":["0272","8c34"]},"b0ee":{"id":"b0ee","label":"windowWhen","path":"api/operators/windowWhen","docType":"function"},"60c7":{"id":"60c7","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["b0ee"]},"17a9":{"id":"17a9","label":"bufferToggle","path":"api/operators/bufferToggle","docType":"function"},"91ce":{"id":"91ce","label":"并且把分好的组以数组的形式发送","options":["17a9"]},"fbf7":{"id":"fbf7","label":"windowToggle","path":"api/operators/windowToggle","docType":"function"},"9ad0":{"id":"9ad0","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["fbf7"]},"b4b0":{"id":"b4b0","label":"基于另一个 Observable 开始一组，并基于第三个 Observable 结束这一组","options":["91ce","9ad0"]},"28a1":{"id":"28a1","label":"groupBy","path":"api/operators/groupBy","docType":"function"},"c67e":{"id":"c67e","label":"基于根据已发送的值计算出的一个键","options":["28a1"]},"b8db":{"id":"b8db","label":"我要对这些值进行分组","options":["4654","9e36","942f","eb44","e477","b2d6","8650","b4b0","c67e"]},"4da1":{"id":"4da1","label":"mergeMapTo","path":"api/operators/mergeMapTo","docType":"function"},"ec35":{"id":"ec35","label":"这里的嵌套 Observable 对每个值都是一样的","options":["4da1"]},"ba42":{"id":"ba42","label":"mergeMap","path":"api/operators/mergeMap","docType":"function"},"1df0":{"id":"1df0","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["ba42"]},"25ef":{"id":"25ef","label":"并且并行发送全部嵌套 Observable 所发送的值","options":["ec35","1df0"]},"5b4b":{"id":"5b4b","label":"concatMapTo","path":"api/operators/concatMapTo","docType":"function"},"7f67":{"id":"7f67","label":"这里的嵌套 Observable 对每个值都是一样的","options":["5b4b"]},"c428":{"id":"c428","label":"concatMap","path":"api/operators/concatMap","docType":"function"},"3e5e":{"id":"3e5e","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["c428"]},"fa5d":{"id":"fa5d","label":"并且依次发送每个嵌套 Observable 所发送的值","options":["7f67","3e5e"]},"b4e6":{"id":"b4e6","label":"switchMapTo","path":"api/operators/switchMapTo","docType":"function"},"5e4e":{"id":"5e4e","label":"switchMap","path":"api/operators/switchMap","docType":"function"},"cc3a":{"id":"cc3a","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["5e4e"]},"90cb":{"id":"90cb","label":"我要输出所有值，而不管是从哪一个发送的","options":["ad4c"]},"a5c8":{"id":"a5c8","label":"exhaustMap","path":"api/operators/exhaustMap","docType":"function"},"16fa":{"id":"16fa","label":"并且即使当前的嵌套 Observable 尚未完结，也要忽略进来的值","options":["a5c8"]},"d11b":{"id":"d11b","label":"expand","path":"api/operators/expand","docType":"function"},"1dd3":{"id":"1dd3","label":"并且对每一个新值递归启动一个新的 Observable","options":["d11b"]},"7e69":{"id":"7e69","label":"pipe","path":"api/index/function/pipe","docType":"function"},"203e":{"id":"203e","label":"我要执行自定义操作","options":["7e69"]},"4d12":{"id":"4d12","label":"share","path":"api/operators/share","docType":"function"},"3e90":{"id":"3e90","label":"并且在第一个订阅者抵达时尽快启动","options":["4d12"]},"0a8c":{"id":"0a8c","label":"publish"},"fedc":{"id":"fedc","label":"使用常规 Subject","options":["3e90","7865"]},"eed3":{"id":"eed3","label":"使用 BehaviorSubject","options":["5533"]},"ef3c":{"id":"ef3c","label":"publishReplay"},"fd22":{"id":"fd22","label":"使用 ReplaySubject","options":["ef3c"]},"25b1":{"id":"25b1","label":"publishLast"},"e472":{"id":"e472","label":"使用 AsyncSubject","options":["25b1"]},"d0ff":{"id":"d0ff","label":"multicast"},"825a":{"id":"825a","label":"使用某种特殊的 Subject 实现","options":["d0ff"]},"4f7a":{"id":"4f7a","label":"我要在多个订阅者之间共享某个订阅","options":["fedc","eed3","fd22","e472","825a"]},"5f95":{"id":"5f95","label":"catchError","path":"api/operators/catchError","docType":"function"},"6bf2":{"id":"6bf2","label":"我要启动一个新的 Observable","options":["5f95"]},"77b6":{"id":"77b6","label":"retry","path":"api/operators/retry","docType":"function"},"0692":{"id":"0692","label":"立即","options":["77b6"]},"c17c":{"id":"c17c","label":"retryWhen","path":"api/operators/retryWhen","docType":"function"},"b916":{"id":"b916","label":"当另一个 Observable 发送值的时候","options":["c17c"]},"ba28":{"id":"ba28","label":"我要重新订阅","options":["0692","b916"]},"211d":{"id":"211d","label":"repeat","path":"api/operators/repeat","docType":"function"},"94a8":{"id":"94a8","label":"立即","options":["211d"]},"c5bd":{"id":"c5bd","label":"repeatWhen","path":"api/operators/repeatWhen","docType":"function"},"26d4":{"id":"26d4","label":"当另一个 Observable 发送值的时候","options":["c5bd"]},"e1e6":{"id":"e1e6","label":"我要重新订阅","options":["94a8","26d4"]},"3f04":{"id":"3f04","label":"concat","path":"api/index/function/concat","docType":"function"},"63a7":{"id":"63a7","label":"我要启动一个新的 Observable","options":["3f04"]},"b21f":{"id":"b21f","label":"当它完成时","options":["e1e6","63a7"]},"ea79":{"id":"ea79","label":"finalize","path":"api/operators/finalize","docType":"function"},"f546":{"id":"f546","label":"当它完成、出错或退订时，我要执行某个函数","options":["ea79"]},"8b2d":{"id":"8b2d","label":"subscribeOn","path":"api/operators/subscribeOn","docType":"function"},"dc4f":{"id":"dc4f","label":"它会修改从调用到订阅之间的路由","options":["8b2d"]},"4cd1":{"id":"4cd1","label":"observeOn","path":"api/operators/observeOn","docType":"function"},"d82e":{"id":"d82e","label":"它会修改从发送值到 Observer 之间的路由","options":["4cd1"]},"0131":{"id":"0131","label":"我要更改调度器（Scheduler）","options":["dc4f","d82e"]},"5f09":{"id":"5f09","label":"race","path":"api/index/function/race","docType":"function"},"afcd":{"id":"afcd","label":"merge","path":"api/index/function/merge","docType":"function"},"68b2":{"id":"68b2","label":"我要输出所有值，而不管是从哪一个发送的","options":["afcd"]},"622e":{"id":"622e","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"fd12":{"id":"fd12","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["622e"]},"ed29":{"id":"ed29","label":"withLatestFrom","path":"api/operators/withLatestFrom","docType":"function"},"549d":{"id":"549d","label":"仅当主 Observable 发送值的时候，使用每个来源发送的最后一个值","options":["ed29"]},"678c":{"id":"678c","label":"zip","path":"api/index/function/zip","docType":"function"},"ad2f":{"id":"ad2f","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["fd12","549d","8388"]},"99b0":{"id":"99b0","label":"我要把这个 Observable 和其它的合并，并且","options":["6920","68b2","ad2f"]},"6a9f":{"id":"6a9f","label":"我已经有一个 Observable，并且","options":["45de","6b26","7879","612e","c7f3","791f","57ca","f294","f0b1","6335","5d66","e41d","b8db","5669","203e","4f7a","7481","b21f","f546","0131","99b0"]},"38a2":{"id":"38a2","label":"race","path":"api/index/function/race","docType":"function"},"d5a4":{"id":"d5a4","label":"我只想从首先发送值的 Observable 接收各个值","options":["38a2"]},"ad4c":{"id":"ad4c","label":"merge","path":"api/index/function/merge","docType":"function"},"83da":{"id":"83da","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"87ab":{"id":"87ab","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["83da"]},"4f3c":{"id":"4f3c","label":"zip","path":"api/index/function/zip","docType":"function"},"fb4e":{"id":"fb4e","label":"每个来源中的每个值仅使用一次","options":["4f3c"]},"f6b4":{"id":"f6b4","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["87ab","fb4e"]},"e506":{"id":"e506","label":"concat","path":"api/index/function/concat","docType":"function"},"a152":{"id":"a152","label":"我要依次订阅它们","options":["e506"]},"9c22":{"id":"9c22","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"create"},"fd9b":{"id":"fd9b","label":"使用自定义逻辑","options":["9c22"]},"63c9":{"id":"63c9","label":"generate","path":"api/index/function/generate","docType":"function"},"8a20":{"id":"8a20","label":"使用一个类似于 for 循环的状态机","options":["63c9"]},"91da":{"id":"91da","label":"throwError","path":"api/index/function/throwError","docType":"function"},"c03d":{"id":"c03d","label":"抛出一个错误","options":["91da"]},"754d":{"id":"754d","label":"只完成它，而不发送任何值","options":["9222"]},"bb10":{"id":"bb10","label":"NEVER","path":"api/index/const/NEVER","docType":"const"},"36b4":{"id":"36b4","label":"永远不会发送任何东西","options":["bb10"]},"bc88":{"id":"bc88","label":"fromEvent","path":"api/index/function/fromEvent","docType":"function"},"6f12":{"id":"6f12","label":"来自 DOM 或 Node.js 或类似的东西","options":["bc88"]},"726d":{"id":"726d","label":"fromEventPattern","path":"api/index/function/fromEventPattern","docType":"function"},"dea3":{"id":"dea3","label":"它使用某个 API 来添加或移除事件处理器","options":["726d"]},"f100":{"id":"f100","label":"from","path":"api/index/function/from","docType":"function"},"f4f8":{"id":"f4f8","label":"来自某个 Promise 或事件源","options":["f100"]},"e535":{"id":"e535","label":"from","path":"api/index/function/from","docType":"function"},"90dc":{"id":"90dc","label":"针对某个数组中的那些值","options":["e535"]},"60d1":{"id":"60d1","label":"range","path":"api/index/function/range","docType":"function"},"5bae":{"id":"5bae","label":"针对某个数字范围内的那些值","options":["60d1"]},"07e9":{"id":"07e9","label":"针对通过参数给出的那些值","options":["3847"]},"9a19":{"id":"9a19","label":"它是可迭代者","options":["90dc","5bae","07e9"]},"0c30":{"id":"0c30","label":"interval","path":"api/index/function/interval","docType":"function"},"5acd":{"id":"5acd","label":"均匀的","options":["0c30"]},"e10a":{"id":"e10a","label":"timer","path":"api/index/function/timer","docType":"function"},"f986":{"id":"f986","label":"带有一个可选的首次延迟","options":["e10a"]},"6ef3":{"id":"6ef3","label":"它基于定时器发送一些值","options":["5acd","f986"]},"b2f7":{"id":"b2f7","label":"defer","path":"api/index/function/defer","docType":"function"},"7aa8":{"id":"7aa8","label":"它在被订阅时才按需创建","options":["b2f7"]},"7bcf":{"id":"7bcf","label":"bindCallback","path":"api/index/function/bindCallback","docType":"function"},"be3b":{"id":"be3b","label":"支持常规的回调 API","options":["7bcf"]},"758e":{"id":"758e","label":"bindNodeCallback","path":"api/index/function/bindNodeCallback","docType":"function"},"f4af":{"id":"f4af","label":"支持 Node.js 风格的回调 API","options":["758e"]},"cc57":{"id":"cc57","label":"我要把某个回调函数转换为 Observable","options":["be3b","f4af"]},"faa9":{"id":"faa9","label":"我还没有任何 Observable，并且","options":["4622","cc57"]},"initial":{"id":"initial","options":["6a9f","9299","faa9"]}}