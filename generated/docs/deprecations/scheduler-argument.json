{
  "id": "deprecations/scheduler-argument",
  "title": "",
  "contents": "\n<div class=\"content\">\n<h1 id=\"scheduler-argument\" translation-result=\"on\">Scheduler(排程器)引數<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#scheduler-argument\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"scheduler-argument\">Scheduler Argument<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#scheduler-argument\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">為了限制某些運算子的對外 API，同時也為 <a href=\"https://github.com/ReactiveX/rxjs/pull/4583\">V8 中的重大重構</a>做準備，我們決定從許多運算子中棄用 <code>scheduler</code> 引數。它只會棄用那些很少使用此引數的方法。因此，與 <code>time</code> 相關的運算子（如 <a href=\"https://rxjs.dev/api/index/function/interval\"><code>interval</code></a>）不受此棄用的影響。</p><p translation-origin=\"off\">To limit the API surface of some operators, but also prepare for a <a href=\"https://github.com/ReactiveX/rxjs/pull/4583\">major refactoring in V8</a>, we agreed on deprecating the <code>scheduler</code> argument from many operators. It solely deprecates those methods where this argument is rarely used. So <code>time</code> related operators, like <a href=\"https://rxjs.dev/api/index/function/interval\"><code>interval</code></a> are not affected by this deprecation.</p>\n\n<p translation-result=\"on\">為了支援這種轉變，新增了<a href=\"/api/index/function/scheduled\">建立型函式 scheduled</a>。</p><p translation-origin=\"off\">To support this transition the <a href=\"/api/index/function/scheduled\">scheduled creation function</a> was added.</p>\n\n<div class=\"alert is-important\">\n    <span>\n        This deprecation was introduced in RxJS 6.5 and will become breaking with RxJS 8.\n    </span>\n    <span>\n        此棄用是 RxJS 6.5 中引入的，並且將在 RxJS 8 中成為重大變更。\n    </span>\n</div>\n<h2 id=\"operators-affected-by-this-change\" translation-result=\"on\">受此變更影響的運算子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#operators-affected-by-this-change\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"operators-affected-by-this-change\">Operators affected by this Change<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#operators-affected-by-this-change\"><i class=\"material-icons\">link</i></a></h2>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"/api/index/function/from\">from(從...轉為)</a></p><p translation-origin=\"off\"><a href=\"/api/index/function/from\">from</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"/api/index/function/of\">of(把...包裝為)</a></p><p translation-origin=\"off\"><a href=\"/api/index/function/of\">of</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"/api/index/function/merge\">merge(合併)</a></p><p translation-origin=\"off\"><a href=\"/api/index/function/merge\">merge</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"/api/index/function/concat\">concat(串聯)</a></p><p translation-origin=\"off\"><a href=\"/api/index/function/concat\">concat</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"/api/operators/startWith\">startWith(以...開始)</a></p><p translation-origin=\"off\"><a href=\"/api/operators/startWith\">startWith</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"/api/operators/endWith\">endWith(以...結尾)</a></p><p translation-origin=\"off\"><a href=\"/api/operators/endWith\">endWith</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"/api/index/function/combineLatest\">combineLatest(組合最新的)</a></p><p translation-origin=\"off\"><a href=\"/api/index/function/combineLatest\">combineLatest</a></p>\n\n</li>\n</ul>\n<h2 id=\"how-to-refactor\" translation-result=\"on\">如何重構<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#how-to-refactor\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"how-to-refactor\">How to Refactor<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#how-to-refactor\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">如果你使用上面清單中的任何其它運算子並使用 <code>scheduler</code> 引數，則必須使用三個潛在的重構選項。</p><p translation-origin=\"off\">If you use any other operator from the list above and using the <code>scheduler</code> argument, you have to three potential refactoring options.</p>\n\n<h3 id=\"refactoring-of-of-and-from\" translation-result=\"on\">重構 <code><a href=\"api/index/function/of\" class=\"code-anchor\">of</a></code> 和 <code><a href=\"api/index/function/from\" class=\"code-anchor\">from</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#refactoring-of-of-and-from\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"refactoring-of-of-and-from\">Refactoring of <code><a href=\"api/index/function/of\" class=\"code-anchor\">of</a></code> and <code><a href=\"api/index/function/from\" class=\"code-anchor\">from</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#refactoring-of-of-and-from\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code><a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a></code> 的行為有點像 <code><a href=\"api/index/function/from\" class=\"code-anchor\">from</a></code>。因此，如果你要為 <code><a href=\"api/index/function/from\" class=\"code-anchor\">from</a></code> 傳入 <code>scheduler</code> 引數，則只要替換它們即可。</p><p translation-origin=\"off\"><code><a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a></code> is kinda copying the behavior of <code><a href=\"api/index/function/from\" class=\"code-anchor\">from</a></code>. Therefore if you used <code><a href=\"api/index/function/from\" class=\"code-anchor\">from</a></code> with a <code>scheduler</code> argument, you can just replace them.</p>\n\n<p translation-result=\"on\">建立函式 <code><a href=\"api/index/function/of\" class=\"code-anchor\">of</a></code>，你需要將此 Observable 與 <code><a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a></code> 一起使用，而不是將 <code>scheduler</code> 引數傳遞給 <code><a href=\"api/index/function/of\" class=\"code-anchor\">of</a></code>。以下程式碼範例示範了此過程。</p><p translation-origin=\"off\">For the <code><a href=\"api/index/function/of\" class=\"code-anchor\">of</a></code> creation function you need to this Observable with <code><a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a></code> and instead of passing the <code>scheduler</code> argument to <code><a href=\"api/index/function/of\" class=\"code-anchor\">of</a></code> pass it to <code><a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a></code>. Following code example demonstrate this process.</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>, <a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\n// Deprecated approach\n<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>([1, 2, 3], <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>).subscribe((x) => console.log(x));\n// suggested approach\n<a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a>([1, 2, 3], <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>).subscribe((x) => console.log(x));\n</code-example>\n<h3 id=\"refactoring-of-merge-concat-combinelatest-startwith-and-endwith\" translation-result=\"on\">重構 <code><a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a></code>、<code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code>、<code><a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a></code>、<code><a href=\"api/index/function/startWith\" class=\"code-anchor\">startWith</a></code> 和 <code><a href=\"api/index/function/endWith\" class=\"code-anchor\">endWith</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#refactoring-of-merge-concat-combinelatest-startwith-and-endwith\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"refactoring-of-merge-concat-combinelatest-startwith-and-endwith\">Refactoring of <code><a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a></code>, <code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code>, <code><a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a></code>, <code><a href=\"api/index/function/startWith\" class=\"code-anchor\">startWith</a></code> and <code><a href=\"api/index/function/endWith\" class=\"code-anchor\">endWith</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/scheduler-argument#refactoring-of-merge-concat-combinelatest-startwith-and-endwith\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果你曾經將排程器引數傳遞給這些運算子之一，可能有這樣的程式碼：</p><p translation-origin=\"off\">In case you used to pass a scheduler argument to one of these operators you probably had code like this:</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a>, <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\n<a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a>(<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('hello '), <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('World'), <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>).subscribe((x) => console.log(x));\n</code-example>\n<p translation-result=\"on\">要解決此棄用問題，你可以利用 <a href=\"/api/index/function/scheduled\"><code>scheduled</code></a> 函式。</p><p translation-origin=\"off\">To work around this deprecation you can leverage the <a href=\"/api/index/function/scheduled\"><code>scheduled</code></a> function.</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a>, <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>, <a href=\"api/index/function/concatAll\" class=\"code-anchor\">concatAll</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\n<a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a>([<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('hello '), <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('World')], <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>)\n  .pipe(<a href=\"api/index/function/concatAll\" class=\"code-anchor\">concatAll</a>())\n  .subscribe((x) => console.log(x));\n</code-example>\n<p translation-result=\"on\">你可以應用此模式來重構已棄用的 <code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code>、<code><a href=\"api/index/function/startWith\" class=\"code-anchor\">startWith</a></code> 和 <code><a href=\"api/index/function/endWith\" class=\"code-anchor\">endWith</a></code>，但請注意你要用 <a href=\"/api/operators/mergeAll\">mergeAll</a> 重構已棄用的 <code><a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a></code>。</p><p translation-origin=\"off\">You can apply this pattern to refactor deprecated usage of <code><a href=\"api/index/function/concat\" class=\"code-anchor\">concat</a></code>, <code><a href=\"api/index/function/startWith\" class=\"code-anchor\">startWith</a></code> and <code><a href=\"api/index/function/endWith\" class=\"code-anchor\">endWith</a></code> but do notice that you will want to use <a href=\"/api/operators/mergeAll\">mergeAll</a> to refactor the deprecated usage of <code><a href=\"api/index/function/merge\" class=\"code-anchor\">merge</a></code>.</p>\n\n<p translation-result=\"on\">如果是 <code><a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a></code>，你就要改用 <a href=\"/api/operators/combineLatestAll\">combineLatestAll</a></p><p translation-origin=\"off\">With <code><a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a></code>, you will want to use <a href=\"/api/operators/combineLatestAll\">combineLatestAll</a></p>\n\n<p translation-result=\"on\">例如，過去看起來像這樣的程式碼：</p><p translation-origin=\"off\">E.g. code that used to look like this:</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a>, <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\n<a href=\"api/index/function/combineLatest\" class=\"code-anchor\">combineLatest</a>(<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('hello '), <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('World'), <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>).subscribe(console.log);\n</code-example>\n<p translation-result=\"on\">會成為：</p><p translation-origin=\"off\">would become:</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a>, <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>, <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>, <a href=\"api/index/function/combineLatestAll\" class=\"code-anchor\">combineLatestAll</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\n<a href=\"api/index/function/scheduled\" class=\"code-anchor\">scheduled</a>([<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('hello '), <a href=\"api/index/function/of\" class=\"code-anchor\">of</a>('World')], <a href=\"api/index/const/asyncScheduler\" class=\"code-anchor\">asyncScheduler</a>)\n  .pipe(<a href=\"api/index/function/combineLatestAll\" class=\"code-anchor\">combineLatestAll</a>())\n  .subscribe((x) => console.log(x));\n</code-example>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /api/index/function/combineLatest\n - /api/index/function/concat\n - /api/index/function/from\n - /api/index/function/merge\n - /api/index/function/of\n - /api/index/function/scheduled\n - /api/operators/combineLatestAll\n - /api/operators/endWith\n - /api/operators/mergeAll\n - /api/operators/startWith\n - api/index/const/asyncScheduler\n - api/index/function/combineLatest\n - api/index/function/combineLatestAll\n - api/index/function/concat\n - api/index/function/concatAll\n - api/index/function/endWith\n - api/index/function/from\n - api/index/function/merge\n - api/index/function/of\n - api/index/function/scheduled\n - api/index/function/startWith\n - deprecations/scheduler-argument#how-to-refactor\n - deprecations/scheduler-argument#operators-affected-by-this-change\n - deprecations/scheduler-argument#refactoring-of-merge-concat-combinelatest-startwith-and-endwith\n - deprecations/scheduler-argument#refactoring-of-of-and-from\n - deprecations/scheduler-argument#scheduler-argument\n - https://github.com/ReactiveX/rxjs/pull/4583\n - https://rxjs.dev/api/index/function/interval\n-->"
}