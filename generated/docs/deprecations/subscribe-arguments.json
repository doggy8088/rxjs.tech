{
  "id": "deprecations/subscribe-arguments",
  "title": "",
  "contents": "\n<div class=\"content\">\n<h1 id=\"subscribe-arguments\" translation-result=\"on\">Subscribe(訂閱)引數<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/subscribe-arguments#subscribe-arguments\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"subscribe-arguments\">Subscribe Arguments<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/subscribe-arguments#subscribe-arguments\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">你可能注意到我們棄用了 <code>subscribe</code> 方法的一些簽名，這可能會引起一些混亂。<code>subscribe</code> 方法本身沒有被棄用。這種棄用也會影響 <a href=\"../../api/operators/tap\"><code>tap</code> 運算子</a>，因為 tap 支援與 <code>subscribe</code> 方法相同的簽名。</p><p translation-origin=\"off\">You might have seen that we deprecated some signatures of the <code>subscribe</code> method, which might have caused some confusion. The <code>subscribe</code> method itself is not deprecated. This deprecation also affects the <a href=\"../../api/operators/tap\"><code>tap</code> operator</a>, as tap supports the same signature as the <code>subscribe</code> method.</p>\n\n<p translation-result=\"on\">這是為將來我們可能允許透過第二個引數設定 <code>subscribe</code> 做準備，例如 <code>AbortSignal</code> 或其類似物（想象一下 <code>source$.subscribe(fn, { signal })</code> 等）。這種棄用也是因為 2-3 個函式引數可能會導致程式碼更難閱讀。例如，有人可能會不恰當的命名函式並讓下一位讀者感到困惑：<code>source$.subscribe(doSomething, doSomethingElse, lol)</code>。使用該簽名，你必須瞭解有關 <code>subscribe</code> 的隱晦細節，使用部分 Observer（partial observer）可以巧妙地解決此問題： <code>source$.subscribe({ next: doSomething, error: doSomethingElse, complete: lol })</code>。</p><p translation-origin=\"off\">This is to get ready for a future where we may allow configuration of <code>subscribe</code> via the second argument, for things like <code>AbortSignal</code> or the like (imagine <code>source$.subscribe(fn, { signal })</code>, etc). This deprecation is also because 2-3 function arguments can contribute to harder-to-read code. For example someone could name functions poorly and confuse the next reader: <code>source$.subscribe(doSomething, doSomethingElse, lol)</code> With that signature, you have to know unapparent details about <code>subscribe</code>, where\nusing a partial observer solves that neatly: <code>source$.subscribe({ next: doSomething, error: doSomethingElse, complete: lol })</code>.</p>\n\n<div class=\"alert is-important\">\n    <span>\n        This deprecation was introduced in RxJS 6.4.\n    </span>\n    <span>\n        此棄用是在 RxJS 6.4 中引入的。\n    </span>\n</div>\n<p translation-result=\"on\">簡而言之，我們棄用了可指定匿名 <code>error</code> 或 <code>complete</code> 回呼的所有簽名，並將一個空函式傳遞給之前的回呼之一。</p><p translation-origin=\"off\">In short we deprecated all signatures where you specified an anonymous <code>error</code> or <code>complete</code> callback and passed an empty function to one of the callbacks before.</p>\n\n<h2 id=\"what-signature-is-affected\" translation-result=\"on\">什麼簽名會受到影響<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/subscribe-arguments#what-signature-is-affected\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"what-signature-is-affected\">What Signature is affected<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"deprecations/subscribe-arguments#what-signature-is-affected\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><strong>我們已棄用所有接受超過 1 個引數的 <code>subscribe</code> 簽名。</strong></p><p translation-origin=\"off\"><strong>We have deprecated all signatures of <code>subscribe</code> that take more than 1 argument.</strong></p>\n\n<p translation-result=\"on\">我們棄用了僅傳遞 <code>complete</code> 回呼的簽名。</p><p translation-origin=\"off\">We deprecated signatures for just passing the <code>complete</code> callback.</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\n// deprecated\n<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>([1, 2, 3]).subscribe(null, null, console.info); // difficult to read\n// suggested change\n<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>([1, 2, 3]).subscribe({ complete: console.info });\n</code-example>\n<p translation-result=\"on\">同樣，我們也棄用了僅傳遞 <code>error</code> 回呼的簽名。</p><p translation-origin=\"off\">Similarly, we also deprecated signatures for solely passing the <code>error</code> callback.</p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/throwError\" class=\"code-anchor\">throwError</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\n// deprecated\n<a href=\"api/index/function/throwError\" class=\"code-anchor\">throwError</a>('I am an error').subscribe(null, console.error);\n// suggested change\n<a href=\"api/index/function/throwError\" class=\"code-anchor\">throwError</a>('I am an error').subscribe({ error: console.error });\n</code-example>\n<p translation-result=\"on\">請注意，一般來說，如果你只指定了 <code>next</code> 回呼，則建議僅使用匿名函式，否則我們建議傳遞 <code><a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a></code></p><p translation-origin=\"off\">Do notice, in general it is recommended only to use the anonymous function if you only specify the <code>next</code> callback otherwise we recommend to pass an <code><a href=\"api/index/interface/Observer\" class=\"code-anchor\">Observer</a></code></p>\n\n<code-example language=\"ts\">\nimport { <a href=\"api/index/function/of\" class=\"code-anchor\">of</a> } <a href=\"api/index/function/from\" class=\"code-anchor\">from</a> 'rxjs';\n\n// recommended\n<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>([1, 2, 3]).subscribe((v) => console.info(v));\n// also recommended\n<a href=\"api/index/function/of\" class=\"code-anchor\">of</a>([1, 2, 3]).subscribe({\n  next: (v) => console.log(v),\n  error: (e) => console.error(e),\n  complete: () => console.info('complete'),\n});\n</code-example>\n\n</div>\n<!-- links to this doc:\n - api/index/class/Observable\n-->\n<!-- links from this doc:\n - ../../api/operators/tap\n - api/index/function/from\n - api/index/function/of\n - api/index/function/throwError\n - api/index/interface/Observer\n - deprecations/subscribe-arguments#subscribe-arguments\n - deprecations/subscribe-arguments#what-signature-is-affected\n-->"
}