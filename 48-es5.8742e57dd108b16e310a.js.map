{"version":3,"mappings":"8eAYMA,mEAHAC,EAAgBC,KAAqB,iBAG9BC,IAAPH,EAAN,WAGEI,WAAoBC,yBAClBC,KAAKC,WAAaD,KAAKE,gBAJ3B,uCAOUA,WAEN,IAAMH,EAAaC,KAAKG,KAAKC,IAAST,GAAeU,QACnDC,KAAIC,mBAUV,SAAsBb,GACpB,OAAOc,OAAOC,KAAKf,GAAcgB,IAAIC,YACnC,IAAMZ,EAAML,EAAaiB,GACzB,MAAO,CACLC,GAAIC,EAAOF,GACXG,MAAOH,EACPI,MAAOhB,EAAIgB,MACXC,cAAeC,EAAgBlB,EAAIiB,cAAeL,MAGrDO,KAAKC,GAVR,CAV+BZ,QACzBa,QAGD,SAAiDC,UAC3CtB,MAfXL,MAeWK,oCAfEL,GAAe4B,wCAAf5B,EAAe6B,QAAf7B,EAAe8B,YAAf9B,GAkCb,WAAyBA,EAAsBiB,GAC7C,OAAOH,OAAOC,KAAKf,GAAiBgB,IAAIX,YACpC,IAAMQ,EAAMb,EAAgBK,GAC5B,MAAO,CACLa,GAAIC,EAAOd,GACXe,MAAOf,EACPgB,MAAOR,EAAIQ,MACXU,UAAWC,EAAYnB,EAAIkB,UAAW1B,EAAQY,MAGnDO,KAAKC,GAIR,WAAqBzB,EAAmBiB,EAAgBZ,GACtD,OAAOS,OAAOC,KAAKf,GAAcgB,IAAIH,YACnC,IAAMoB,EAAMjC,EAAaa,GACzB,SAAIqB,SAAW7B,EACf4B,EAAIE,YAAclB,EAClBgB,EAAIf,GAAKC,EAAON,GACToB,IAERT,KAAKY,GAGR,WAAqBpC,EAA2BiB,GAC9C,OAAOjB,EAAEqB,QAAUJ,EAAEI,MAAQe,EAAcpC,EAAGiB,GAAKjB,EAAEqB,MAAQJ,EAAEI,MAAQ,GAAI,EAG7E,WAAuBrB,EAAoBiB,GAC1C,OAAOjB,EAAEoB,MAAMiB,cAAgBpB,EAAEG,MAAMiB,cAAgB,GAAI,EAG5D,WAAgBrC,GACd,OAAOA,EAAMsC,cAAcC,QAAQ,OAAQ,8BClE/BX,kBACEA,gBACEA,eACEA,cAAIA,SAAkBA,QACtBA,gBAAgCA,SAAqCA,QACvEA,QACFA,QACFA,sCAN8DA,mCAEpDA,wBAC4BA,mEALxCA,eACEA,uBAQFA,gCAR2BA,uDAL7BA,eACEA,eACAA,gBAA8BA,SAAqBA,QAEnDA,uBAUFA,gCAb6BA,0BACGA,wBAEJA,gEAXhCA,iBACEA,oBACEA,eACAA,cAAIA,SAAkBA,QACxBA,QAEAA,iBACEA,uBAeFA,QACFA,gCArB+BA,0BACvBA,wBAIyBA,2CCChC,IAAMY,EAAb,eAAMxC,EAAN,WAMEI,WACEC,EACQQ,oCAJVP,eAAY,EAKVA,KAAKmC,SAAWpC,EAASqC,SAASH,QAAQ,OAAQ,IATtD,8BAYEI,SAAKtC,GACH,OAAOC,KAAKmC,SAAW,IAAMpC,EAAIa,KAbrC,sBAgBE0B,sBAGEtC,KAAKuC,gBAAgBtC,WAAWuC,UAAUzC,mBAAQC,EAAKC,WAAaF,MAnBxE,sBAuBE0C,SAAS1C,GACPC,KAAK0C,UAAY3C,IAASA,EAAO4C,WAAa5C,EAAO6C,KAAKD,YAAc,MAxB5EjD,KAwB4E,6CAxB/DA,GAAqB4B,+CAArB5B,EAAqBmD,oGAArBtC,yBAAuBe,saDVpCA,iBACIA,iBACEA,uBAwBFA,QACJA,eAzBiDA,kFCQpC5B,EAAb,GCCaoD,EAAb,eAAMpD,EALNI,uBAMEE,4BAAoCkC,gDADzBxC,6DAFA,CAAEG,GAAiBkD,SAFrB,CAAEC,SAIAtD,EAAb","names":["t","h","m","a","constructor","o","this","categories","getCategories","http","get","pipe","f","s","Object","keys","map","r","id","u","title","order","subCategories","C","sort","d","g","connect","e","factory","Éµfac","resources","T","c","category","subCategory","p","toUpperCase","toLowerCase","replace","O","location","pathname","href","ngOnInit","resourceService","subscribe","onScroll","scrollPos","scrollTop","body","selectors","q","imports","n"],"sources":["webpack:///src/app/custom-elements/resource/resource.service.ts","webpack:///src/app/custom-elements/resource/resource-list.component.html","webpack:///src/app/custom-elements/resource/resource-list.component.ts","webpack:///src/app/custom-elements/resource/resource-list.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { ConnectableObservable, Observable } from 'rxjs';\nimport { map, publishLast } from 'rxjs/operators';\n\nimport { Category, Resource, SubCategory } from './resource.model';\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\n\nconst resourcesPath = CONTENT_URL_PREFIX + 'resources.json';\n\n@Injectable()\nexport class ResourceService {\n  categories: Observable<Category[]>;\n\n  constructor(private http: HttpClient) {\n    this.categories = this.getCategories();\n  }\n\n  private getCategories(): Observable<Category[]> {\n\n    const categories = this.http.get<any>(resourcesPath).pipe(\n      map(data => mkCategories(data)),\n      publishLast(),\n    );\n\n    (categories as ConnectableObservable<Category[]>).connect();\n    return categories;\n  };\n}\n\n// Extract sorted Category[] from resource JSON data\nfunction mkCategories(categoryJson: any): Category[] {\n  return Object.keys(categoryJson).map(catKey => {\n    const cat = categoryJson[catKey];\n    return {\n      id: makeId(catKey),\n      title: catKey,\n      order: cat.order,\n      subCategories: mkSubCategories(cat.subCategories, catKey)\n    } as Category;\n  })\n  .sort(compareCats);\n}\n\n// Extract sorted SubCategory[] from JSON category data\nfunction mkSubCategories(subCategoryJson: any, catKey: string): SubCategory[] {\n  return Object.keys(subCategoryJson).map(subKey => {\n      const sub = subCategoryJson[subKey];\n      return {\n        id: makeId(subKey),\n        title: subKey,\n        order: sub.order,\n        resources: mkResources(sub.resources, subKey, catKey)\n      } as SubCategory;\n  })\n  .sort(compareCats);\n}\n\n// Extract sorted Resource[] from JSON subcategory data\nfunction mkResources(resourceJson: any, subKey: string, catKey: string): Resource[] {\n  return Object.keys(resourceJson).map(resKey => {\n    const res = resourceJson[resKey];\n    res.category = catKey;\n    res.subCategory = subKey;\n    res.id = makeId(resKey);\n    return res as Resource;\n  })\n  .sort(compareTitles);\n}\n\nfunction compareCats(l: Category | SubCategory, r: Category | SubCategory) {\n  return l.order === r.order ? compareTitles(l, r) : l.order > r.order ? 1 : -1;\n}\n\nfunction compareTitles(l: {title: string}, r: {title: string}) {\n return l.title.toUpperCase() > r.title.toUpperCase() ? 1 : -1;\n}\n\nfunction makeId(title: string) {\n  return title.toLowerCase().replace(/\\s+/g, '-');\n}\n","<div class=\"resources-container\">\n    <div class=\"l-flex--column\">\n      <div class=\"showcase\" *ngFor=\"let category of categories\">\n        <header class=\"c-resource-header\">\n          <a class=\"h-anchor-offset\" id=\"{{category.id}}\"></a>\n          <h2>{{category.title}}</h2>\n        </header>\n\n        <div class=\"shadow-1\">\n          <div *ngFor=\"let subCategory of category.subCategories\">\n            <a class=\"h-anchor-offset\" id=\"{{subCategory.id}}\"></a>\n            <h3 class=\"subcategory-title\">{{subCategory.title}}</h3>\n\n            <div *ngFor=\"let resource of subCategory.resources\">\n              <div class=\"c-resource\" *ngIf=\"resource.rev\">\n                <a class=\"l-flex--column resource-row-link\" target=\"_blank\" [href]=\"resource.url\">\n                  <div>\n                    <h4>{{resource.title}}</h4>\n                    <p class=\"resource-description\">{{resource.desc || 'No Description'}}</p>\n                  </div>\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n</div>\n","import { Component, HostListener, OnInit } from '@angular/core';\nimport { PlatformLocation } from '@angular/common';\n\nimport { Category } from './resource.model';\nimport { ResourceService } from './resource.service';\n\n@Component({\n  selector: 'aio-resource-list',\n  templateUrl: 'resource-list.component.html'\n})\nexport class ResourceListComponent implements OnInit {\n\n  categories: Category[];\n  location: string;\n  scrollPos = 0;\n\n  constructor(\n    location: PlatformLocation,\n    private resourceService: ResourceService) {\n    this.location = location.pathname.replace(/^\\/+/, '');\n  }\n\n  href(cat: {id: string}) {\n    return this.location + '#' + cat.id;\n  }\n\n  ngOnInit() {\n    // Not using async pipe because cats appear twice in template\n    // No need to unsubscribe because categories observable completes.\n    this.resourceService.categories.subscribe(cats => this.categories = cats);\n  }\n\n  @HostListener('window:scroll', ['$event.target'])\n  onScroll(target: any) {\n    this.scrollPos = target ? target.scrollTop || target.body.scrollTop ||  0 : 0;\n  }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ResourceListComponent } from './resource-list.component';\nimport { ResourceService } from './resource.service';\nimport { WithCustomElementComponent } from '../element-registry';\n\n@NgModule({\n  imports: [ CommonModule ],\n  declarations: [ ResourceListComponent ],\n  providers: [ ResourceService ]\n})\nexport class ResourceListModule implements WithCustomElementComponent {\n  customElementComponent: Type<any> = ResourceListComponent;\n}\n"]}