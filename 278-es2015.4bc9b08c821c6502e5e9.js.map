{"version":3,"mappings":"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","names":["h","m","f","b","constructor","n","this","contributors","getContributors","http","get","pipe","r","i","keys","forEach","c","a","C","group","d","push","l","Object","map","indexOf","name","order","length","sort","Z","x","g","connect","o","t","factory","e","toUpperCase","N","flipCard","isFlipped","selectors","O","ngOnInit","locationService","search","contributorService","subscribe","groups","groupNames","selectGroup","toLowerCase","selectedGroup","find","setSearch","G","imports","u"],"sources":["webpack:///src/app/custom-elements/contributor/contributor.service.ts","webpack:///src/app/custom-elements/contributor/contributor.component.ts","webpack:///src/app/custom-elements/contributor/contributor-list.component.ts","webpack:///src/app/custom-elements/contributor/contributor-list.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { ConnectableObservable, Observable } from 'rxjs';\nimport { map, publishLast } from 'rxjs/operators';\n\nimport { Contributor, ContributorGroup } from './contributors.model';\n\n// TODO(andrewjs): Look into changing this so that we don't import the service just to get the const\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\n\nconst contributorsPath = CONTENT_URL_PREFIX + 'contributors.json';\nconst knownGroups = ['Core Team', 'Learning Team', 'Alumn', 'Contributors'];\n\n@Injectable()\nexport class ContributorService {\n  contributors: Observable<ContributorGroup[]>;\n\n  constructor(private http: HttpClient) {\n    this.contributors = this.getContributors();\n  }\n\n  private getContributors() {\n    const contributors = this.http.get<{[key: string]: Contributor}>(contributorsPath).pipe(\n      // Create group map\n      map(contribs => {\n        const contribMap: { [name: string]: Contributor[]} = {};\n        Object.keys(contribs).forEach(key => {\n          const contributor = contribs[key];\n          const group = contributor.group;\n          const contribGroup = contribMap[group];\n          if (contribGroup) {\n            contribGroup.push(contributor);\n          } else {\n            contribMap[group] = [contributor];\n          }\n        });\n\n        return contribMap;\n      }),\n\n      // Flatten group map into sorted group array of sorted contributors\n      map(cmap => {\n        return Object.keys(cmap).map(key => {\n          const order = knownGroups.indexOf(key);\n          return {\n            name: key,\n            order: order === -1 ? knownGroups.length : order,\n            contributors: cmap[key].sort(compareContributors)\n          } as ContributorGroup;\n        })\n        .sort(compareGroups);\n      }),\n\n      publishLast(),\n    );\n\n    (contributors as ConnectableObservable<ContributorGroup[]>).connect();\n    return contributors;\n  }\n}\n\nfunction compareContributors(l: Contributor, r: Contributor) {\n return l.name.toUpperCase() > r.name.toUpperCase() ? 1 : -1;\n}\n\nfunction compareGroups(l: ContributorGroup, r: ContributorGroup) {\n  return l.order === r.order ?\n    (l.name > r.name ? 1 : -1) :\n     l.order > r.order ? 1 : -1;\n}\n","import { Component, Input } from '@angular/core';\n\nimport { Contributor } from './contributors.model';\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\n\n@Component({\n  selector: 'aio-contributor',\n  template: `\n    <div [ngClass]=\"{ 'flipped': person.isFlipped }\" class=\"contributor-card\">\n\n        <div class=\"card-front\">\n            <h3>{{person.name}}</h3>\n\n            <div class=\"contributor-image\" [style.background-image]=\"'url('+(person.picture || noPicture)+')'\">\n                <div class=\"contributor-info\">\n                    <a *ngIf=\"person.bio\" mat-button>\n                        View Bio\n                    </a>\n                    <a *ngIf=\"person.twitter\" mat-button class=\"icon\"\n                        href=\"{{person.twitter}}\" target=\"_blank\" (click)=\"$event.stopPropagation()\">\n                        <span class=\"fa fa-twitter fa-2x\" aria-hidden=\"true\"></span>\n                        <span class=\"sr-only\">Twitter {{person.name}}</span>\n                    </a>\n                    <a *ngIf=\"person.github\" mat-button class=\"icon\"\n                        href=\"{{person.github}}\" target=\"_blank\" (click)=\"$event.stopPropagation()\">\n                        <span class=\"fa fa-github fa-2x\" aria-hidden=\"true\"></span>\n                        <span class=\"sr-only\">Github {{person.name}}</span>\n                    </a>\n                    <a *ngIf=\"person.website\" mat-button class=\"icon\"\n                        href=\"{{person.website}}\" target=\"_blank\" (click)=\"$event.stopPropagation()\">\n                        <span class=\"fa fa-link fa-2x\" aria-hidden=\"true\"></span>\n                        <span class=\"sr-only\">Personal website {{person.name}}</span>\n                    </a>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"card-back\" *ngIf=\"person.isFlipped\" (click)=\"flipCard(person)\">\n            <h3>{{person.name}}</h3>\n            <p class=\"contributor-bio\">{{person.bio}}</p>\n        </div>\n    </div>\n  `,\n})\nexport class ContributorComponent {\n  @Input() person: Contributor;\n  noPicture = '_no-one.png';\n  pictureBase = CONTENT_URL_PREFIX + 'images/bios/';\n\n  flipCard(person: Contributor) {\n    person.isFlipped = !person.isFlipped;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ContributorGroup } from './contributors.model';\nimport { ContributorService } from './contributor.service';\nimport { LocationService } from 'app/shared/location.service';\n\n@Component({\n  selector: `aio-contributor-list`,\n  template: `\n  <div class=\"flex-center group-buttons\">\n    <a *ngFor=\"let name of groupNames\"\n       [class.selected]=\"name == selectedGroup.name\"\n       class=\"button mat-button filter-button\"\n       (click)=\"selectGroup(name)\">{{name}}</a>\n  </div>\n  <section *ngIf=\"selectedGroup\" class=\"grid-fluid\">\n    <div class=\"contributor-group\">\n      <aio-contributor *ngFor=\"let person of selectedGroup.contributors\" [person]=\"person\"></aio-contributor>\n    </div>\n  </section>`\n})\nexport class ContributorListComponent implements OnInit {\n  private groups: ContributorGroup[];\n  groupNames: string[];\n  selectedGroup: ContributorGroup;\n\n  constructor(\n    private contributorService: ContributorService,\n    private locationService: LocationService) { }\n\n  ngOnInit() {\n    const groupName =  this.locationService.search()['group'] || '';\n    // no need to unsubscribe because `contributors` completes\n    this.contributorService.contributors\n      .subscribe(grps => {\n        this.groups = grps;\n        this.groupNames = grps.map(g => g.name);\n        this.selectGroup(groupName);\n      });\n  }\n\n  selectGroup(name: string) {\n    name = name.toLowerCase();\n    this.selectedGroup = this.groups.find(g => g.name.toLowerCase() === name) || this.groups[0];\n    this.locationService.setSearch('', {group: this.selectedGroup.name});\n  }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ContributorListComponent } from './contributor-list.component';\nimport { ContributorService } from './contributor.service';\nimport { ContributorComponent } from './contributor.component';\nimport { WithCustomElementComponent } from '../element-registry';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [ContributorListComponent, ContributorComponent],\n  providers: [ContributorService],\n})\nexport class ContributorListModule implements WithCustomElementComponent {\n  customElementComponent: Type<any> = ContributorListComponent;\n}\n"]}